import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// build/bulletJs.0.0.1.js
var require_bulletJs_0_0_1 = __commonJS((exports, module) => {
  var __dirname = "/home/barbie/Documents/_PROGRAMMING/github/perso/FrankenPhys/build", __filename = "/home/barbie/Documents/_PROGRAMMING/github/perso/FrankenPhys/build/bulletJs.0.0.1.js";
  var bulletJsLoader = (() => {
    var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : undefined;
    if (typeof __filename !== "undefined")
      _scriptDir = _scriptDir || __filename;
    return function(moduleArg = {}) {
      var Module = moduleArg;
      var readyPromiseResolve, readyPromiseReject;
      Module["ready"] = new Promise((resolve, reject) => {
        readyPromiseResolve = resolve;
        readyPromiseReject = reject;
      });
      var moduleOverrides = Object.assign({}, Module);
      var arguments_ = [];
      var thisProgram = "./this.program";
      var quit_ = (status, toThrow) => {
        throw toThrow;
      };
      var ENVIRONMENT_IS_WEB = typeof window == "object";
      var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
      var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
      var scriptDirectory = "";
      function locateFile(path) {
        if (Module["locateFile"]) {
          return Module["locateFile"](path, scriptDirectory);
        }
        return scriptDirectory + path;
      }
      var read_, readAsync, readBinary, setWindowTitle;
      if (ENVIRONMENT_IS_NODE) {
        var fs = __require("fs");
        var nodePath = __require("path");
        if (ENVIRONMENT_IS_WORKER) {
          scriptDirectory = nodePath.dirname(scriptDirectory) + "/";
        } else {
          scriptDirectory = __dirname + "/";
        }
        read_ = (filename, binary) => {
          filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
          return fs.readFileSync(filename, binary ? undefined : "utf8");
        };
        readBinary = (filename) => {
          var ret = read_(filename, true);
          if (!ret.buffer) {
            ret = new Uint8Array(ret);
          }
          return ret;
        };
        readAsync = (filename, onload, onerror, binary = true) => {
          filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
          fs.readFile(filename, binary ? undefined : "utf8", (err2, data) => {
            if (err2)
              onerror(err2);
            else
              onload(binary ? data.buffer : data);
          });
        };
        if (!Module["thisProgram"] && process.argv.length > 1) {
          thisProgram = process.argv[1].replace(/\\/g, "/");
        }
        arguments_ = process.argv.slice(2);
        quit_ = (status, toThrow) => {
          process.exitCode = status;
          throw toThrow;
        };
        Module["inspect"] = () => "[Emscripten Module object]";
      } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        if (ENVIRONMENT_IS_WORKER) {
          scriptDirectory = self.location.href;
        } else if (typeof document != "undefined" && document.currentScript) {
          scriptDirectory = document.currentScript.src;
        }
        if (_scriptDir) {
          scriptDirectory = _scriptDir;
        }
        if (scriptDirectory.indexOf("blob:") !== 0) {
          scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
        } else {
          scriptDirectory = "";
        }
        {
          read_ = (url) => {
            var xhr = new XMLHttpRequest;
            xhr.open("GET", url, false);
            xhr.send(null);
            return xhr.responseText;
          };
          if (ENVIRONMENT_IS_WORKER) {
            readBinary = (url) => {
              var xhr = new XMLHttpRequest;
              xhr.open("GET", url, false);
              xhr.responseType = "arraybuffer";
              xhr.send(null);
              return new Uint8Array(xhr.response);
            };
          }
          readAsync = (url, onload, onerror) => {
            var xhr = new XMLHttpRequest;
            xhr.open("GET", url, true);
            xhr.responseType = "arraybuffer";
            xhr.onload = () => {
              if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                onload(xhr.response);
                return;
              }
              onerror();
            };
            xhr.onerror = onerror;
            xhr.send(null);
          };
        }
        setWindowTitle = (title) => document.title = title;
      } else {}
      var out = Module["print"] || console.log.bind(console);
      var err = Module["printErr"] || console.error.bind(console);
      Object.assign(Module, moduleOverrides);
      moduleOverrides = null;
      if (Module["arguments"])
        arguments_ = Module["arguments"];
      if (Module["thisProgram"])
        thisProgram = Module["thisProgram"];
      if (Module["quit"])
        quit_ = Module["quit"];
      var wasmBinary;
      if (Module["wasmBinary"])
        wasmBinary = Module["wasmBinary"];
      var noExitRuntime = Module["noExitRuntime"] || true;
      if (typeof WebAssembly != "object") {
        abort("no native wasm support detected");
      }
      var wasmMemory;
      var wasmExports;
      var ABORT = false;
      var EXITSTATUS;
      function assert(condition, text) {
        if (!condition) {
          abort(text);
        }
      }
      var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
      function updateMemoryViews() {
        var b = wasmMemory.buffer;
        Module["HEAP8"] = HEAP8 = new Int8Array(b);
        Module["HEAP16"] = HEAP16 = new Int16Array(b);
        Module["HEAP32"] = HEAP32 = new Int32Array(b);
        Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
        Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
        Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
        Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
        Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
      }
      var wasmTable;
      var __ATPRERUN__ = [];
      var __ATINIT__ = [];
      var __ATPOSTRUN__ = [];
      var runtimeInitialized = false;
      function preRun() {
        if (Module["preRun"]) {
          if (typeof Module["preRun"] == "function")
            Module["preRun"] = [Module["preRun"]];
          while (Module["preRun"].length) {
            addOnPreRun(Module["preRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPRERUN__);
      }
      function initRuntime() {
        runtimeInitialized = true;
        callRuntimeCallbacks(__ATINIT__);
      }
      function postRun() {
        if (Module["postRun"]) {
          if (typeof Module["postRun"] == "function")
            Module["postRun"] = [Module["postRun"]];
          while (Module["postRun"].length) {
            addOnPostRun(Module["postRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPOSTRUN__);
      }
      function addOnPreRun(cb) {
        __ATPRERUN__.unshift(cb);
      }
      function addOnInit(cb) {
        __ATINIT__.unshift(cb);
      }
      function addOnPostRun(cb) {
        __ATPOSTRUN__.unshift(cb);
      }
      var runDependencies = 0;
      var runDependencyWatcher = null;
      var dependenciesFulfilled = null;
      function addRunDependency(id) {
        runDependencies++;
        if (Module["monitorRunDependencies"]) {
          Module["monitorRunDependencies"](runDependencies);
        }
      }
      function removeRunDependency(id) {
        runDependencies--;
        if (Module["monitorRunDependencies"]) {
          Module["monitorRunDependencies"](runDependencies);
        }
        if (runDependencies == 0) {
          if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
          }
          if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
          }
        }
      }
      function abort(what) {
        if (Module["onAbort"]) {
          Module["onAbort"](what);
        }
        what = "Aborted(" + what + ")";
        err(what);
        ABORT = true;
        EXITSTATUS = 1;
        what += ". Build with -sASSERTIONS for more info.";
        var e = new WebAssembly.RuntimeError(what);
        readyPromiseReject(e);
        throw e;
      }
      var dataURIPrefix = "data:application/octet-stream;base64,";
      function isDataURI(filename) {
        return filename.startsWith(dataURIPrefix);
      }
      function isFileURI(filename) {
        return filename.startsWith("file://");
      }
      var wasmBinaryFile;
      wasmBinaryFile = "bulletJs.0.0.1.wasm";
      if (!isDataURI(wasmBinaryFile)) {
        wasmBinaryFile = locateFile(wasmBinaryFile);
      }
      function getBinarySync(file) {
        if (file == wasmBinaryFile && wasmBinary) {
          return new Uint8Array(wasmBinary);
        }
        if (readBinary) {
          return readBinary(file);
        }
        throw "both async and sync fetching of the wasm failed";
      }
      function getBinaryPromise(binaryFile) {
        if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
          if (typeof fetch == "function" && !isFileURI(binaryFile)) {
            return fetch(binaryFile, { credentials: "same-origin" }).then((response) => {
              if (!response["ok"]) {
                throw "failed to load wasm binary file at '" + binaryFile + "'";
              }
              return response["arrayBuffer"]();
            }).catch(() => getBinarySync(binaryFile));
          } else if (readAsync) {
            return new Promise((resolve, reject) => {
              readAsync(binaryFile, (response) => resolve(new Uint8Array(response)), reject);
            });
          }
        }
        return Promise.resolve().then(() => getBinarySync(binaryFile));
      }
      function instantiateArrayBuffer(binaryFile, imports, receiver) {
        return getBinaryPromise(binaryFile).then((binary) => WebAssembly.instantiate(binary, imports)).then((instance) => instance).then(receiver, (reason) => {
          err("failed to asynchronously prepare wasm: " + reason);
          abort(reason);
        });
      }
      function instantiateAsync(binary, binaryFile, imports, callback) {
        if (!binary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(binaryFile) && !isFileURI(binaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function") {
          return fetch(binaryFile, { credentials: "same-origin" }).then((response) => {
            var result = WebAssembly.instantiateStreaming(response, imports);
            return result.then(callback, function(reason) {
              err("wasm streaming compile failed: " + reason);
              err("falling back to ArrayBuffer instantiation");
              return instantiateArrayBuffer(binaryFile, imports, callback);
            });
          });
        }
        return instantiateArrayBuffer(binaryFile, imports, callback);
      }
      function createWasm() {
        var info = { a: wasmImports };
        function receiveInstance(instance, module2) {
          var exports2 = instance.exports;
          wasmExports = exports2;
          wasmMemory = wasmExports["g"];
          updateMemoryViews();
          wasmTable = wasmExports["Ar"];
          addOnInit(wasmExports["h"]);
          removeRunDependency("wasm-instantiate");
          return exports2;
        }
        addRunDependency("wasm-instantiate");
        function receiveInstantiationResult(result) {
          receiveInstance(result["instance"]);
        }
        if (Module["instantiateWasm"]) {
          try {
            return Module["instantiateWasm"](info, receiveInstance);
          } catch (e) {
            err("Module.instantiateWasm callback failed with error: " + e);
            readyPromiseReject(e);
          }
        }
        instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);
        return {};
      }
      var ASM_CONSTS = { 25068: ($0, $1, $2, $3, $4, $5, $6, $7) => {
        var self2 = Module["getCache"](Module["ConcreteContactResultCallback"])[$0];
        if (!self2.hasOwnProperty("addSingleResult"))
          throw "a JSImplementation must implement all functions, you forgot ConcreteContactResultCallback::addSingleResult.";
        return self2["addSingleResult"]($1, $2, $3, $4, $5, $6, $7);
      } };
      var callRuntimeCallbacks = (callbacks) => {
        while (callbacks.length > 0) {
          callbacks.shift()(Module);
        }
      };
      function ExceptionInfo(excPtr) {
        this.excPtr = excPtr;
        this.ptr = excPtr - 24;
        this.set_type = function(type2) {
          HEAPU32[this.ptr + 4 >> 2] = type2;
        };
        this.get_type = function() {
          return HEAPU32[this.ptr + 4 >> 2];
        };
        this.set_destructor = function(destructor) {
          HEAPU32[this.ptr + 8 >> 2] = destructor;
        };
        this.get_destructor = function() {
          return HEAPU32[this.ptr + 8 >> 2];
        };
        this.set_caught = function(caught) {
          caught = caught ? 1 : 0;
          HEAP8[this.ptr + 12 >> 0] = caught;
        };
        this.get_caught = function() {
          return HEAP8[this.ptr + 12 >> 0] != 0;
        };
        this.set_rethrown = function(rethrown) {
          rethrown = rethrown ? 1 : 0;
          HEAP8[this.ptr + 13 >> 0] = rethrown;
        };
        this.get_rethrown = function() {
          return HEAP8[this.ptr + 13 >> 0] != 0;
        };
        this.init = function(type2, destructor) {
          this.set_adjusted_ptr(0);
          this.set_type(type2);
          this.set_destructor(destructor);
        };
        this.set_adjusted_ptr = function(adjustedPtr) {
          HEAPU32[this.ptr + 16 >> 2] = adjustedPtr;
        };
        this.get_adjusted_ptr = function() {
          return HEAPU32[this.ptr + 16 >> 2];
        };
        this.get_exception_ptr = function() {
          var isPointer = ___cxa_is_pointer_type(this.get_type());
          if (isPointer) {
            return HEAPU32[this.excPtr >> 2];
          }
          var adjusted = this.get_adjusted_ptr();
          if (adjusted !== 0)
            return adjusted;
          return this.excPtr;
        };
      }
      var exceptionLast = 0;
      var uncaughtExceptionCount = 0;
      function ___cxa_throw(ptr, type2, destructor) {
        var info = new ExceptionInfo(ptr);
        info.init(type2, destructor);
        exceptionLast = ptr;
        uncaughtExceptionCount++;
        throw exceptionLast;
      }
      var _abort = () => {
        abort("");
      };
      var readEmAsmArgsArray = [];
      var readEmAsmArgs = (sigPtr, buf) => {
        readEmAsmArgsArray.length = 0;
        var ch;
        buf >>= 2;
        while (ch = HEAPU8[sigPtr++]) {
          buf += ch != 105 & buf;
          readEmAsmArgsArray.push(ch == 105 ? HEAP32[buf] : HEAPF64[buf++ >> 1]);
          ++buf;
        }
        return readEmAsmArgsArray;
      };
      var runEmAsmFunction = (code, sigPtr, argbuf) => {
        var args = readEmAsmArgs(sigPtr, argbuf);
        return ASM_CONSTS[code].apply(null, args);
      };
      var _emscripten_asm_const_double = (code, sigPtr, argbuf) => runEmAsmFunction(code, sigPtr, argbuf);
      function _emscripten_date_now() {
        return Date.now();
      }
      var _emscripten_memcpy_big = (dest, src, num) => HEAPU8.copyWithin(dest, src, src + num);
      var abortOnCannotGrowMemory = (requestedSize) => {
        abort("OOM");
      };
      var _emscripten_resize_heap = (requestedSize) => {
        var oldSize = HEAPU8.length;
        requestedSize >>>= 0;
        abortOnCannotGrowMemory(requestedSize);
      };
      var lengthBytesUTF8 = (str) => {
        var len = 0;
        for (var i = 0;i < str.length; ++i) {
          var c = str.charCodeAt(i);
          if (c <= 127) {
            len++;
          } else if (c <= 2047) {
            len += 2;
          } else if (c >= 55296 && c <= 57343) {
            len += 4;
            ++i;
          } else {
            len += 3;
          }
        }
        return len;
      };
      var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
        if (!(maxBytesToWrite > 0))
          return 0;
        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1;
        for (var i = 0;i < str.length; ++i) {
          var u = str.charCodeAt(i);
          if (u >= 55296 && u <= 57343) {
            var u1 = str.charCodeAt(++i);
            u = 65536 + ((u & 1023) << 10) | u1 & 1023;
          }
          if (u <= 127) {
            if (outIdx >= endIdx)
              break;
            heap[outIdx++] = u;
          } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx)
              break;
            heap[outIdx++] = 192 | u >> 6;
            heap[outIdx++] = 128 | u & 63;
          } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx)
              break;
            heap[outIdx++] = 224 | u >> 12;
            heap[outIdx++] = 128 | u >> 6 & 63;
            heap[outIdx++] = 128 | u & 63;
          } else {
            if (outIdx + 3 >= endIdx)
              break;
            heap[outIdx++] = 240 | u >> 18;
            heap[outIdx++] = 128 | u >> 12 & 63;
            heap[outIdx++] = 128 | u >> 6 & 63;
            heap[outIdx++] = 128 | u & 63;
          }
        }
        heap[outIdx] = 0;
        return outIdx - startIdx;
      };
      var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
      var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {
        var endIdx = idx + maxBytesToRead;
        var endPtr = idx;
        while (heapOrArray[endPtr] && !(endPtr >= endIdx))
          ++endPtr;
        if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
          return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
        }
        var str = "";
        while (idx < endPtr) {
          var u0 = heapOrArray[idx++];
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }
          var u1 = heapOrArray[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }
          var u2 = heapOrArray[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
          } else {
            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
        return str;
      };
      var UTF8ToString = (ptr, maxBytesToRead) => ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
      function getCFunc(ident) {
        var func = Module["_" + ident];
        return func;
      }
      var writeArrayToMemory = (array, buffer) => {
        HEAP8.set(array, buffer);
      };
      var stringToUTF8 = (str, outPtr, maxBytesToWrite) => stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
      var stringToUTF8OnStack = (str) => {
        var size = lengthBytesUTF8(str) + 1;
        var ret = stackAlloc(size);
        stringToUTF8(str, ret, size);
        return ret;
      };
      var ccall = function(ident, returnType, argTypes, args, opts) {
        var toC = { string: (str) => {
          var ret2 = 0;
          if (str !== null && str !== undefined && str !== 0) {
            ret2 = stringToUTF8OnStack(str);
          }
          return ret2;
        }, array: (arr) => {
          var ret2 = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret2);
          return ret2;
        } };
        function convertReturnValue(ret2) {
          if (returnType === "string") {
            return UTF8ToString(ret2);
          }
          if (returnType === "boolean")
            return Boolean(ret2);
          return ret2;
        }
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
          for (var i = 0;i < args.length; i++) {
            var converter = toC[argTypes[i]];
            if (converter) {
              if (stack === 0)
                stack = stackSave();
              cArgs[i] = converter(args[i]);
            } else {
              cArgs[i] = args[i];
            }
          }
        }
        var ret = func.apply(null, cArgs);
        function onDone(ret2) {
          if (stack !== 0)
            stackRestore(stack);
          return convertReturnValue(ret2);
        }
        ret = onDone(ret);
        return ret;
      };
      var cwrap = function(ident, returnType, argTypes, opts) {
        var numericArgs = !argTypes || argTypes.every((type2) => type2 === "number" || type2 === "boolean");
        var numericRet = returnType !== "string";
        if (numericRet && numericArgs && !opts) {
          return getCFunc(ident);
        }
        return function() {
          return ccall(ident, returnType, argTypes, arguments, opts);
        };
      };
      function uleb128Encode(n, target) {
        if (n < 128) {
          target.push(n);
        } else {
          target.push(n % 128 | 128, n >> 7);
        }
      }
      function sigToWasmTypes(sig) {
        var typeNames = { i: "i32", j: "i64", f: "f32", d: "f64", p: "i32" };
        var type2 = { parameters: [], results: sig[0] == "v" ? [] : [typeNames[sig[0]]] };
        for (var i = 1;i < sig.length; ++i) {
          type2.parameters.push(typeNames[sig[i]]);
        }
        return type2;
      }
      function generateFuncType(sig, target) {
        var sigRet = sig.slice(0, 1);
        var sigParam = sig.slice(1);
        var typeCodes = { i: 127, p: 127, j: 126, f: 125, d: 124 };
        target.push(96);
        uleb128Encode(sigParam.length, target);
        for (var i = 0;i < sigParam.length; ++i) {
          target.push(typeCodes[sigParam[i]]);
        }
        if (sigRet == "v") {
          target.push(0);
        } else {
          target.push(1, typeCodes[sigRet]);
        }
      }
      function convertJsFunctionToWasm(func, sig) {
        if (typeof WebAssembly.Function == "function") {
          return new WebAssembly.Function(sigToWasmTypes(sig), func);
        }
        var typeSectionBody = [1];
        generateFuncType(sig, typeSectionBody);
        var bytes = [0, 97, 115, 109, 1, 0, 0, 0, 1];
        uleb128Encode(typeSectionBody.length, bytes);
        bytes.push.apply(bytes, typeSectionBody);
        bytes.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
        var module2 = new WebAssembly.Module(new Uint8Array(bytes));
        var instance = new WebAssembly.Instance(module2, { e: { f: func } });
        var wrappedFunc = instance.exports["f"];
        return wrappedFunc;
      }
      var wasmTableMirror = [];
      var getWasmTableEntry = (funcPtr) => {
        var func = wasmTableMirror[funcPtr];
        if (!func) {
          if (funcPtr >= wasmTableMirror.length)
            wasmTableMirror.length = funcPtr + 1;
          wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
        }
        return func;
      };
      function updateTableMap(offset, count) {
        if (functionsInTableMap) {
          for (var i = offset;i < offset + count; i++) {
            var item = getWasmTableEntry(i);
            if (item) {
              functionsInTableMap.set(item, i);
            }
          }
        }
      }
      var functionsInTableMap = undefined;
      function getFunctionAddress(func) {
        if (!functionsInTableMap) {
          functionsInTableMap = new WeakMap;
          updateTableMap(0, wasmTable.length);
        }
        return functionsInTableMap.get(func) || 0;
      }
      var freeTableIndexes = [];
      function getEmptyTableSlot() {
        if (freeTableIndexes.length) {
          return freeTableIndexes.pop();
        }
        try {
          wasmTable.grow(1);
        } catch (err2) {
          if (!(err2 instanceof RangeError)) {
            throw err2;
          }
          throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
        }
        return wasmTable.length - 1;
      }
      var setWasmTableEntry = (idx, func) => {
        wasmTable.set(idx, func);
        wasmTableMirror[idx] = wasmTable.get(idx);
      };
      function addFunction(func, sig) {
        var rtn = getFunctionAddress(func);
        if (rtn) {
          return rtn;
        }
        var ret = getEmptyTableSlot();
        try {
          setWasmTableEntry(ret, func);
        } catch (err2) {
          if (!(err2 instanceof TypeError)) {
            throw err2;
          }
          var wrapped = convertJsFunctionToWasm(func, sig);
          setWasmTableEntry(ret, wrapped);
        }
        functionsInTableMap.set(func, ret);
        return ret;
      }
      var wasmImports = { b: ___cxa_throw, a: _abort, f: _emscripten_asm_const_double, d: _emscripten_date_now, e: _emscripten_memcpy_big, c: _emscripten_resize_heap };
      var asm = createWasm();
      var ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports["h"])();
      var _emscripten_bind_btCollisionShape_setLocalScaling_1 = Module["_emscripten_bind_btCollisionShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCollisionShape_setLocalScaling_1 = Module["_emscripten_bind_btCollisionShape_setLocalScaling_1"] = wasmExports["i"])(a0, a1);
      var _emscripten_bind_btCollisionShape_getLocalScaling_0 = Module["_emscripten_bind_btCollisionShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCollisionShape_getLocalScaling_0 = Module["_emscripten_bind_btCollisionShape_getLocalScaling_0"] = wasmExports["j"])(a0);
      var _emscripten_bind_btCollisionShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCollisionShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"] = wasmExports["k"])(a0, a1, a2);
      var _emscripten_bind_btCollisionShape_setMargin_1 = Module["_emscripten_bind_btCollisionShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCollisionShape_setMargin_1 = Module["_emscripten_bind_btCollisionShape_setMargin_1"] = wasmExports["l"])(a0, a1);
      var _emscripten_bind_btCollisionShape_getMargin_0 = Module["_emscripten_bind_btCollisionShape_getMargin_0"] = (a0) => (_emscripten_bind_btCollisionShape_getMargin_0 = Module["_emscripten_bind_btCollisionShape_getMargin_0"] = wasmExports["m"])(a0);
      var _emscripten_bind_btCollisionShape___destroy___0 = Module["_emscripten_bind_btCollisionShape___destroy___0"] = (a0) => (_emscripten_bind_btCollisionShape___destroy___0 = Module["_emscripten_bind_btCollisionShape___destroy___0"] = wasmExports["n"])(a0);
      var _emscripten_bind_btCollisionWorld_getDispatcher_0 = Module["_emscripten_bind_btCollisionWorld_getDispatcher_0"] = (a0) => (_emscripten_bind_btCollisionWorld_getDispatcher_0 = Module["_emscripten_bind_btCollisionWorld_getDispatcher_0"] = wasmExports["o"])(a0);
      var _emscripten_bind_btCollisionWorld_rayTest_3 = Module["_emscripten_bind_btCollisionWorld_rayTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btCollisionWorld_rayTest_3 = Module["_emscripten_bind_btCollisionWorld_rayTest_3"] = wasmExports["p"])(a0, a1, a2, a3);
      var _emscripten_bind_btCollisionWorld_getPairCache_0 = Module["_emscripten_bind_btCollisionWorld_getPairCache_0"] = (a0) => (_emscripten_bind_btCollisionWorld_getPairCache_0 = Module["_emscripten_bind_btCollisionWorld_getPairCache_0"] = wasmExports["q"])(a0);
      var _emscripten_bind_btCollisionWorld_getDispatchInfo_0 = Module["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"] = (a0) => (_emscripten_bind_btCollisionWorld_getDispatchInfo_0 = Module["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"] = wasmExports["r"])(a0);
      var _emscripten_bind_btCollisionWorld_addCollisionObject_1 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btCollisionWorld_addCollisionObject_1 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_1"] = wasmExports["s"])(a0, a1);
      var _emscripten_bind_btCollisionWorld_addCollisionObject_2 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_2"] = (a0, a1, a2) => (_emscripten_bind_btCollisionWorld_addCollisionObject_2 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_2"] = wasmExports["t"])(a0, a1, a2);
      var _emscripten_bind_btCollisionWorld_addCollisionObject_3 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btCollisionWorld_addCollisionObject_3 = Module["_emscripten_bind_btCollisionWorld_addCollisionObject_3"] = wasmExports["u"])(a0, a1, a2, a3);
      var _emscripten_bind_btCollisionWorld_removeCollisionObject_1 = Module["_emscripten_bind_btCollisionWorld_removeCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btCollisionWorld_removeCollisionObject_1 = Module["_emscripten_bind_btCollisionWorld_removeCollisionObject_1"] = wasmExports["v"])(a0, a1);
      var _emscripten_bind_btCollisionWorld_getBroadphase_0 = Module["_emscripten_bind_btCollisionWorld_getBroadphase_0"] = (a0) => (_emscripten_bind_btCollisionWorld_getBroadphase_0 = Module["_emscripten_bind_btCollisionWorld_getBroadphase_0"] = wasmExports["w"])(a0);
      var _emscripten_bind_btCollisionWorld_convexSweepTest_5 = Module["_emscripten_bind_btCollisionWorld_convexSweepTest_5"] = (a0, a1, a2, a3, a4, a5) => (_emscripten_bind_btCollisionWorld_convexSweepTest_5 = Module["_emscripten_bind_btCollisionWorld_convexSweepTest_5"] = wasmExports["x"])(a0, a1, a2, a3, a4, a5);
      var _emscripten_bind_btCollisionWorld_contactPairTest_3 = Module["_emscripten_bind_btCollisionWorld_contactPairTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btCollisionWorld_contactPairTest_3 = Module["_emscripten_bind_btCollisionWorld_contactPairTest_3"] = wasmExports["y"])(a0, a1, a2, a3);
      var _emscripten_bind_btCollisionWorld_contactTest_2 = Module["_emscripten_bind_btCollisionWorld_contactTest_2"] = (a0, a1, a2) => (_emscripten_bind_btCollisionWorld_contactTest_2 = Module["_emscripten_bind_btCollisionWorld_contactTest_2"] = wasmExports["z"])(a0, a1, a2);
      var _emscripten_bind_btCollisionWorld_updateSingleAabb_1 = Module["_emscripten_bind_btCollisionWorld_updateSingleAabb_1"] = (a0, a1) => (_emscripten_bind_btCollisionWorld_updateSingleAabb_1 = Module["_emscripten_bind_btCollisionWorld_updateSingleAabb_1"] = wasmExports["A"])(a0, a1);
      var _emscripten_bind_btCollisionWorld___destroy___0 = Module["_emscripten_bind_btCollisionWorld___destroy___0"] = (a0) => (_emscripten_bind_btCollisionWorld___destroy___0 = Module["_emscripten_bind_btCollisionWorld___destroy___0"] = wasmExports["B"])(a0);
      var _emscripten_bind_btCollisionObject_setAnisotropicFriction_2 = Module["_emscripten_bind_btCollisionObject_setAnisotropicFriction_2"] = (a0, a1, a2) => (_emscripten_bind_btCollisionObject_setAnisotropicFriction_2 = Module["_emscripten_bind_btCollisionObject_setAnisotropicFriction_2"] = wasmExports["C"])(a0, a1, a2);
      var _emscripten_bind_btCollisionObject_getCollisionShape_0 = Module["_emscripten_bind_btCollisionObject_getCollisionShape_0"] = (a0) => (_emscripten_bind_btCollisionObject_getCollisionShape_0 = Module["_emscripten_bind_btCollisionObject_getCollisionShape_0"] = wasmExports["D"])(a0);
      var _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"] = wasmExports["E"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setActivationState_1 = Module["_emscripten_bind_btCollisionObject_setActivationState_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setActivationState_1 = Module["_emscripten_bind_btCollisionObject_setActivationState_1"] = wasmExports["F"])(a0, a1);
      var _emscripten_bind_btCollisionObject_forceActivationState_1 = Module["_emscripten_bind_btCollisionObject_forceActivationState_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_forceActivationState_1 = Module["_emscripten_bind_btCollisionObject_forceActivationState_1"] = wasmExports["G"])(a0, a1);
      var _emscripten_bind_btCollisionObject_activate_0 = Module["_emscripten_bind_btCollisionObject_activate_0"] = (a0) => (_emscripten_bind_btCollisionObject_activate_0 = Module["_emscripten_bind_btCollisionObject_activate_0"] = wasmExports["H"])(a0);
      var _emscripten_bind_btCollisionObject_activate_1 = Module["_emscripten_bind_btCollisionObject_activate_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_activate_1 = Module["_emscripten_bind_btCollisionObject_activate_1"] = wasmExports["I"])(a0, a1);
      var _emscripten_bind_btCollisionObject_isActive_0 = Module["_emscripten_bind_btCollisionObject_isActive_0"] = (a0) => (_emscripten_bind_btCollisionObject_isActive_0 = Module["_emscripten_bind_btCollisionObject_isActive_0"] = wasmExports["J"])(a0);
      var _emscripten_bind_btCollisionObject_isKinematicObject_0 = Module["_emscripten_bind_btCollisionObject_isKinematicObject_0"] = (a0) => (_emscripten_bind_btCollisionObject_isKinematicObject_0 = Module["_emscripten_bind_btCollisionObject_isKinematicObject_0"] = wasmExports["K"])(a0);
      var _emscripten_bind_btCollisionObject_isStaticObject_0 = Module["_emscripten_bind_btCollisionObject_isStaticObject_0"] = (a0) => (_emscripten_bind_btCollisionObject_isStaticObject_0 = Module["_emscripten_bind_btCollisionObject_isStaticObject_0"] = wasmExports["L"])(a0);
      var _emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0"] = (a0) => (_emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0"] = wasmExports["M"])(a0);
      var _emscripten_bind_btCollisionObject_setRestitution_1 = Module["_emscripten_bind_btCollisionObject_setRestitution_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setRestitution_1 = Module["_emscripten_bind_btCollisionObject_setRestitution_1"] = wasmExports["N"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setFriction_1 = Module["_emscripten_bind_btCollisionObject_setFriction_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setFriction_1 = Module["_emscripten_bind_btCollisionObject_setFriction_1"] = wasmExports["O"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setRollingFriction_1 = Module["_emscripten_bind_btCollisionObject_setRollingFriction_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setRollingFriction_1 = Module["_emscripten_bind_btCollisionObject_setRollingFriction_1"] = wasmExports["P"])(a0, a1);
      var _emscripten_bind_btCollisionObject_getWorldTransform_0 = Module["_emscripten_bind_btCollisionObject_getWorldTransform_0"] = (a0) => (_emscripten_bind_btCollisionObject_getWorldTransform_0 = Module["_emscripten_bind_btCollisionObject_getWorldTransform_0"] = wasmExports["Q"])(a0);
      var _emscripten_bind_btCollisionObject_getCollisionFlags_0 = Module["_emscripten_bind_btCollisionObject_getCollisionFlags_0"] = (a0) => (_emscripten_bind_btCollisionObject_getCollisionFlags_0 = Module["_emscripten_bind_btCollisionObject_getCollisionFlags_0"] = wasmExports["R"])(a0);
      var _emscripten_bind_btCollisionObject_setCollisionFlags_1 = Module["_emscripten_bind_btCollisionObject_setCollisionFlags_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setCollisionFlags_1 = Module["_emscripten_bind_btCollisionObject_setCollisionFlags_1"] = wasmExports["S"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setWorldTransform_1 = Module["_emscripten_bind_btCollisionObject_setWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setWorldTransform_1 = Module["_emscripten_bind_btCollisionObject_setWorldTransform_1"] = wasmExports["T"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setCollisionShape_1 = Module["_emscripten_bind_btCollisionObject_setCollisionShape_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setCollisionShape_1 = Module["_emscripten_bind_btCollisionObject_setCollisionShape_1"] = wasmExports["U"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setCcdMotionThreshold_1 = Module["_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1 = Module["_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1"] = wasmExports["V"])(a0, a1);
      var _emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1"] = wasmExports["W"])(a0, a1);
      var _emscripten_bind_btCollisionObject_getUserIndex_0 = Module["_emscripten_bind_btCollisionObject_getUserIndex_0"] = (a0) => (_emscripten_bind_btCollisionObject_getUserIndex_0 = Module["_emscripten_bind_btCollisionObject_getUserIndex_0"] = wasmExports["X"])(a0);
      var _emscripten_bind_btCollisionObject_setUserIndex_1 = Module["_emscripten_bind_btCollisionObject_setUserIndex_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setUserIndex_1 = Module["_emscripten_bind_btCollisionObject_setUserIndex_1"] = wasmExports["Y"])(a0, a1);
      var _emscripten_bind_btCollisionObject_getUserPointer_0 = Module["_emscripten_bind_btCollisionObject_getUserPointer_0"] = (a0) => (_emscripten_bind_btCollisionObject_getUserPointer_0 = Module["_emscripten_bind_btCollisionObject_getUserPointer_0"] = wasmExports["Z"])(a0);
      var _emscripten_bind_btCollisionObject_setUserPointer_1 = Module["_emscripten_bind_btCollisionObject_setUserPointer_1"] = (a0, a1) => (_emscripten_bind_btCollisionObject_setUserPointer_1 = Module["_emscripten_bind_btCollisionObject_setUserPointer_1"] = wasmExports["_"])(a0, a1);
      var _emscripten_bind_btCollisionObject_getActivationState_0 = Module["_emscripten_bind_btCollisionObject_getActivationState_0"] = (a0) => (_emscripten_bind_btCollisionObject_getActivationState_0 = Module["_emscripten_bind_btCollisionObject_getActivationState_0"] = wasmExports["$"])(a0);
      var _emscripten_bind_btCollisionObject___destroy___0 = Module["_emscripten_bind_btCollisionObject___destroy___0"] = (a0) => (_emscripten_bind_btCollisionObject___destroy___0 = Module["_emscripten_bind_btCollisionObject___destroy___0"] = wasmExports["aa"])(a0);
      var _emscripten_bind_btConcaveShape_setLocalScaling_1 = Module["_emscripten_bind_btConcaveShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConcaveShape_setLocalScaling_1 = Module["_emscripten_bind_btConcaveShape_setLocalScaling_1"] = wasmExports["ba"])(a0, a1);
      var _emscripten_bind_btConcaveShape_getLocalScaling_0 = Module["_emscripten_bind_btConcaveShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConcaveShape_getLocalScaling_0 = Module["_emscripten_bind_btConcaveShape_getLocalScaling_0"] = wasmExports["ca"])(a0);
      var _emscripten_bind_btConcaveShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConcaveShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"] = wasmExports["da"])(a0, a1, a2);
      var _emscripten_bind_btConcaveShape___destroy___0 = Module["_emscripten_bind_btConcaveShape___destroy___0"] = (a0) => (_emscripten_bind_btConcaveShape___destroy___0 = Module["_emscripten_bind_btConcaveShape___destroy___0"] = wasmExports["ea"])(a0);
      var _emscripten_bind_btTypedConstraint_enableFeedback_1 = Module["_emscripten_bind_btTypedConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btTypedConstraint_enableFeedback_1 = Module["_emscripten_bind_btTypedConstraint_enableFeedback_1"] = wasmExports["fa"])(a0, a1);
      var _emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0"] = wasmExports["ga"])(a0);
      var _emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1"] = wasmExports["ha"])(a0, a1);
      var _emscripten_bind_btTypedConstraint_getParam_2 = Module["_emscripten_bind_btTypedConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btTypedConstraint_getParam_2 = Module["_emscripten_bind_btTypedConstraint_getParam_2"] = wasmExports["ia"])(a0, a1, a2);
      var _emscripten_bind_btTypedConstraint_setParam_3 = Module["_emscripten_bind_btTypedConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btTypedConstraint_setParam_3 = Module["_emscripten_bind_btTypedConstraint_setParam_3"] = wasmExports["ja"])(a0, a1, a2, a3);
      var _emscripten_bind_btTypedConstraint___destroy___0 = Module["_emscripten_bind_btTypedConstraint___destroy___0"] = (a0) => (_emscripten_bind_btTypedConstraint___destroy___0 = Module["_emscripten_bind_btTypedConstraint___destroy___0"] = wasmExports["ka"])(a0);
      var _emscripten_bind_btDynamicsWorld_addAction_1 = Module["_emscripten_bind_btDynamicsWorld_addAction_1"] = (a0, a1) => (_emscripten_bind_btDynamicsWorld_addAction_1 = Module["_emscripten_bind_btDynamicsWorld_addAction_1"] = wasmExports["la"])(a0, a1);
      var _emscripten_bind_btDynamicsWorld_removeAction_1 = Module["_emscripten_bind_btDynamicsWorld_removeAction_1"] = (a0, a1) => (_emscripten_bind_btDynamicsWorld_removeAction_1 = Module["_emscripten_bind_btDynamicsWorld_removeAction_1"] = wasmExports["ma"])(a0, a1);
      var _emscripten_bind_btDynamicsWorld_getSolverInfo_0 = Module["_emscripten_bind_btDynamicsWorld_getSolverInfo_0"] = (a0) => (_emscripten_bind_btDynamicsWorld_getSolverInfo_0 = Module["_emscripten_bind_btDynamicsWorld_getSolverInfo_0"] = wasmExports["na"])(a0);
      var _emscripten_bind_btDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btDynamicsWorld_getDispatcher_0"] = (a0) => (_emscripten_bind_btDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btDynamicsWorld_getDispatcher_0"] = wasmExports["oa"])(a0);
      var _emscripten_bind_btDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btDynamicsWorld_rayTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btDynamicsWorld_rayTest_3"] = wasmExports["pa"])(a0, a1, a2, a3);
      var _emscripten_bind_btDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btDynamicsWorld_getPairCache_0"] = (a0) => (_emscripten_bind_btDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btDynamicsWorld_getPairCache_0"] = wasmExports["qa"])(a0);
      var _emscripten_bind_btDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"] = (a0) => (_emscripten_bind_btDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"] = wasmExports["ra"])(a0);
      var _emscripten_bind_btDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"] = wasmExports["sa"])(a0, a1);
      var _emscripten_bind_btDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"] = (a0, a1, a2) => (_emscripten_bind_btDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"] = wasmExports["ta"])(a0, a1, a2);
      var _emscripten_bind_btDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"] = wasmExports["ua"])(a0, a1, a2, a3);
      var _emscripten_bind_btDynamicsWorld_removeCollisionObject_1 = Module["_emscripten_bind_btDynamicsWorld_removeCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btDynamicsWorld_removeCollisionObject_1 = Module["_emscripten_bind_btDynamicsWorld_removeCollisionObject_1"] = wasmExports["va"])(a0, a1);
      var _emscripten_bind_btDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btDynamicsWorld_getBroadphase_0"] = (a0) => (_emscripten_bind_btDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btDynamicsWorld_getBroadphase_0"] = wasmExports["wa"])(a0);
      var _emscripten_bind_btDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"] = (a0, a1, a2, a3, a4, a5) => (_emscripten_bind_btDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"] = wasmExports["xa"])(a0, a1, a2, a3, a4, a5);
      var _emscripten_bind_btDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btDynamicsWorld_contactPairTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btDynamicsWorld_contactPairTest_3"] = wasmExports["ya"])(a0, a1, a2, a3);
      var _emscripten_bind_btDynamicsWorld_contactTest_2 = Module["_emscripten_bind_btDynamicsWorld_contactTest_2"] = (a0, a1, a2) => (_emscripten_bind_btDynamicsWorld_contactTest_2 = Module["_emscripten_bind_btDynamicsWorld_contactTest_2"] = wasmExports["za"])(a0, a1, a2);
      var _emscripten_bind_btDynamicsWorld_updateSingleAabb_1 = Module["_emscripten_bind_btDynamicsWorld_updateSingleAabb_1"] = (a0, a1) => (_emscripten_bind_btDynamicsWorld_updateSingleAabb_1 = Module["_emscripten_bind_btDynamicsWorld_updateSingleAabb_1"] = wasmExports["Aa"])(a0, a1);
      var _emscripten_bind_btDynamicsWorld___destroy___0 = Module["_emscripten_bind_btDynamicsWorld___destroy___0"] = (a0) => (_emscripten_bind_btDynamicsWorld___destroy___0 = Module["_emscripten_bind_btDynamicsWorld___destroy___0"] = wasmExports["Ba"])(a0);
      var _emscripten_bind_btVector3_btVector3_0 = Module["_emscripten_bind_btVector3_btVector3_0"] = () => (_emscripten_bind_btVector3_btVector3_0 = Module["_emscripten_bind_btVector3_btVector3_0"] = wasmExports["Ca"])();
      var _emscripten_bind_btVector3_btVector3_3 = Module["_emscripten_bind_btVector3_btVector3_3"] = (a0, a1, a2) => (_emscripten_bind_btVector3_btVector3_3 = Module["_emscripten_bind_btVector3_btVector3_3"] = wasmExports["Da"])(a0, a1, a2);
      var _emscripten_bind_btVector3_length_0 = Module["_emscripten_bind_btVector3_length_0"] = (a0) => (_emscripten_bind_btVector3_length_0 = Module["_emscripten_bind_btVector3_length_0"] = wasmExports["Ea"])(a0);
      var _emscripten_bind_btVector3_x_0 = Module["_emscripten_bind_btVector3_x_0"] = (a0) => (_emscripten_bind_btVector3_x_0 = Module["_emscripten_bind_btVector3_x_0"] = wasmExports["Fa"])(a0);
      var _emscripten_bind_btVector3_y_0 = Module["_emscripten_bind_btVector3_y_0"] = (a0) => (_emscripten_bind_btVector3_y_0 = Module["_emscripten_bind_btVector3_y_0"] = wasmExports["Ga"])(a0);
      var _emscripten_bind_btVector3_z_0 = Module["_emscripten_bind_btVector3_z_0"] = (a0) => (_emscripten_bind_btVector3_z_0 = Module["_emscripten_bind_btVector3_z_0"] = wasmExports["Ha"])(a0);
      var _emscripten_bind_btVector3_setX_1 = Module["_emscripten_bind_btVector3_setX_1"] = (a0, a1) => (_emscripten_bind_btVector3_setX_1 = Module["_emscripten_bind_btVector3_setX_1"] = wasmExports["Ia"])(a0, a1);
      var _emscripten_bind_btVector3_setY_1 = Module["_emscripten_bind_btVector3_setY_1"] = (a0, a1) => (_emscripten_bind_btVector3_setY_1 = Module["_emscripten_bind_btVector3_setY_1"] = wasmExports["Ja"])(a0, a1);
      var _emscripten_bind_btVector3_setZ_1 = Module["_emscripten_bind_btVector3_setZ_1"] = (a0, a1) => (_emscripten_bind_btVector3_setZ_1 = Module["_emscripten_bind_btVector3_setZ_1"] = wasmExports["Ka"])(a0, a1);
      var _emscripten_bind_btVector3_setValue_3 = Module["_emscripten_bind_btVector3_setValue_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btVector3_setValue_3 = Module["_emscripten_bind_btVector3_setValue_3"] = wasmExports["La"])(a0, a1, a2, a3);
      var _emscripten_bind_btVector3_normalize_0 = Module["_emscripten_bind_btVector3_normalize_0"] = (a0) => (_emscripten_bind_btVector3_normalize_0 = Module["_emscripten_bind_btVector3_normalize_0"] = wasmExports["Ma"])(a0);
      var _emscripten_bind_btVector3_rotate_2 = Module["_emscripten_bind_btVector3_rotate_2"] = (a0, a1, a2) => (_emscripten_bind_btVector3_rotate_2 = Module["_emscripten_bind_btVector3_rotate_2"] = wasmExports["Na"])(a0, a1, a2);
      var _emscripten_bind_btVector3_dot_1 = Module["_emscripten_bind_btVector3_dot_1"] = (a0, a1) => (_emscripten_bind_btVector3_dot_1 = Module["_emscripten_bind_btVector3_dot_1"] = wasmExports["Oa"])(a0, a1);
      var _emscripten_bind_btVector3_op_mul_1 = Module["_emscripten_bind_btVector3_op_mul_1"] = (a0, a1) => (_emscripten_bind_btVector3_op_mul_1 = Module["_emscripten_bind_btVector3_op_mul_1"] = wasmExports["Pa"])(a0, a1);
      var _emscripten_bind_btVector3_op_add_1 = Module["_emscripten_bind_btVector3_op_add_1"] = (a0, a1) => (_emscripten_bind_btVector3_op_add_1 = Module["_emscripten_bind_btVector3_op_add_1"] = wasmExports["Qa"])(a0, a1);
      var _emscripten_bind_btVector3_op_sub_1 = Module["_emscripten_bind_btVector3_op_sub_1"] = (a0, a1) => (_emscripten_bind_btVector3_op_sub_1 = Module["_emscripten_bind_btVector3_op_sub_1"] = wasmExports["Ra"])(a0, a1);
      var _emscripten_bind_btVector3___destroy___0 = Module["_emscripten_bind_btVector3___destroy___0"] = (a0) => (_emscripten_bind_btVector3___destroy___0 = Module["_emscripten_bind_btVector3___destroy___0"] = wasmExports["Sa"])(a0);
      var _emscripten_bind_btQuadWord_x_0 = Module["_emscripten_bind_btQuadWord_x_0"] = (a0) => (_emscripten_bind_btQuadWord_x_0 = Module["_emscripten_bind_btQuadWord_x_0"] = wasmExports["Ta"])(a0);
      var _emscripten_bind_btQuadWord_y_0 = Module["_emscripten_bind_btQuadWord_y_0"] = (a0) => (_emscripten_bind_btQuadWord_y_0 = Module["_emscripten_bind_btQuadWord_y_0"] = wasmExports["Ua"])(a0);
      var _emscripten_bind_btQuadWord_z_0 = Module["_emscripten_bind_btQuadWord_z_0"] = (a0) => (_emscripten_bind_btQuadWord_z_0 = Module["_emscripten_bind_btQuadWord_z_0"] = wasmExports["Va"])(a0);
      var _emscripten_bind_btQuadWord_w_0 = Module["_emscripten_bind_btQuadWord_w_0"] = (a0) => (_emscripten_bind_btQuadWord_w_0 = Module["_emscripten_bind_btQuadWord_w_0"] = wasmExports["Wa"])(a0);
      var _emscripten_bind_btQuadWord_setX_1 = Module["_emscripten_bind_btQuadWord_setX_1"] = (a0, a1) => (_emscripten_bind_btQuadWord_setX_1 = Module["_emscripten_bind_btQuadWord_setX_1"] = wasmExports["Xa"])(a0, a1);
      var _emscripten_bind_btQuadWord_setY_1 = Module["_emscripten_bind_btQuadWord_setY_1"] = (a0, a1) => (_emscripten_bind_btQuadWord_setY_1 = Module["_emscripten_bind_btQuadWord_setY_1"] = wasmExports["Ya"])(a0, a1);
      var _emscripten_bind_btQuadWord_setZ_1 = Module["_emscripten_bind_btQuadWord_setZ_1"] = (a0, a1) => (_emscripten_bind_btQuadWord_setZ_1 = Module["_emscripten_bind_btQuadWord_setZ_1"] = wasmExports["Za"])(a0, a1);
      var _emscripten_bind_btQuadWord_setW_1 = Module["_emscripten_bind_btQuadWord_setW_1"] = (a0, a1) => (_emscripten_bind_btQuadWord_setW_1 = Module["_emscripten_bind_btQuadWord_setW_1"] = wasmExports["_a"])(a0, a1);
      var _emscripten_bind_btQuadWord___destroy___0 = Module["_emscripten_bind_btQuadWord___destroy___0"] = (a0) => (_emscripten_bind_btQuadWord___destroy___0 = Module["_emscripten_bind_btQuadWord___destroy___0"] = wasmExports["$a"])(a0);
      var _emscripten_bind_btMotionState_getWorldTransform_1 = Module["_emscripten_bind_btMotionState_getWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btMotionState_getWorldTransform_1 = Module["_emscripten_bind_btMotionState_getWorldTransform_1"] = wasmExports["ab"])(a0, a1);
      var _emscripten_bind_btMotionState_setWorldTransform_1 = Module["_emscripten_bind_btMotionState_setWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btMotionState_setWorldTransform_1 = Module["_emscripten_bind_btMotionState_setWorldTransform_1"] = wasmExports["bb"])(a0, a1);
      var _emscripten_bind_btMotionState___destroy___0 = Module["_emscripten_bind_btMotionState___destroy___0"] = (a0) => (_emscripten_bind_btMotionState___destroy___0 = Module["_emscripten_bind_btMotionState___destroy___0"] = wasmExports["cb"])(a0);
      var _emscripten_bind_RayResultCallback_hasHit_0 = Module["_emscripten_bind_RayResultCallback_hasHit_0"] = (a0) => (_emscripten_bind_RayResultCallback_hasHit_0 = Module["_emscripten_bind_RayResultCallback_hasHit_0"] = wasmExports["db"])(a0);
      var _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"] = (a0) => (_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"] = wasmExports["eb"])(a0);
      var _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"] = (a0, a1) => (_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"] = wasmExports["fb"])(a0, a1);
      var _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"] = (a0) => (_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"] = wasmExports["gb"])(a0);
      var _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"] = (a0, a1) => (_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"] = wasmExports["hb"])(a0, a1);
      var _emscripten_bind_RayResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_RayResultCallback_get_m_closestHitFraction_0"] = (a0) => (_emscripten_bind_RayResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_RayResultCallback_get_m_closestHitFraction_0"] = wasmExports["ib"])(a0);
      var _emscripten_bind_RayResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_RayResultCallback_set_m_closestHitFraction_1"] = (a0, a1) => (_emscripten_bind_RayResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_RayResultCallback_set_m_closestHitFraction_1"] = wasmExports["jb"])(a0, a1);
      var _emscripten_bind_RayResultCallback_get_m_collisionObject_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"] = (a0) => (_emscripten_bind_RayResultCallback_get_m_collisionObject_0 = Module["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"] = wasmExports["kb"])(a0);
      var _emscripten_bind_RayResultCallback_set_m_collisionObject_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"] = (a0, a1) => (_emscripten_bind_RayResultCallback_set_m_collisionObject_1 = Module["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"] = wasmExports["lb"])(a0, a1);
      var _emscripten_bind_RayResultCallback___destroy___0 = Module["_emscripten_bind_RayResultCallback___destroy___0"] = (a0) => (_emscripten_bind_RayResultCallback___destroy___0 = Module["_emscripten_bind_RayResultCallback___destroy___0"] = wasmExports["mb"])(a0);
      var _emscripten_bind_ContactResultCallback_addSingleResult_7 = Module["_emscripten_bind_ContactResultCallback_addSingleResult_7"] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_emscripten_bind_ContactResultCallback_addSingleResult_7 = Module["_emscripten_bind_ContactResultCallback_addSingleResult_7"] = wasmExports["nb"])(a0, a1, a2, a3, a4, a5, a6, a7);
      var _emscripten_bind_ContactResultCallback___destroy___0 = Module["_emscripten_bind_ContactResultCallback___destroy___0"] = (a0) => (_emscripten_bind_ContactResultCallback___destroy___0 = Module["_emscripten_bind_ContactResultCallback___destroy___0"] = wasmExports["ob"])(a0);
      var _emscripten_bind_ConvexResultCallback_hasHit_0 = Module["_emscripten_bind_ConvexResultCallback_hasHit_0"] = (a0) => (_emscripten_bind_ConvexResultCallback_hasHit_0 = Module["_emscripten_bind_ConvexResultCallback_hasHit_0"] = wasmExports["pb"])(a0);
      var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"] = (a0) => (_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"] = wasmExports["qb"])(a0);
      var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"] = (a0, a1) => (_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"] = wasmExports["rb"])(a0, a1);
      var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"] = (a0) => (_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"] = wasmExports["sb"])(a0);
      var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"] = (a0, a1) => (_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"] = wasmExports["tb"])(a0, a1);
      var _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"] = (a0) => (_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"] = wasmExports["ub"])(a0);
      var _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"] = (a0, a1) => (_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"] = wasmExports["vb"])(a0, a1);
      var _emscripten_bind_ConvexResultCallback___destroy___0 = Module["_emscripten_bind_ConvexResultCallback___destroy___0"] = (a0) => (_emscripten_bind_ConvexResultCallback___destroy___0 = Module["_emscripten_bind_ConvexResultCallback___destroy___0"] = wasmExports["wb"])(a0);
      var _emscripten_bind_btConvexShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConvexShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexShape_setLocalScaling_1"] = wasmExports["xb"])(a0, a1);
      var _emscripten_bind_btConvexShape_getLocalScaling_0 = Module["_emscripten_bind_btConvexShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConvexShape_getLocalScaling_0 = Module["_emscripten_bind_btConvexShape_getLocalScaling_0"] = wasmExports["yb"])(a0);
      var _emscripten_bind_btConvexShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConvexShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexShape_calculateLocalInertia_2"] = wasmExports["zb"])(a0, a1, a2);
      var _emscripten_bind_btConvexShape_setMargin_1 = Module["_emscripten_bind_btConvexShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btConvexShape_setMargin_1 = Module["_emscripten_bind_btConvexShape_setMargin_1"] = wasmExports["Ab"])(a0, a1);
      var _emscripten_bind_btConvexShape_getMargin_0 = Module["_emscripten_bind_btConvexShape_getMargin_0"] = (a0) => (_emscripten_bind_btConvexShape_getMargin_0 = Module["_emscripten_bind_btConvexShape_getMargin_0"] = wasmExports["Bb"])(a0);
      var _emscripten_bind_btConvexShape___destroy___0 = Module["_emscripten_bind_btConvexShape___destroy___0"] = (a0) => (_emscripten_bind_btConvexShape___destroy___0 = Module["_emscripten_bind_btConvexShape___destroy___0"] = wasmExports["Cb"])(a0);
      var _emscripten_bind_btCapsuleShape_btCapsuleShape_2 = Module["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"] = (a0, a1) => (_emscripten_bind_btCapsuleShape_btCapsuleShape_2 = Module["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"] = wasmExports["Db"])(a0, a1);
      var _emscripten_bind_btCapsuleShape_setMargin_1 = Module["_emscripten_bind_btCapsuleShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCapsuleShape_setMargin_1 = Module["_emscripten_bind_btCapsuleShape_setMargin_1"] = wasmExports["Eb"])(a0, a1);
      var _emscripten_bind_btCapsuleShape_getMargin_0 = Module["_emscripten_bind_btCapsuleShape_getMargin_0"] = (a0) => (_emscripten_bind_btCapsuleShape_getMargin_0 = Module["_emscripten_bind_btCapsuleShape_getMargin_0"] = wasmExports["Fb"])(a0);
      var _emscripten_bind_btCapsuleShape_getUpAxis_0 = Module["_emscripten_bind_btCapsuleShape_getUpAxis_0"] = (a0) => (_emscripten_bind_btCapsuleShape_getUpAxis_0 = Module["_emscripten_bind_btCapsuleShape_getUpAxis_0"] = wasmExports["Gb"])(a0);
      var _emscripten_bind_btCapsuleShape_getRadius_0 = Module["_emscripten_bind_btCapsuleShape_getRadius_0"] = (a0) => (_emscripten_bind_btCapsuleShape_getRadius_0 = Module["_emscripten_bind_btCapsuleShape_getRadius_0"] = wasmExports["Hb"])(a0);
      var _emscripten_bind_btCapsuleShape_getHalfHeight_0 = Module["_emscripten_bind_btCapsuleShape_getHalfHeight_0"] = (a0) => (_emscripten_bind_btCapsuleShape_getHalfHeight_0 = Module["_emscripten_bind_btCapsuleShape_getHalfHeight_0"] = wasmExports["Ib"])(a0);
      var _emscripten_bind_btCapsuleShape_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCapsuleShape_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShape_setLocalScaling_1"] = wasmExports["Jb"])(a0, a1);
      var _emscripten_bind_btCapsuleShape_getLocalScaling_0 = Module["_emscripten_bind_btCapsuleShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCapsuleShape_getLocalScaling_0 = Module["_emscripten_bind_btCapsuleShape_getLocalScaling_0"] = wasmExports["Kb"])(a0);
      var _emscripten_bind_btCapsuleShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCapsuleShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"] = wasmExports["Lb"])(a0, a1, a2);
      var _emscripten_bind_btCapsuleShape___destroy___0 = Module["_emscripten_bind_btCapsuleShape___destroy___0"] = (a0) => (_emscripten_bind_btCapsuleShape___destroy___0 = Module["_emscripten_bind_btCapsuleShape___destroy___0"] = wasmExports["Mb"])(a0);
      var _emscripten_bind_btCylinderShape_btCylinderShape_1 = Module["_emscripten_bind_btCylinderShape_btCylinderShape_1"] = (a0) => (_emscripten_bind_btCylinderShape_btCylinderShape_1 = Module["_emscripten_bind_btCylinderShape_btCylinderShape_1"] = wasmExports["Nb"])(a0);
      var _emscripten_bind_btCylinderShape_setMargin_1 = Module["_emscripten_bind_btCylinderShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCylinderShape_setMargin_1 = Module["_emscripten_bind_btCylinderShape_setMargin_1"] = wasmExports["Ob"])(a0, a1);
      var _emscripten_bind_btCylinderShape_getMargin_0 = Module["_emscripten_bind_btCylinderShape_getMargin_0"] = (a0) => (_emscripten_bind_btCylinderShape_getMargin_0 = Module["_emscripten_bind_btCylinderShape_getMargin_0"] = wasmExports["Pb"])(a0);
      var _emscripten_bind_btCylinderShape_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCylinderShape_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShape_setLocalScaling_1"] = wasmExports["Qb"])(a0, a1);
      var _emscripten_bind_btCylinderShape_getLocalScaling_0 = Module["_emscripten_bind_btCylinderShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCylinderShape_getLocalScaling_0 = Module["_emscripten_bind_btCylinderShape_getLocalScaling_0"] = wasmExports["Rb"])(a0);
      var _emscripten_bind_btCylinderShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCylinderShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"] = wasmExports["Sb"])(a0, a1, a2);
      var _emscripten_bind_btCylinderShape___destroy___0 = Module["_emscripten_bind_btCylinderShape___destroy___0"] = (a0) => (_emscripten_bind_btCylinderShape___destroy___0 = Module["_emscripten_bind_btCylinderShape___destroy___0"] = wasmExports["Tb"])(a0);
      var _emscripten_bind_btConeShape_btConeShape_2 = Module["_emscripten_bind_btConeShape_btConeShape_2"] = (a0, a1) => (_emscripten_bind_btConeShape_btConeShape_2 = Module["_emscripten_bind_btConeShape_btConeShape_2"] = wasmExports["Ub"])(a0, a1);
      var _emscripten_bind_btConeShape_setLocalScaling_1 = Module["_emscripten_bind_btConeShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConeShape_setLocalScaling_1 = Module["_emscripten_bind_btConeShape_setLocalScaling_1"] = wasmExports["Vb"])(a0, a1);
      var _emscripten_bind_btConeShape_getLocalScaling_0 = Module["_emscripten_bind_btConeShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConeShape_getLocalScaling_0 = Module["_emscripten_bind_btConeShape_getLocalScaling_0"] = wasmExports["Wb"])(a0);
      var _emscripten_bind_btConeShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConeShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShape_calculateLocalInertia_2"] = wasmExports["Xb"])(a0, a1, a2);
      var _emscripten_bind_btConeShape___destroy___0 = Module["_emscripten_bind_btConeShape___destroy___0"] = (a0) => (_emscripten_bind_btConeShape___destroy___0 = Module["_emscripten_bind_btConeShape___destroy___0"] = wasmExports["Yb"])(a0);
      var _emscripten_bind_btStridingMeshInterface___destroy___0 = Module["_emscripten_bind_btStridingMeshInterface___destroy___0"] = (a0) => (_emscripten_bind_btStridingMeshInterface___destroy___0 = Module["_emscripten_bind_btStridingMeshInterface___destroy___0"] = wasmExports["Zb"])(a0);
      var _emscripten_bind_btTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"] = wasmExports["_b"])(a0, a1);
      var _emscripten_bind_btTriangleMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btTriangleMeshShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btTriangleMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btTriangleMeshShape_getLocalScaling_0"] = wasmExports["$b"])(a0);
      var _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"] = wasmExports["ac"])(a0, a1, a2);
      var _emscripten_bind_btTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btTriangleMeshShape___destroy___0"] = (a0) => (_emscripten_bind_btTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btTriangleMeshShape___destroy___0"] = wasmExports["bc"])(a0);
      var _emscripten_bind_btDispatcher_getNumManifolds_0 = Module["_emscripten_bind_btDispatcher_getNumManifolds_0"] = (a0) => (_emscripten_bind_btDispatcher_getNumManifolds_0 = Module["_emscripten_bind_btDispatcher_getNumManifolds_0"] = wasmExports["cc"])(a0);
      var _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1 = Module["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"] = (a0, a1) => (_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1 = Module["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"] = wasmExports["dc"])(a0, a1);
      var _emscripten_bind_btDispatcher___destroy___0 = Module["_emscripten_bind_btDispatcher___destroy___0"] = (a0) => (_emscripten_bind_btDispatcher___destroy___0 = Module["_emscripten_bind_btDispatcher___destroy___0"] = wasmExports["ec"])(a0);
      var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3 = Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3 = Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"] = wasmExports["fc"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5 = Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5 = Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"] = wasmExports["gc"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1"] = wasmExports["hc"])(a0, a1);
      var _emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1"] = wasmExports["ic"])(a0, a1);
      var _emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1"] = wasmExports["jc"])(a0, a1);
      var _emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1"] = wasmExports["kc"])(a0, a1);
      var _emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0 = Module["_emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0"] = (a0) => (_emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0 = Module["_emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0"] = wasmExports["lc"])(a0);
      var _emscripten_bind_btGeneric6DofConstraint_enableFeedback_1 = Module["_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1 = Module["_emscripten_bind_btGeneric6DofConstraint_enableFeedback_1"] = wasmExports["mc"])(a0, a1);
      var _emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0"] = wasmExports["nc"])(a0);
      var _emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1"] = wasmExports["oc"])(a0, a1);
      var _emscripten_bind_btGeneric6DofConstraint_getParam_2 = Module["_emscripten_bind_btGeneric6DofConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofConstraint_getParam_2 = Module["_emscripten_bind_btGeneric6DofConstraint_getParam_2"] = wasmExports["pc"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofConstraint_setParam_3 = Module["_emscripten_bind_btGeneric6DofConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btGeneric6DofConstraint_setParam_3 = Module["_emscripten_bind_btGeneric6DofConstraint_setParam_3"] = wasmExports["qc"])(a0, a1, a2, a3);
      var _emscripten_bind_btGeneric6DofConstraint___destroy___0 = Module["_emscripten_bind_btGeneric6DofConstraint___destroy___0"] = (a0) => (_emscripten_bind_btGeneric6DofConstraint___destroy___0 = Module["_emscripten_bind_btGeneric6DofConstraint___destroy___0"] = wasmExports["rc"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4 = Module["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4 = Module["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"] = wasmExports["sc"])(a0, a1, a2, a3);
      var _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"] = wasmExports["tc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"] = wasmExports["uc"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"] = wasmExports["vc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"] = wasmExports["wc"])(a0, a1, a2, a3);
      var _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"] = wasmExports["xc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"] = wasmExports["yc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"] = (a0, a1, a2) => (_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"] = wasmExports["zc"])(a0, a1, a2);
      var _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"] = wasmExports["Ac"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"] = wasmExports["Bc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"] = (a0, a1, a2) => (_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"] = wasmExports["Cc"])(a0, a1, a2);
      var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"] = wasmExports["Dc"])(a0, a1, a2, a3);
      var _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"] = wasmExports["Ec"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"] = wasmExports["Fc"])(a0, a1, a2, a3);
      var _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"] = wasmExports["Gc"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"] = wasmExports["Hc"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"] = wasmExports["Ic"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"] = (a0, a1, a2) => (_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"] = wasmExports["Jc"])(a0, a1, a2);
      var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"] = wasmExports["Kc"])(a0, a1, a2, a3);
      var _emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1"] = wasmExports["Lc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"] = wasmExports["Mc"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"] = (a0, a1, a2, a3, a4, a5) => (_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"] = wasmExports["Nc"])(a0, a1, a2, a3, a4, a5);
      var _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"] = wasmExports["Oc"])(a0, a1, a2, a3);
      var _emscripten_bind_btDiscreteDynamicsWorld_contactTest_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2"] = (a0, a1, a2) => (_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2 = Module["_emscripten_bind_btDiscreteDynamicsWorld_contactTest_2"] = wasmExports["Pc"])(a0, a1, a2);
      var _emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1"] = wasmExports["Qc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_addAction_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_addAction_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"] = wasmExports["Rc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_removeAction_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1"] = (a0, a1) => (_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1 = Module["_emscripten_bind_btDiscreteDynamicsWorld_removeAction_1"] = wasmExports["Sc"])(a0, a1);
      var _emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0 = Module["_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0"] = wasmExports["Tc"])(a0);
      var _emscripten_bind_btDiscreteDynamicsWorld___destroy___0 = Module["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"] = (a0) => (_emscripten_bind_btDiscreteDynamicsWorld___destroy___0 = Module["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"] = wasmExports["Uc"])(a0);
      var _emscripten_bind_btVehicleRaycaster_castRay_3 = Module["_emscripten_bind_btVehicleRaycaster_castRay_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btVehicleRaycaster_castRay_3 = Module["_emscripten_bind_btVehicleRaycaster_castRay_3"] = wasmExports["Vc"])(a0, a1, a2, a3);
      var _emscripten_bind_btVehicleRaycaster___destroy___0 = Module["_emscripten_bind_btVehicleRaycaster___destroy___0"] = (a0) => (_emscripten_bind_btVehicleRaycaster___destroy___0 = Module["_emscripten_bind_btVehicleRaycaster___destroy___0"] = wasmExports["Wc"])(a0);
      var _emscripten_bind_btActionInterface_updateAction_2 = Module["_emscripten_bind_btActionInterface_updateAction_2"] = (a0, a1, a2) => (_emscripten_bind_btActionInterface_updateAction_2 = Module["_emscripten_bind_btActionInterface_updateAction_2"] = wasmExports["Xc"])(a0, a1, a2);
      var _emscripten_bind_btActionInterface___destroy___0 = Module["_emscripten_bind_btActionInterface___destroy___0"] = (a0) => (_emscripten_bind_btActionInterface___destroy___0 = Module["_emscripten_bind_btActionInterface___destroy___0"] = wasmExports["Yc"])(a0);
      var _emscripten_bind_btGhostObject_btGhostObject_0 = Module["_emscripten_bind_btGhostObject_btGhostObject_0"] = () => (_emscripten_bind_btGhostObject_btGhostObject_0 = Module["_emscripten_bind_btGhostObject_btGhostObject_0"] = wasmExports["Zc"])();
      var _emscripten_bind_btGhostObject_getNumOverlappingObjects_0 = Module["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"] = (a0) => (_emscripten_bind_btGhostObject_getNumOverlappingObjects_0 = Module["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"] = wasmExports["_c"])(a0);
      var _emscripten_bind_btGhostObject_getOverlappingObject_1 = Module["_emscripten_bind_btGhostObject_getOverlappingObject_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_getOverlappingObject_1 = Module["_emscripten_bind_btGhostObject_getOverlappingObject_1"] = wasmExports["$c"])(a0, a1);
      var _emscripten_bind_btGhostObject_setAnisotropicFriction_2 = Module["_emscripten_bind_btGhostObject_setAnisotropicFriction_2"] = (a0, a1, a2) => (_emscripten_bind_btGhostObject_setAnisotropicFriction_2 = Module["_emscripten_bind_btGhostObject_setAnisotropicFriction_2"] = wasmExports["ad"])(a0, a1, a2);
      var _emscripten_bind_btGhostObject_getCollisionShape_0 = Module["_emscripten_bind_btGhostObject_getCollisionShape_0"] = (a0) => (_emscripten_bind_btGhostObject_getCollisionShape_0 = Module["_emscripten_bind_btGhostObject_getCollisionShape_0"] = wasmExports["bd"])(a0);
      var _emscripten_bind_btGhostObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"] = wasmExports["cd"])(a0, a1);
      var _emscripten_bind_btGhostObject_setActivationState_1 = Module["_emscripten_bind_btGhostObject_setActivationState_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setActivationState_1 = Module["_emscripten_bind_btGhostObject_setActivationState_1"] = wasmExports["dd"])(a0, a1);
      var _emscripten_bind_btGhostObject_forceActivationState_1 = Module["_emscripten_bind_btGhostObject_forceActivationState_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_forceActivationState_1 = Module["_emscripten_bind_btGhostObject_forceActivationState_1"] = wasmExports["ed"])(a0, a1);
      var _emscripten_bind_btGhostObject_activate_0 = Module["_emscripten_bind_btGhostObject_activate_0"] = (a0) => (_emscripten_bind_btGhostObject_activate_0 = Module["_emscripten_bind_btGhostObject_activate_0"] = wasmExports["fd"])(a0);
      var _emscripten_bind_btGhostObject_activate_1 = Module["_emscripten_bind_btGhostObject_activate_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_activate_1 = Module["_emscripten_bind_btGhostObject_activate_1"] = wasmExports["gd"])(a0, a1);
      var _emscripten_bind_btGhostObject_isActive_0 = Module["_emscripten_bind_btGhostObject_isActive_0"] = (a0) => (_emscripten_bind_btGhostObject_isActive_0 = Module["_emscripten_bind_btGhostObject_isActive_0"] = wasmExports["hd"])(a0);
      var _emscripten_bind_btGhostObject_isKinematicObject_0 = Module["_emscripten_bind_btGhostObject_isKinematicObject_0"] = (a0) => (_emscripten_bind_btGhostObject_isKinematicObject_0 = Module["_emscripten_bind_btGhostObject_isKinematicObject_0"] = wasmExports["id"])(a0);
      var _emscripten_bind_btGhostObject_isStaticObject_0 = Module["_emscripten_bind_btGhostObject_isStaticObject_0"] = (a0) => (_emscripten_bind_btGhostObject_isStaticObject_0 = Module["_emscripten_bind_btGhostObject_isStaticObject_0"] = wasmExports["jd"])(a0);
      var _emscripten_bind_btGhostObject_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btGhostObject_isStaticOrKinematicObject_0"] = (a0) => (_emscripten_bind_btGhostObject_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btGhostObject_isStaticOrKinematicObject_0"] = wasmExports["kd"])(a0);
      var _emscripten_bind_btGhostObject_setRestitution_1 = Module["_emscripten_bind_btGhostObject_setRestitution_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setRestitution_1 = Module["_emscripten_bind_btGhostObject_setRestitution_1"] = wasmExports["ld"])(a0, a1);
      var _emscripten_bind_btGhostObject_setFriction_1 = Module["_emscripten_bind_btGhostObject_setFriction_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setFriction_1 = Module["_emscripten_bind_btGhostObject_setFriction_1"] = wasmExports["md"])(a0, a1);
      var _emscripten_bind_btGhostObject_setRollingFriction_1 = Module["_emscripten_bind_btGhostObject_setRollingFriction_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setRollingFriction_1 = Module["_emscripten_bind_btGhostObject_setRollingFriction_1"] = wasmExports["nd"])(a0, a1);
      var _emscripten_bind_btGhostObject_getWorldTransform_0 = Module["_emscripten_bind_btGhostObject_getWorldTransform_0"] = (a0) => (_emscripten_bind_btGhostObject_getWorldTransform_0 = Module["_emscripten_bind_btGhostObject_getWorldTransform_0"] = wasmExports["od"])(a0);
      var _emscripten_bind_btGhostObject_getCollisionFlags_0 = Module["_emscripten_bind_btGhostObject_getCollisionFlags_0"] = (a0) => (_emscripten_bind_btGhostObject_getCollisionFlags_0 = Module["_emscripten_bind_btGhostObject_getCollisionFlags_0"] = wasmExports["pd"])(a0);
      var _emscripten_bind_btGhostObject_setCollisionFlags_1 = Module["_emscripten_bind_btGhostObject_setCollisionFlags_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setCollisionFlags_1 = Module["_emscripten_bind_btGhostObject_setCollisionFlags_1"] = wasmExports["qd"])(a0, a1);
      var _emscripten_bind_btGhostObject_setWorldTransform_1 = Module["_emscripten_bind_btGhostObject_setWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setWorldTransform_1 = Module["_emscripten_bind_btGhostObject_setWorldTransform_1"] = wasmExports["rd"])(a0, a1);
      var _emscripten_bind_btGhostObject_setCollisionShape_1 = Module["_emscripten_bind_btGhostObject_setCollisionShape_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setCollisionShape_1 = Module["_emscripten_bind_btGhostObject_setCollisionShape_1"] = wasmExports["sd"])(a0, a1);
      var _emscripten_bind_btGhostObject_setCcdMotionThreshold_1 = Module["_emscripten_bind_btGhostObject_setCcdMotionThreshold_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setCcdMotionThreshold_1 = Module["_emscripten_bind_btGhostObject_setCcdMotionThreshold_1"] = wasmExports["td"])(a0, a1);
      var _emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1"] = wasmExports["ud"])(a0, a1);
      var _emscripten_bind_btGhostObject_getUserIndex_0 = Module["_emscripten_bind_btGhostObject_getUserIndex_0"] = (a0) => (_emscripten_bind_btGhostObject_getUserIndex_0 = Module["_emscripten_bind_btGhostObject_getUserIndex_0"] = wasmExports["vd"])(a0);
      var _emscripten_bind_btGhostObject_setUserIndex_1 = Module["_emscripten_bind_btGhostObject_setUserIndex_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setUserIndex_1 = Module["_emscripten_bind_btGhostObject_setUserIndex_1"] = wasmExports["wd"])(a0, a1);
      var _emscripten_bind_btGhostObject_getUserPointer_0 = Module["_emscripten_bind_btGhostObject_getUserPointer_0"] = (a0) => (_emscripten_bind_btGhostObject_getUserPointer_0 = Module["_emscripten_bind_btGhostObject_getUserPointer_0"] = wasmExports["xd"])(a0);
      var _emscripten_bind_btGhostObject_setUserPointer_1 = Module["_emscripten_bind_btGhostObject_setUserPointer_1"] = (a0, a1) => (_emscripten_bind_btGhostObject_setUserPointer_1 = Module["_emscripten_bind_btGhostObject_setUserPointer_1"] = wasmExports["yd"])(a0, a1);
      var _emscripten_bind_btGhostObject_getActivationState_0 = Module["_emscripten_bind_btGhostObject_getActivationState_0"] = (a0) => (_emscripten_bind_btGhostObject_getActivationState_0 = Module["_emscripten_bind_btGhostObject_getActivationState_0"] = wasmExports["zd"])(a0);
      var _emscripten_bind_btGhostObject___destroy___0 = Module["_emscripten_bind_btGhostObject___destroy___0"] = (a0) => (_emscripten_bind_btGhostObject___destroy___0 = Module["_emscripten_bind_btGhostObject___destroy___0"] = wasmExports["Ad"])(a0);
      var _emscripten_bind_btGImpactShapeInterface_setLocalScaling_1 = Module["_emscripten_bind_btGImpactShapeInterface_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btGImpactShapeInterface_setLocalScaling_1 = Module["_emscripten_bind_btGImpactShapeInterface_setLocalScaling_1"] = wasmExports["Bd"])(a0, a1);
      var _emscripten_bind_btGImpactShapeInterface_getLocalScaling_0 = Module["_emscripten_bind_btGImpactShapeInterface_getLocalScaling_0"] = (a0) => (_emscripten_bind_btGImpactShapeInterface_getLocalScaling_0 = Module["_emscripten_bind_btGImpactShapeInterface_getLocalScaling_0"] = wasmExports["Cd"])(a0);
      var _emscripten_bind_btGImpactShapeInterface_calculateLocalInertia_2 = Module["_emscripten_bind_btGImpactShapeInterface_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btGImpactShapeInterface_calculateLocalInertia_2 = Module["_emscripten_bind_btGImpactShapeInterface_calculateLocalInertia_2"] = wasmExports["Dd"])(a0, a1, a2);
      var _emscripten_bind_btGImpactShapeInterface___destroy___0 = Module["_emscripten_bind_btGImpactShapeInterface___destroy___0"] = (a0) => (_emscripten_bind_btGImpactShapeInterface___destroy___0 = Module["_emscripten_bind_btGImpactShapeInterface___destroy___0"] = wasmExports["Ed"])(a0);
      var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = (a0) => (_emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = wasmExports["Fd"])(a0);
      var _emscripten_bind_btVector4_btVector4_0 = Module["_emscripten_bind_btVector4_btVector4_0"] = () => (_emscripten_bind_btVector4_btVector4_0 = Module["_emscripten_bind_btVector4_btVector4_0"] = wasmExports["Gd"])();
      var _emscripten_bind_btVector4_btVector4_4 = Module["_emscripten_bind_btVector4_btVector4_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btVector4_btVector4_4 = Module["_emscripten_bind_btVector4_btVector4_4"] = wasmExports["Hd"])(a0, a1, a2, a3);
      var _emscripten_bind_btVector4_w_0 = Module["_emscripten_bind_btVector4_w_0"] = (a0) => (_emscripten_bind_btVector4_w_0 = Module["_emscripten_bind_btVector4_w_0"] = wasmExports["Id"])(a0);
      var _emscripten_bind_btVector4_setValue_4 = Module["_emscripten_bind_btVector4_setValue_4"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btVector4_setValue_4 = Module["_emscripten_bind_btVector4_setValue_4"] = wasmExports["Jd"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btVector4_length_0 = Module["_emscripten_bind_btVector4_length_0"] = (a0) => (_emscripten_bind_btVector4_length_0 = Module["_emscripten_bind_btVector4_length_0"] = wasmExports["Kd"])(a0);
      var _emscripten_bind_btVector4_x_0 = Module["_emscripten_bind_btVector4_x_0"] = (a0) => (_emscripten_bind_btVector4_x_0 = Module["_emscripten_bind_btVector4_x_0"] = wasmExports["Ld"])(a0);
      var _emscripten_bind_btVector4_y_0 = Module["_emscripten_bind_btVector4_y_0"] = (a0) => (_emscripten_bind_btVector4_y_0 = Module["_emscripten_bind_btVector4_y_0"] = wasmExports["Md"])(a0);
      var _emscripten_bind_btVector4_z_0 = Module["_emscripten_bind_btVector4_z_0"] = (a0) => (_emscripten_bind_btVector4_z_0 = Module["_emscripten_bind_btVector4_z_0"] = wasmExports["Nd"])(a0);
      var _emscripten_bind_btVector4_setX_1 = Module["_emscripten_bind_btVector4_setX_1"] = (a0, a1) => (_emscripten_bind_btVector4_setX_1 = Module["_emscripten_bind_btVector4_setX_1"] = wasmExports["Od"])(a0, a1);
      var _emscripten_bind_btVector4_setY_1 = Module["_emscripten_bind_btVector4_setY_1"] = (a0, a1) => (_emscripten_bind_btVector4_setY_1 = Module["_emscripten_bind_btVector4_setY_1"] = wasmExports["Pd"])(a0, a1);
      var _emscripten_bind_btVector4_setZ_1 = Module["_emscripten_bind_btVector4_setZ_1"] = (a0, a1) => (_emscripten_bind_btVector4_setZ_1 = Module["_emscripten_bind_btVector4_setZ_1"] = wasmExports["Qd"])(a0, a1);
      var _emscripten_bind_btVector4_normalize_0 = Module["_emscripten_bind_btVector4_normalize_0"] = (a0) => (_emscripten_bind_btVector4_normalize_0 = Module["_emscripten_bind_btVector4_normalize_0"] = wasmExports["Rd"])(a0);
      var _emscripten_bind_btVector4_rotate_2 = Module["_emscripten_bind_btVector4_rotate_2"] = (a0, a1, a2) => (_emscripten_bind_btVector4_rotate_2 = Module["_emscripten_bind_btVector4_rotate_2"] = wasmExports["Sd"])(a0, a1, a2);
      var _emscripten_bind_btVector4_dot_1 = Module["_emscripten_bind_btVector4_dot_1"] = (a0, a1) => (_emscripten_bind_btVector4_dot_1 = Module["_emscripten_bind_btVector4_dot_1"] = wasmExports["Td"])(a0, a1);
      var _emscripten_bind_btVector4_op_mul_1 = Module["_emscripten_bind_btVector4_op_mul_1"] = (a0, a1) => (_emscripten_bind_btVector4_op_mul_1 = Module["_emscripten_bind_btVector4_op_mul_1"] = wasmExports["Ud"])(a0, a1);
      var _emscripten_bind_btVector4_op_add_1 = Module["_emscripten_bind_btVector4_op_add_1"] = (a0, a1) => (_emscripten_bind_btVector4_op_add_1 = Module["_emscripten_bind_btVector4_op_add_1"] = wasmExports["Vd"])(a0, a1);
      var _emscripten_bind_btVector4_op_sub_1 = Module["_emscripten_bind_btVector4_op_sub_1"] = (a0, a1) => (_emscripten_bind_btVector4_op_sub_1 = Module["_emscripten_bind_btVector4_op_sub_1"] = wasmExports["Wd"])(a0, a1);
      var _emscripten_bind_btVector4___destroy___0 = Module["_emscripten_bind_btVector4___destroy___0"] = (a0) => (_emscripten_bind_btVector4___destroy___0 = Module["_emscripten_bind_btVector4___destroy___0"] = wasmExports["Xd"])(a0);
      var _emscripten_bind_btQuaternion_btQuaternion_4 = Module["_emscripten_bind_btQuaternion_btQuaternion_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btQuaternion_btQuaternion_4 = Module["_emscripten_bind_btQuaternion_btQuaternion_4"] = wasmExports["Yd"])(a0, a1, a2, a3);
      var _emscripten_bind_btQuaternion_setValue_4 = Module["_emscripten_bind_btQuaternion_setValue_4"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btQuaternion_setValue_4 = Module["_emscripten_bind_btQuaternion_setValue_4"] = wasmExports["Zd"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btQuaternion_setEulerZYX_3 = Module["_emscripten_bind_btQuaternion_setEulerZYX_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btQuaternion_setEulerZYX_3 = Module["_emscripten_bind_btQuaternion_setEulerZYX_3"] = wasmExports["_d"])(a0, a1, a2, a3);
      var _emscripten_bind_btQuaternion_setRotation_2 = Module["_emscripten_bind_btQuaternion_setRotation_2"] = (a0, a1, a2) => (_emscripten_bind_btQuaternion_setRotation_2 = Module["_emscripten_bind_btQuaternion_setRotation_2"] = wasmExports["$d"])(a0, a1, a2);
      var _emscripten_bind_btQuaternion_normalize_0 = Module["_emscripten_bind_btQuaternion_normalize_0"] = (a0) => (_emscripten_bind_btQuaternion_normalize_0 = Module["_emscripten_bind_btQuaternion_normalize_0"] = wasmExports["ae"])(a0);
      var _emscripten_bind_btQuaternion_length2_0 = Module["_emscripten_bind_btQuaternion_length2_0"] = (a0) => (_emscripten_bind_btQuaternion_length2_0 = Module["_emscripten_bind_btQuaternion_length2_0"] = wasmExports["be"])(a0);
      var _emscripten_bind_btQuaternion_length_0 = Module["_emscripten_bind_btQuaternion_length_0"] = (a0) => (_emscripten_bind_btQuaternion_length_0 = Module["_emscripten_bind_btQuaternion_length_0"] = wasmExports["ce"])(a0);
      var _emscripten_bind_btQuaternion_dot_1 = Module["_emscripten_bind_btQuaternion_dot_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_dot_1 = Module["_emscripten_bind_btQuaternion_dot_1"] = wasmExports["de"])(a0, a1);
      var _emscripten_bind_btQuaternion_normalized_0 = Module["_emscripten_bind_btQuaternion_normalized_0"] = (a0) => (_emscripten_bind_btQuaternion_normalized_0 = Module["_emscripten_bind_btQuaternion_normalized_0"] = wasmExports["ee"])(a0);
      var _emscripten_bind_btQuaternion_getAxis_0 = Module["_emscripten_bind_btQuaternion_getAxis_0"] = (a0) => (_emscripten_bind_btQuaternion_getAxis_0 = Module["_emscripten_bind_btQuaternion_getAxis_0"] = wasmExports["fe"])(a0);
      var _emscripten_bind_btQuaternion_inverse_0 = Module["_emscripten_bind_btQuaternion_inverse_0"] = (a0) => (_emscripten_bind_btQuaternion_inverse_0 = Module["_emscripten_bind_btQuaternion_inverse_0"] = wasmExports["ge"])(a0);
      var _emscripten_bind_btQuaternion_getAngle_0 = Module["_emscripten_bind_btQuaternion_getAngle_0"] = (a0) => (_emscripten_bind_btQuaternion_getAngle_0 = Module["_emscripten_bind_btQuaternion_getAngle_0"] = wasmExports["he"])(a0);
      var _emscripten_bind_btQuaternion_getAngleShortestPath_0 = Module["_emscripten_bind_btQuaternion_getAngleShortestPath_0"] = (a0) => (_emscripten_bind_btQuaternion_getAngleShortestPath_0 = Module["_emscripten_bind_btQuaternion_getAngleShortestPath_0"] = wasmExports["ie"])(a0);
      var _emscripten_bind_btQuaternion_angle_1 = Module["_emscripten_bind_btQuaternion_angle_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_angle_1 = Module["_emscripten_bind_btQuaternion_angle_1"] = wasmExports["je"])(a0, a1);
      var _emscripten_bind_btQuaternion_angleShortestPath_1 = Module["_emscripten_bind_btQuaternion_angleShortestPath_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_angleShortestPath_1 = Module["_emscripten_bind_btQuaternion_angleShortestPath_1"] = wasmExports["ke"])(a0, a1);
      var _emscripten_bind_btQuaternion_op_add_1 = Module["_emscripten_bind_btQuaternion_op_add_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_op_add_1 = Module["_emscripten_bind_btQuaternion_op_add_1"] = wasmExports["le"])(a0, a1);
      var _emscripten_bind_btQuaternion_op_sub_1 = Module["_emscripten_bind_btQuaternion_op_sub_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_op_sub_1 = Module["_emscripten_bind_btQuaternion_op_sub_1"] = wasmExports["me"])(a0, a1);
      var _emscripten_bind_btQuaternion_op_mul_1 = Module["_emscripten_bind_btQuaternion_op_mul_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_op_mul_1 = Module["_emscripten_bind_btQuaternion_op_mul_1"] = wasmExports["ne"])(a0, a1);
      var _emscripten_bind_btQuaternion_op_mulq_1 = Module["_emscripten_bind_btQuaternion_op_mulq_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_op_mulq_1 = Module["_emscripten_bind_btQuaternion_op_mulq_1"] = wasmExports["oe"])(a0, a1);
      var _emscripten_bind_btQuaternion_op_div_1 = Module["_emscripten_bind_btQuaternion_op_div_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_op_div_1 = Module["_emscripten_bind_btQuaternion_op_div_1"] = wasmExports["pe"])(a0, a1);
      var _emscripten_bind_btQuaternion_x_0 = Module["_emscripten_bind_btQuaternion_x_0"] = (a0) => (_emscripten_bind_btQuaternion_x_0 = Module["_emscripten_bind_btQuaternion_x_0"] = wasmExports["qe"])(a0);
      var _emscripten_bind_btQuaternion_y_0 = Module["_emscripten_bind_btQuaternion_y_0"] = (a0) => (_emscripten_bind_btQuaternion_y_0 = Module["_emscripten_bind_btQuaternion_y_0"] = wasmExports["re"])(a0);
      var _emscripten_bind_btQuaternion_z_0 = Module["_emscripten_bind_btQuaternion_z_0"] = (a0) => (_emscripten_bind_btQuaternion_z_0 = Module["_emscripten_bind_btQuaternion_z_0"] = wasmExports["se"])(a0);
      var _emscripten_bind_btQuaternion_w_0 = Module["_emscripten_bind_btQuaternion_w_0"] = (a0) => (_emscripten_bind_btQuaternion_w_0 = Module["_emscripten_bind_btQuaternion_w_0"] = wasmExports["te"])(a0);
      var _emscripten_bind_btQuaternion_setX_1 = Module["_emscripten_bind_btQuaternion_setX_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_setX_1 = Module["_emscripten_bind_btQuaternion_setX_1"] = wasmExports["ue"])(a0, a1);
      var _emscripten_bind_btQuaternion_setY_1 = Module["_emscripten_bind_btQuaternion_setY_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_setY_1 = Module["_emscripten_bind_btQuaternion_setY_1"] = wasmExports["ve"])(a0, a1);
      var _emscripten_bind_btQuaternion_setZ_1 = Module["_emscripten_bind_btQuaternion_setZ_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_setZ_1 = Module["_emscripten_bind_btQuaternion_setZ_1"] = wasmExports["we"])(a0, a1);
      var _emscripten_bind_btQuaternion_setW_1 = Module["_emscripten_bind_btQuaternion_setW_1"] = (a0, a1) => (_emscripten_bind_btQuaternion_setW_1 = Module["_emscripten_bind_btQuaternion_setW_1"] = wasmExports["xe"])(a0, a1);
      var _emscripten_bind_btQuaternion___destroy___0 = Module["_emscripten_bind_btQuaternion___destroy___0"] = (a0) => (_emscripten_bind_btQuaternion___destroy___0 = Module["_emscripten_bind_btQuaternion___destroy___0"] = wasmExports["ye"])(a0);
      var _emscripten_bind_btMatrix3x3_setEulerZYX_3 = Module["_emscripten_bind_btMatrix3x3_setEulerZYX_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btMatrix3x3_setEulerZYX_3 = Module["_emscripten_bind_btMatrix3x3_setEulerZYX_3"] = wasmExports["ze"])(a0, a1, a2, a3);
      var _emscripten_bind_btMatrix3x3_getRotation_1 = Module["_emscripten_bind_btMatrix3x3_getRotation_1"] = (a0, a1) => (_emscripten_bind_btMatrix3x3_getRotation_1 = Module["_emscripten_bind_btMatrix3x3_getRotation_1"] = wasmExports["Ae"])(a0, a1);
      var _emscripten_bind_btMatrix3x3_getRow_1 = Module["_emscripten_bind_btMatrix3x3_getRow_1"] = (a0, a1) => (_emscripten_bind_btMatrix3x3_getRow_1 = Module["_emscripten_bind_btMatrix3x3_getRow_1"] = wasmExports["Be"])(a0, a1);
      var _emscripten_bind_btMatrix3x3___destroy___0 = Module["_emscripten_bind_btMatrix3x3___destroy___0"] = (a0) => (_emscripten_bind_btMatrix3x3___destroy___0 = Module["_emscripten_bind_btMatrix3x3___destroy___0"] = wasmExports["Ce"])(a0);
      var _emscripten_bind_btTransform_btTransform_0 = Module["_emscripten_bind_btTransform_btTransform_0"] = () => (_emscripten_bind_btTransform_btTransform_0 = Module["_emscripten_bind_btTransform_btTransform_0"] = wasmExports["De"])();
      var _emscripten_bind_btTransform_btTransform_2 = Module["_emscripten_bind_btTransform_btTransform_2"] = (a0, a1) => (_emscripten_bind_btTransform_btTransform_2 = Module["_emscripten_bind_btTransform_btTransform_2"] = wasmExports["Ee"])(a0, a1);
      var _emscripten_bind_btTransform_setIdentity_0 = Module["_emscripten_bind_btTransform_setIdentity_0"] = (a0) => (_emscripten_bind_btTransform_setIdentity_0 = Module["_emscripten_bind_btTransform_setIdentity_0"] = wasmExports["Fe"])(a0);
      var _emscripten_bind_btTransform_setOrigin_1 = Module["_emscripten_bind_btTransform_setOrigin_1"] = (a0, a1) => (_emscripten_bind_btTransform_setOrigin_1 = Module["_emscripten_bind_btTransform_setOrigin_1"] = wasmExports["Ge"])(a0, a1);
      var _emscripten_bind_btTransform_setRotation_1 = Module["_emscripten_bind_btTransform_setRotation_1"] = (a0, a1) => (_emscripten_bind_btTransform_setRotation_1 = Module["_emscripten_bind_btTransform_setRotation_1"] = wasmExports["He"])(a0, a1);
      var _emscripten_bind_btTransform_getOrigin_0 = Module["_emscripten_bind_btTransform_getOrigin_0"] = (a0) => (_emscripten_bind_btTransform_getOrigin_0 = Module["_emscripten_bind_btTransform_getOrigin_0"] = wasmExports["Ie"])(a0);
      var _emscripten_bind_btTransform_getRotation_0 = Module["_emscripten_bind_btTransform_getRotation_0"] = (a0) => (_emscripten_bind_btTransform_getRotation_0 = Module["_emscripten_bind_btTransform_getRotation_0"] = wasmExports["Je"])(a0);
      var _emscripten_bind_btTransform_getBasis_0 = Module["_emscripten_bind_btTransform_getBasis_0"] = (a0) => (_emscripten_bind_btTransform_getBasis_0 = Module["_emscripten_bind_btTransform_getBasis_0"] = wasmExports["Ke"])(a0);
      var _emscripten_bind_btTransform_setFromOpenGLMatrix_1 = Module["_emscripten_bind_btTransform_setFromOpenGLMatrix_1"] = (a0, a1) => (_emscripten_bind_btTransform_setFromOpenGLMatrix_1 = Module["_emscripten_bind_btTransform_setFromOpenGLMatrix_1"] = wasmExports["Le"])(a0, a1);
      var _emscripten_bind_btTransform___destroy___0 = Module["_emscripten_bind_btTransform___destroy___0"] = (a0) => (_emscripten_bind_btTransform___destroy___0 = Module["_emscripten_bind_btTransform___destroy___0"] = wasmExports["Me"])(a0);
      var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"] = () => (_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"] = wasmExports["Ne"])();
      var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"] = (a0) => (_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"] = wasmExports["Oe"])(a0);
      var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"] = (a0, a1) => (_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2 = Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"] = wasmExports["Pe"])(a0, a1);
      var _emscripten_bind_btDefaultMotionState_getWorldTransform_1 = Module["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btDefaultMotionState_getWorldTransform_1 = Module["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"] = wasmExports["Qe"])(a0, a1);
      var _emscripten_bind_btDefaultMotionState_setWorldTransform_1 = Module["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btDefaultMotionState_setWorldTransform_1 = Module["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"] = wasmExports["Re"])(a0, a1);
      var _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0 = Module["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"] = (a0) => (_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0 = Module["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"] = wasmExports["Se"])(a0);
      var _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1 = Module["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"] = (a0, a1) => (_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1 = Module["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"] = wasmExports["Te"])(a0, a1);
      var _emscripten_bind_btDefaultMotionState___destroy___0 = Module["_emscripten_bind_btDefaultMotionState___destroy___0"] = (a0) => (_emscripten_bind_btDefaultMotionState___destroy___0 = Module["_emscripten_bind_btDefaultMotionState___destroy___0"] = wasmExports["Ue"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2 = Module["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2 = Module["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"] = wasmExports["Ve"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_hasHit_0 = Module["_emscripten_bind_ClosestRayResultCallback_hasHit_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_hasHit_0 = Module["_emscripten_bind_ClosestRayResultCallback_hasHit_0"] = wasmExports["We"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"] = wasmExports["Xe"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"] = wasmExports["Ye"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"] = wasmExports["Ze"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"] = wasmExports["_e"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"] = wasmExports["$e"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"] = wasmExports["af"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"] = wasmExports["bf"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"] = wasmExports["cf"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"] = wasmExports["df"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"] = wasmExports["ef"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"] = wasmExports["ff"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"] = wasmExports["gf"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0"] = wasmExports["hf"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1"] = wasmExports["jf"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0 = Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"] = wasmExports["kf"])(a0);
      var _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"] = (a0, a1) => (_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1 = Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"] = wasmExports["lf"])(a0, a1);
      var _emscripten_bind_ClosestRayResultCallback___destroy___0 = Module["_emscripten_bind_ClosestRayResultCallback___destroy___0"] = (a0) => (_emscripten_bind_ClosestRayResultCallback___destroy___0 = Module["_emscripten_bind_ClosestRayResultCallback___destroy___0"] = wasmExports["mf"])(a0);
      var _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0 = Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"] = (a0) => (_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0 = Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"] = wasmExports["nf"])(a0);
      var _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"] = (a0) => (_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"] = wasmExports["of"])(a0);
      var _emscripten_bind_btManifoldPoint_getAppliedImpulse_0 = Module["_emscripten_bind_btManifoldPoint_getAppliedImpulse_0"] = (a0) => (_emscripten_bind_btManifoldPoint_getAppliedImpulse_0 = Module["_emscripten_bind_btManifoldPoint_getAppliedImpulse_0"] = wasmExports["pf"])(a0);
      var _emscripten_bind_btManifoldPoint_getDistance_0 = Module["_emscripten_bind_btManifoldPoint_getDistance_0"] = (a0) => (_emscripten_bind_btManifoldPoint_getDistance_0 = Module["_emscripten_bind_btManifoldPoint_getDistance_0"] = wasmExports["qf"])(a0);
      var _emscripten_bind_btManifoldPoint_get_m_localPointA_0 = Module["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"] = (a0) => (_emscripten_bind_btManifoldPoint_get_m_localPointA_0 = Module["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"] = wasmExports["rf"])(a0);
      var _emscripten_bind_btManifoldPoint_set_m_localPointA_1 = Module["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"] = (a0, a1) => (_emscripten_bind_btManifoldPoint_set_m_localPointA_1 = Module["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"] = wasmExports["sf"])(a0, a1);
      var _emscripten_bind_btManifoldPoint_get_m_localPointB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"] = (a0) => (_emscripten_bind_btManifoldPoint_get_m_localPointB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"] = wasmExports["tf"])(a0);
      var _emscripten_bind_btManifoldPoint_set_m_localPointB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"] = (a0, a1) => (_emscripten_bind_btManifoldPoint_set_m_localPointB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"] = wasmExports["uf"])(a0, a1);
      var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"] = (a0) => (_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"] = wasmExports["vf"])(a0);
      var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"] = (a0, a1) => (_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"] = wasmExports["wf"])(a0, a1);
      var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0 = Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"] = (a0) => (_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0 = Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"] = wasmExports["xf"])(a0);
      var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1 = Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"] = (a0, a1) => (_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1 = Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"] = wasmExports["yf"])(a0, a1);
      var _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"] = (a0) => (_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0 = Module["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"] = wasmExports["zf"])(a0);
      var _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"] = (a0, a1) => (_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1 = Module["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"] = wasmExports["Af"])(a0, a1);
      var _emscripten_bind_btManifoldPoint___destroy___0 = Module["_emscripten_bind_btManifoldPoint___destroy___0"] = (a0) => (_emscripten_bind_btManifoldPoint___destroy___0 = Module["_emscripten_bind_btManifoldPoint___destroy___0"] = wasmExports["Bf"])(a0);
      var _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0 = Module["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"] = () => (_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0 = Module["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"] = wasmExports["Cf"])();
      var _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7 = Module["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7 = Module["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"] = wasmExports["Df"])(a0, a1, a2, a3, a4, a5, a6, a7);
      var _emscripten_bind_ConcreteContactResultCallback___destroy___0 = Module["_emscripten_bind_ConcreteContactResultCallback___destroy___0"] = (a0) => (_emscripten_bind_ConcreteContactResultCallback___destroy___0 = Module["_emscripten_bind_ConcreteContactResultCallback___destroy___0"] = wasmExports["Ef"])(a0);
      var _emscripten_bind_LocalShapeInfo_get_m_shapePart_0 = Module["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"] = (a0) => (_emscripten_bind_LocalShapeInfo_get_m_shapePart_0 = Module["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"] = wasmExports["Ff"])(a0);
      var _emscripten_bind_LocalShapeInfo_set_m_shapePart_1 = Module["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"] = (a0, a1) => (_emscripten_bind_LocalShapeInfo_set_m_shapePart_1 = Module["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"] = wasmExports["Gf"])(a0, a1);
      var _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0 = Module["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"] = (a0) => (_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0 = Module["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"] = wasmExports["Hf"])(a0);
      var _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1 = Module["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"] = (a0, a1) => (_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1 = Module["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"] = wasmExports["If"])(a0, a1);
      var _emscripten_bind_LocalShapeInfo___destroy___0 = Module["_emscripten_bind_LocalShapeInfo___destroy___0"] = (a0) => (_emscripten_bind_LocalShapeInfo___destroy___0 = Module["_emscripten_bind_LocalShapeInfo___destroy___0"] = wasmExports["Jf"])(a0);
      var _emscripten_bind_LocalConvexResult_LocalConvexResult_5 = Module["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_LocalConvexResult_LocalConvexResult_5 = Module["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"] = wasmExports["Kf"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"] = (a0) => (_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"] = wasmExports["Lf"])(a0);
      var _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"] = (a0, a1) => (_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"] = wasmExports["Mf"])(a0, a1);
      var _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0 = Module["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"] = (a0) => (_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0 = Module["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"] = wasmExports["Nf"])(a0);
      var _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1 = Module["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"] = (a0, a1) => (_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1 = Module["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"] = wasmExports["Of"])(a0, a1);
      var _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"] = (a0) => (_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"] = wasmExports["Pf"])(a0);
      var _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"] = (a0, a1) => (_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"] = wasmExports["Qf"])(a0, a1);
      var _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"] = (a0) => (_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"] = wasmExports["Rf"])(a0);
      var _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"] = (a0, a1) => (_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"] = wasmExports["Sf"])(a0, a1);
      var _emscripten_bind_LocalConvexResult_get_m_hitFraction_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"] = (a0) => (_emscripten_bind_LocalConvexResult_get_m_hitFraction_0 = Module["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"] = wasmExports["Tf"])(a0);
      var _emscripten_bind_LocalConvexResult_set_m_hitFraction_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"] = (a0, a1) => (_emscripten_bind_LocalConvexResult_set_m_hitFraction_1 = Module["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"] = wasmExports["Uf"])(a0, a1);
      var _emscripten_bind_LocalConvexResult___destroy___0 = Module["_emscripten_bind_LocalConvexResult___destroy___0"] = (a0) => (_emscripten_bind_LocalConvexResult___destroy___0 = Module["_emscripten_bind_LocalConvexResult___destroy___0"] = wasmExports["Vf"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2 = Module["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2 = Module["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"] = wasmExports["Wf"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_hasHit_0 = Module["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_hasHit_0 = Module["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"] = wasmExports["Xf"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"] = wasmExports["Yf"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"] = wasmExports["Zf"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"] = wasmExports["_f"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"] = wasmExports["$f"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"] = wasmExports["ag"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"] = wasmExports["bg"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"] = wasmExports["cg"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"] = wasmExports["dg"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"] = wasmExports["eg"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"] = wasmExports["fg"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"] = wasmExports["gg"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"] = wasmExports["hg"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0 = Module["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"] = wasmExports["ig"])(a0);
      var _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"] = (a0, a1) => (_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1 = Module["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"] = wasmExports["jg"])(a0, a1);
      var _emscripten_bind_ClosestConvexResultCallback___destroy___0 = Module["_emscripten_bind_ClosestConvexResultCallback___destroy___0"] = (a0) => (_emscripten_bind_ClosestConvexResultCallback___destroy___0 = Module["_emscripten_bind_ClosestConvexResultCallback___destroy___0"] = wasmExports["kg"])(a0);
      var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"] = (a0) => (_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"] = wasmExports["lg"])(a0);
      var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2 = Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"] = (a0, a1) => (_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2 = Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"] = wasmExports["mg"])(a0, a1);
      var _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"] = wasmExports["ng"])(a0, a1);
      var _emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0"] = wasmExports["og"])(a0);
      var _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"] = wasmExports["pg"])(a0, a1, a2);
      var _emscripten_bind_btConvexTriangleMeshShape_setMargin_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btConvexTriangleMeshShape_setMargin_1 = Module["_emscripten_bind_btConvexTriangleMeshShape_setMargin_1"] = wasmExports["qg"])(a0, a1);
      var _emscripten_bind_btConvexTriangleMeshShape_getMargin_0 = Module["_emscripten_bind_btConvexTriangleMeshShape_getMargin_0"] = (a0) => (_emscripten_bind_btConvexTriangleMeshShape_getMargin_0 = Module["_emscripten_bind_btConvexTriangleMeshShape_getMargin_0"] = wasmExports["rg"])(a0);
      var _emscripten_bind_btConvexTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"] = (a0) => (_emscripten_bind_btConvexTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"] = wasmExports["sg"])(a0);
      var _emscripten_bind_btBoxShape_btBoxShape_1 = Module["_emscripten_bind_btBoxShape_btBoxShape_1"] = (a0) => (_emscripten_bind_btBoxShape_btBoxShape_1 = Module["_emscripten_bind_btBoxShape_btBoxShape_1"] = wasmExports["tg"])(a0);
      var _emscripten_bind_btBoxShape_setMargin_1 = Module["_emscripten_bind_btBoxShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btBoxShape_setMargin_1 = Module["_emscripten_bind_btBoxShape_setMargin_1"] = wasmExports["ug"])(a0, a1);
      var _emscripten_bind_btBoxShape_getMargin_0 = Module["_emscripten_bind_btBoxShape_getMargin_0"] = (a0) => (_emscripten_bind_btBoxShape_getMargin_0 = Module["_emscripten_bind_btBoxShape_getMargin_0"] = wasmExports["vg"])(a0);
      var _emscripten_bind_btBoxShape_setLocalScaling_1 = Module["_emscripten_bind_btBoxShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btBoxShape_setLocalScaling_1 = Module["_emscripten_bind_btBoxShape_setLocalScaling_1"] = wasmExports["wg"])(a0, a1);
      var _emscripten_bind_btBoxShape_getLocalScaling_0 = Module["_emscripten_bind_btBoxShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btBoxShape_getLocalScaling_0 = Module["_emscripten_bind_btBoxShape_getLocalScaling_0"] = wasmExports["xg"])(a0);
      var _emscripten_bind_btBoxShape_calculateLocalInertia_2 = Module["_emscripten_bind_btBoxShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btBoxShape_calculateLocalInertia_2 = Module["_emscripten_bind_btBoxShape_calculateLocalInertia_2"] = wasmExports["yg"])(a0, a1, a2);
      var _emscripten_bind_btBoxShape___destroy___0 = Module["_emscripten_bind_btBoxShape___destroy___0"] = (a0) => (_emscripten_bind_btBoxShape___destroy___0 = Module["_emscripten_bind_btBoxShape___destroy___0"] = wasmExports["zg"])(a0);
      var _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2 = Module["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"] = (a0, a1) => (_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2 = Module["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"] = wasmExports["Ag"])(a0, a1);
      var _emscripten_bind_btCapsuleShapeX_setMargin_1 = Module["_emscripten_bind_btCapsuleShapeX_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCapsuleShapeX_setMargin_1 = Module["_emscripten_bind_btCapsuleShapeX_setMargin_1"] = wasmExports["Bg"])(a0, a1);
      var _emscripten_bind_btCapsuleShapeX_getMargin_0 = Module["_emscripten_bind_btCapsuleShapeX_getMargin_0"] = (a0) => (_emscripten_bind_btCapsuleShapeX_getMargin_0 = Module["_emscripten_bind_btCapsuleShapeX_getMargin_0"] = wasmExports["Cg"])(a0);
      var _emscripten_bind_btCapsuleShapeX_getUpAxis_0 = Module["_emscripten_bind_btCapsuleShapeX_getUpAxis_0"] = (a0) => (_emscripten_bind_btCapsuleShapeX_getUpAxis_0 = Module["_emscripten_bind_btCapsuleShapeX_getUpAxis_0"] = wasmExports["Dg"])(a0);
      var _emscripten_bind_btCapsuleShapeX_getRadius_0 = Module["_emscripten_bind_btCapsuleShapeX_getRadius_0"] = (a0) => (_emscripten_bind_btCapsuleShapeX_getRadius_0 = Module["_emscripten_bind_btCapsuleShapeX_getRadius_0"] = wasmExports["Eg"])(a0);
      var _emscripten_bind_btCapsuleShapeX_getHalfHeight_0 = Module["_emscripten_bind_btCapsuleShapeX_getHalfHeight_0"] = (a0) => (_emscripten_bind_btCapsuleShapeX_getHalfHeight_0 = Module["_emscripten_bind_btCapsuleShapeX_getHalfHeight_0"] = wasmExports["Fg"])(a0);
      var _emscripten_bind_btCapsuleShapeX_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCapsuleShapeX_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"] = wasmExports["Gg"])(a0, a1);
      var _emscripten_bind_btCapsuleShapeX_getLocalScaling_0 = Module["_emscripten_bind_btCapsuleShapeX_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCapsuleShapeX_getLocalScaling_0 = Module["_emscripten_bind_btCapsuleShapeX_getLocalScaling_0"] = wasmExports["Hg"])(a0);
      var _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"] = wasmExports["Ig"])(a0, a1, a2);
      var _emscripten_bind_btCapsuleShapeX___destroy___0 = Module["_emscripten_bind_btCapsuleShapeX___destroy___0"] = (a0) => (_emscripten_bind_btCapsuleShapeX___destroy___0 = Module["_emscripten_bind_btCapsuleShapeX___destroy___0"] = wasmExports["Jg"])(a0);
      var _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2 = Module["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"] = (a0, a1) => (_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2 = Module["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"] = wasmExports["Kg"])(a0, a1);
      var _emscripten_bind_btCapsuleShapeZ_setMargin_1 = Module["_emscripten_bind_btCapsuleShapeZ_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCapsuleShapeZ_setMargin_1 = Module["_emscripten_bind_btCapsuleShapeZ_setMargin_1"] = wasmExports["Lg"])(a0, a1);
      var _emscripten_bind_btCapsuleShapeZ_getMargin_0 = Module["_emscripten_bind_btCapsuleShapeZ_getMargin_0"] = (a0) => (_emscripten_bind_btCapsuleShapeZ_getMargin_0 = Module["_emscripten_bind_btCapsuleShapeZ_getMargin_0"] = wasmExports["Mg"])(a0);
      var _emscripten_bind_btCapsuleShapeZ_getUpAxis_0 = Module["_emscripten_bind_btCapsuleShapeZ_getUpAxis_0"] = (a0) => (_emscripten_bind_btCapsuleShapeZ_getUpAxis_0 = Module["_emscripten_bind_btCapsuleShapeZ_getUpAxis_0"] = wasmExports["Ng"])(a0);
      var _emscripten_bind_btCapsuleShapeZ_getRadius_0 = Module["_emscripten_bind_btCapsuleShapeZ_getRadius_0"] = (a0) => (_emscripten_bind_btCapsuleShapeZ_getRadius_0 = Module["_emscripten_bind_btCapsuleShapeZ_getRadius_0"] = wasmExports["Og"])(a0);
      var _emscripten_bind_btCapsuleShapeZ_getHalfHeight_0 = Module["_emscripten_bind_btCapsuleShapeZ_getHalfHeight_0"] = (a0) => (_emscripten_bind_btCapsuleShapeZ_getHalfHeight_0 = Module["_emscripten_bind_btCapsuleShapeZ_getHalfHeight_0"] = wasmExports["Pg"])(a0);
      var _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"] = wasmExports["Qg"])(a0, a1);
      var _emscripten_bind_btCapsuleShapeZ_getLocalScaling_0 = Module["_emscripten_bind_btCapsuleShapeZ_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCapsuleShapeZ_getLocalScaling_0 = Module["_emscripten_bind_btCapsuleShapeZ_getLocalScaling_0"] = wasmExports["Rg"])(a0);
      var _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"] = wasmExports["Sg"])(a0, a1, a2);
      var _emscripten_bind_btCapsuleShapeZ___destroy___0 = Module["_emscripten_bind_btCapsuleShapeZ___destroy___0"] = (a0) => (_emscripten_bind_btCapsuleShapeZ___destroy___0 = Module["_emscripten_bind_btCapsuleShapeZ___destroy___0"] = wasmExports["Tg"])(a0);
      var _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1 = Module["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"] = (a0) => (_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1 = Module["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"] = wasmExports["Ug"])(a0);
      var _emscripten_bind_btCylinderShapeX_setMargin_1 = Module["_emscripten_bind_btCylinderShapeX_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCylinderShapeX_setMargin_1 = Module["_emscripten_bind_btCylinderShapeX_setMargin_1"] = wasmExports["Vg"])(a0, a1);
      var _emscripten_bind_btCylinderShapeX_getMargin_0 = Module["_emscripten_bind_btCylinderShapeX_getMargin_0"] = (a0) => (_emscripten_bind_btCylinderShapeX_getMargin_0 = Module["_emscripten_bind_btCylinderShapeX_getMargin_0"] = wasmExports["Wg"])(a0);
      var _emscripten_bind_btCylinderShapeX_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCylinderShapeX_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"] = wasmExports["Xg"])(a0, a1);
      var _emscripten_bind_btCylinderShapeX_getLocalScaling_0 = Module["_emscripten_bind_btCylinderShapeX_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCylinderShapeX_getLocalScaling_0 = Module["_emscripten_bind_btCylinderShapeX_getLocalScaling_0"] = wasmExports["Yg"])(a0);
      var _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"] = wasmExports["Zg"])(a0, a1, a2);
      var _emscripten_bind_btCylinderShapeX___destroy___0 = Module["_emscripten_bind_btCylinderShapeX___destroy___0"] = (a0) => (_emscripten_bind_btCylinderShapeX___destroy___0 = Module["_emscripten_bind_btCylinderShapeX___destroy___0"] = wasmExports["_g"])(a0);
      var _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1 = Module["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"] = (a0) => (_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1 = Module["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"] = wasmExports["$g"])(a0);
      var _emscripten_bind_btCylinderShapeZ_setMargin_1 = Module["_emscripten_bind_btCylinderShapeZ_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCylinderShapeZ_setMargin_1 = Module["_emscripten_bind_btCylinderShapeZ_setMargin_1"] = wasmExports["ah"])(a0, a1);
      var _emscripten_bind_btCylinderShapeZ_getMargin_0 = Module["_emscripten_bind_btCylinderShapeZ_getMargin_0"] = (a0) => (_emscripten_bind_btCylinderShapeZ_getMargin_0 = Module["_emscripten_bind_btCylinderShapeZ_getMargin_0"] = wasmExports["bh"])(a0);
      var _emscripten_bind_btCylinderShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCylinderShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"] = wasmExports["ch"])(a0, a1);
      var _emscripten_bind_btCylinderShapeZ_getLocalScaling_0 = Module["_emscripten_bind_btCylinderShapeZ_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCylinderShapeZ_getLocalScaling_0 = Module["_emscripten_bind_btCylinderShapeZ_getLocalScaling_0"] = wasmExports["dh"])(a0);
      var _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"] = wasmExports["eh"])(a0, a1, a2);
      var _emscripten_bind_btCylinderShapeZ___destroy___0 = Module["_emscripten_bind_btCylinderShapeZ___destroy___0"] = (a0) => (_emscripten_bind_btCylinderShapeZ___destroy___0 = Module["_emscripten_bind_btCylinderShapeZ___destroy___0"] = wasmExports["fh"])(a0);
      var _emscripten_bind_btSphereShape_btSphereShape_1 = Module["_emscripten_bind_btSphereShape_btSphereShape_1"] = (a0) => (_emscripten_bind_btSphereShape_btSphereShape_1 = Module["_emscripten_bind_btSphereShape_btSphereShape_1"] = wasmExports["gh"])(a0);
      var _emscripten_bind_btSphereShape_setMargin_1 = Module["_emscripten_bind_btSphereShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btSphereShape_setMargin_1 = Module["_emscripten_bind_btSphereShape_setMargin_1"] = wasmExports["hh"])(a0, a1);
      var _emscripten_bind_btSphereShape_getMargin_0 = Module["_emscripten_bind_btSphereShape_getMargin_0"] = (a0) => (_emscripten_bind_btSphereShape_getMargin_0 = Module["_emscripten_bind_btSphereShape_getMargin_0"] = wasmExports["ih"])(a0);
      var _emscripten_bind_btSphereShape_setLocalScaling_1 = Module["_emscripten_bind_btSphereShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btSphereShape_setLocalScaling_1 = Module["_emscripten_bind_btSphereShape_setLocalScaling_1"] = wasmExports["jh"])(a0, a1);
      var _emscripten_bind_btSphereShape_getLocalScaling_0 = Module["_emscripten_bind_btSphereShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btSphereShape_getLocalScaling_0 = Module["_emscripten_bind_btSphereShape_getLocalScaling_0"] = wasmExports["kh"])(a0);
      var _emscripten_bind_btSphereShape_calculateLocalInertia_2 = Module["_emscripten_bind_btSphereShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btSphereShape_calculateLocalInertia_2 = Module["_emscripten_bind_btSphereShape_calculateLocalInertia_2"] = wasmExports["lh"])(a0, a1, a2);
      var _emscripten_bind_btSphereShape___destroy___0 = Module["_emscripten_bind_btSphereShape___destroy___0"] = (a0) => (_emscripten_bind_btSphereShape___destroy___0 = Module["_emscripten_bind_btSphereShape___destroy___0"] = wasmExports["mh"])(a0);
      var _emscripten_bind_btConvexHullShape_btConvexHullShape_0 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"] = () => (_emscripten_bind_btConvexHullShape_btConvexHullShape_0 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"] = wasmExports["nh"])();
      var _emscripten_bind_btConvexHullShape_btConvexHullShape_1 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_1"] = (a0) => (_emscripten_bind_btConvexHullShape_btConvexHullShape_1 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_1"] = wasmExports["oh"])(a0);
      var _emscripten_bind_btConvexHullShape_btConvexHullShape_2 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_2"] = (a0, a1) => (_emscripten_bind_btConvexHullShape_btConvexHullShape_2 = Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_2"] = wasmExports["ph"])(a0, a1);
      var _emscripten_bind_btConvexHullShape_addPoint_1 = Module["_emscripten_bind_btConvexHullShape_addPoint_1"] = (a0, a1) => (_emscripten_bind_btConvexHullShape_addPoint_1 = Module["_emscripten_bind_btConvexHullShape_addPoint_1"] = wasmExports["qh"])(a0, a1);
      var _emscripten_bind_btConvexHullShape_addPoint_2 = Module["_emscripten_bind_btConvexHullShape_addPoint_2"] = (a0, a1, a2) => (_emscripten_bind_btConvexHullShape_addPoint_2 = Module["_emscripten_bind_btConvexHullShape_addPoint_2"] = wasmExports["rh"])(a0, a1, a2);
      var _emscripten_bind_btConvexHullShape_setMargin_1 = Module["_emscripten_bind_btConvexHullShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btConvexHullShape_setMargin_1 = Module["_emscripten_bind_btConvexHullShape_setMargin_1"] = wasmExports["sh"])(a0, a1);
      var _emscripten_bind_btConvexHullShape_getMargin_0 = Module["_emscripten_bind_btConvexHullShape_getMargin_0"] = (a0) => (_emscripten_bind_btConvexHullShape_getMargin_0 = Module["_emscripten_bind_btConvexHullShape_getMargin_0"] = wasmExports["th"])(a0);
      var _emscripten_bind_btConvexHullShape_getNumVertices_0 = Module["_emscripten_bind_btConvexHullShape_getNumVertices_0"] = (a0) => (_emscripten_bind_btConvexHullShape_getNumVertices_0 = Module["_emscripten_bind_btConvexHullShape_getNumVertices_0"] = wasmExports["uh"])(a0);
      var _emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1 = Module["_emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1"] = (a0, a1) => (_emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1 = Module["_emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1"] = wasmExports["vh"])(a0, a1);
      var _emscripten_bind_btConvexHullShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexHullShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConvexHullShape_setLocalScaling_1 = Module["_emscripten_bind_btConvexHullShape_setLocalScaling_1"] = wasmExports["wh"])(a0, a1);
      var _emscripten_bind_btConvexHullShape_getLocalScaling_0 = Module["_emscripten_bind_btConvexHullShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConvexHullShape_getLocalScaling_0 = Module["_emscripten_bind_btConvexHullShape_getLocalScaling_0"] = wasmExports["xh"])(a0);
      var _emscripten_bind_btConvexHullShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConvexHullShape_calculateLocalInertia_2 = Module["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"] = wasmExports["yh"])(a0, a1, a2);
      var _emscripten_bind_btConvexHullShape___destroy___0 = Module["_emscripten_bind_btConvexHullShape___destroy___0"] = (a0) => (_emscripten_bind_btConvexHullShape___destroy___0 = Module["_emscripten_bind_btConvexHullShape___destroy___0"] = wasmExports["zh"])(a0);
      var _emscripten_bind_btShapeHull_btShapeHull_1 = Module["_emscripten_bind_btShapeHull_btShapeHull_1"] = (a0) => (_emscripten_bind_btShapeHull_btShapeHull_1 = Module["_emscripten_bind_btShapeHull_btShapeHull_1"] = wasmExports["Ah"])(a0);
      var _emscripten_bind_btShapeHull_buildHull_1 = Module["_emscripten_bind_btShapeHull_buildHull_1"] = (a0, a1) => (_emscripten_bind_btShapeHull_buildHull_1 = Module["_emscripten_bind_btShapeHull_buildHull_1"] = wasmExports["Bh"])(a0, a1);
      var _emscripten_bind_btShapeHull_numVertices_0 = Module["_emscripten_bind_btShapeHull_numVertices_0"] = (a0) => (_emscripten_bind_btShapeHull_numVertices_0 = Module["_emscripten_bind_btShapeHull_numVertices_0"] = wasmExports["Ch"])(a0);
      var _emscripten_bind_btShapeHull_getVertexPointer_0 = Module["_emscripten_bind_btShapeHull_getVertexPointer_0"] = (a0) => (_emscripten_bind_btShapeHull_getVertexPointer_0 = Module["_emscripten_bind_btShapeHull_getVertexPointer_0"] = wasmExports["Dh"])(a0);
      var _emscripten_bind_btShapeHull___destroy___0 = Module["_emscripten_bind_btShapeHull___destroy___0"] = (a0) => (_emscripten_bind_btShapeHull___destroy___0 = Module["_emscripten_bind_btShapeHull___destroy___0"] = wasmExports["Eh"])(a0);
      var _emscripten_bind_btConeShapeX_btConeShapeX_2 = Module["_emscripten_bind_btConeShapeX_btConeShapeX_2"] = (a0, a1) => (_emscripten_bind_btConeShapeX_btConeShapeX_2 = Module["_emscripten_bind_btConeShapeX_btConeShapeX_2"] = wasmExports["Fh"])(a0, a1);
      var _emscripten_bind_btConeShapeX_setLocalScaling_1 = Module["_emscripten_bind_btConeShapeX_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConeShapeX_setLocalScaling_1 = Module["_emscripten_bind_btConeShapeX_setLocalScaling_1"] = wasmExports["Gh"])(a0, a1);
      var _emscripten_bind_btConeShapeX_getLocalScaling_0 = Module["_emscripten_bind_btConeShapeX_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConeShapeX_getLocalScaling_0 = Module["_emscripten_bind_btConeShapeX_getLocalScaling_0"] = wasmExports["Hh"])(a0);
      var _emscripten_bind_btConeShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConeShapeX_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"] = wasmExports["Ih"])(a0, a1, a2);
      var _emscripten_bind_btConeShapeX___destroy___0 = Module["_emscripten_bind_btConeShapeX___destroy___0"] = (a0) => (_emscripten_bind_btConeShapeX___destroy___0 = Module["_emscripten_bind_btConeShapeX___destroy___0"] = wasmExports["Jh"])(a0);
      var _emscripten_bind_btConeShapeZ_btConeShapeZ_2 = Module["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"] = (a0, a1) => (_emscripten_bind_btConeShapeZ_btConeShapeZ_2 = Module["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"] = wasmExports["Kh"])(a0, a1);
      var _emscripten_bind_btConeShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btConeShapeZ_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btConeShapeZ_setLocalScaling_1 = Module["_emscripten_bind_btConeShapeZ_setLocalScaling_1"] = wasmExports["Lh"])(a0, a1);
      var _emscripten_bind_btConeShapeZ_getLocalScaling_0 = Module["_emscripten_bind_btConeShapeZ_getLocalScaling_0"] = (a0) => (_emscripten_bind_btConeShapeZ_getLocalScaling_0 = Module["_emscripten_bind_btConeShapeZ_getLocalScaling_0"] = wasmExports["Mh"])(a0);
      var _emscripten_bind_btConeShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btConeShapeZ_calculateLocalInertia_2 = Module["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"] = wasmExports["Nh"])(a0, a1, a2);
      var _emscripten_bind_btConeShapeZ___destroy___0 = Module["_emscripten_bind_btConeShapeZ___destroy___0"] = (a0) => (_emscripten_bind_btConeShapeZ___destroy___0 = Module["_emscripten_bind_btConeShapeZ___destroy___0"] = wasmExports["Oh"])(a0);
      var _emscripten_bind_btCompoundShape_btCompoundShape_0 = Module["_emscripten_bind_btCompoundShape_btCompoundShape_0"] = () => (_emscripten_bind_btCompoundShape_btCompoundShape_0 = Module["_emscripten_bind_btCompoundShape_btCompoundShape_0"] = wasmExports["Ph"])();
      var _emscripten_bind_btCompoundShape_btCompoundShape_1 = Module["_emscripten_bind_btCompoundShape_btCompoundShape_1"] = (a0) => (_emscripten_bind_btCompoundShape_btCompoundShape_1 = Module["_emscripten_bind_btCompoundShape_btCompoundShape_1"] = wasmExports["Qh"])(a0);
      var _emscripten_bind_btCompoundShape_addChildShape_2 = Module["_emscripten_bind_btCompoundShape_addChildShape_2"] = (a0, a1, a2) => (_emscripten_bind_btCompoundShape_addChildShape_2 = Module["_emscripten_bind_btCompoundShape_addChildShape_2"] = wasmExports["Rh"])(a0, a1, a2);
      var _emscripten_bind_btCompoundShape_removeChildShapeByIndex_1 = Module["_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1"] = (a0, a1) => (_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1 = Module["_emscripten_bind_btCompoundShape_removeChildShapeByIndex_1"] = wasmExports["Sh"])(a0, a1);
      var _emscripten_bind_btCompoundShape_getNumChildShapes_0 = Module["_emscripten_bind_btCompoundShape_getNumChildShapes_0"] = (a0) => (_emscripten_bind_btCompoundShape_getNumChildShapes_0 = Module["_emscripten_bind_btCompoundShape_getNumChildShapes_0"] = wasmExports["Th"])(a0);
      var _emscripten_bind_btCompoundShape_getChildShape_1 = Module["_emscripten_bind_btCompoundShape_getChildShape_1"] = (a0, a1) => (_emscripten_bind_btCompoundShape_getChildShape_1 = Module["_emscripten_bind_btCompoundShape_getChildShape_1"] = wasmExports["Uh"])(a0, a1);
      var _emscripten_bind_btCompoundShape_setMargin_1 = Module["_emscripten_bind_btCompoundShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btCompoundShape_setMargin_1 = Module["_emscripten_bind_btCompoundShape_setMargin_1"] = wasmExports["Vh"])(a0, a1);
      var _emscripten_bind_btCompoundShape_getMargin_0 = Module["_emscripten_bind_btCompoundShape_getMargin_0"] = (a0) => (_emscripten_bind_btCompoundShape_getMargin_0 = Module["_emscripten_bind_btCompoundShape_getMargin_0"] = wasmExports["Wh"])(a0);
      var _emscripten_bind_btCompoundShape_setLocalScaling_1 = Module["_emscripten_bind_btCompoundShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btCompoundShape_setLocalScaling_1 = Module["_emscripten_bind_btCompoundShape_setLocalScaling_1"] = wasmExports["Xh"])(a0, a1);
      var _emscripten_bind_btCompoundShape_getLocalScaling_0 = Module["_emscripten_bind_btCompoundShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btCompoundShape_getLocalScaling_0 = Module["_emscripten_bind_btCompoundShape_getLocalScaling_0"] = wasmExports["Yh"])(a0);
      var _emscripten_bind_btCompoundShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btCompoundShape_calculateLocalInertia_2 = Module["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"] = wasmExports["Zh"])(a0, a1, a2);
      var _emscripten_bind_btCompoundShape___destroy___0 = Module["_emscripten_bind_btCompoundShape___destroy___0"] = (a0) => (_emscripten_bind_btCompoundShape___destroy___0 = Module["_emscripten_bind_btCompoundShape___destroy___0"] = wasmExports["_h"])(a0);
      var _emscripten_bind_btTriangleMesh_btTriangleMesh_0 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"] = () => (_emscripten_bind_btTriangleMesh_btTriangleMesh_0 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"] = wasmExports["$h"])();
      var _emscripten_bind_btTriangleMesh_btTriangleMesh_1 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"] = (a0) => (_emscripten_bind_btTriangleMesh_btTriangleMesh_1 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"] = wasmExports["ai"])(a0);
      var _emscripten_bind_btTriangleMesh_btTriangleMesh_2 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"] = (a0, a1) => (_emscripten_bind_btTriangleMesh_btTriangleMesh_2 = Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"] = wasmExports["bi"])(a0, a1);
      var _emscripten_bind_btTriangleMesh_addTriangle_3 = Module["_emscripten_bind_btTriangleMesh_addTriangle_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btTriangleMesh_addTriangle_3 = Module["_emscripten_bind_btTriangleMesh_addTriangle_3"] = wasmExports["ci"])(a0, a1, a2, a3);
      var _emscripten_bind_btTriangleMesh_addTriangle_4 = Module["_emscripten_bind_btTriangleMesh_addTriangle_4"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btTriangleMesh_addTriangle_4 = Module["_emscripten_bind_btTriangleMesh_addTriangle_4"] = wasmExports["di"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btTriangleMesh___destroy___0 = Module["_emscripten_bind_btTriangleMesh___destroy___0"] = (a0) => (_emscripten_bind_btTriangleMesh___destroy___0 = Module["_emscripten_bind_btTriangleMesh___destroy___0"] = wasmExports["ei"])(a0);
      var _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2 = Module["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"] = (a0, a1) => (_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2 = Module["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"] = wasmExports["fi"])(a0, a1);
      var _emscripten_bind_btStaticPlaneShape_setLocalScaling_1 = Module["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btStaticPlaneShape_setLocalScaling_1 = Module["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"] = wasmExports["gi"])(a0, a1);
      var _emscripten_bind_btStaticPlaneShape_getLocalScaling_0 = Module["_emscripten_bind_btStaticPlaneShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btStaticPlaneShape_getLocalScaling_0 = Module["_emscripten_bind_btStaticPlaneShape_getLocalScaling_0"] = wasmExports["hi"])(a0);
      var _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2 = Module["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2 = Module["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"] = wasmExports["ii"])(a0, a1, a2);
      var _emscripten_bind_btStaticPlaneShape___destroy___0 = Module["_emscripten_bind_btStaticPlaneShape___destroy___0"] = (a0) => (_emscripten_bind_btStaticPlaneShape___destroy___0 = Module["_emscripten_bind_btStaticPlaneShape___destroy___0"] = wasmExports["ji"])(a0);
      var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2 = Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"] = (a0, a1) => (_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2 = Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"] = wasmExports["ki"])(a0, a1);
      var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3 = Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"] = (a0, a1, a2) => (_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3 = Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"] = wasmExports["li"])(a0, a1, a2);
      var _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"] = wasmExports["mi"])(a0, a1);
      var _emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0"] = wasmExports["ni"])(a0);
      var _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"] = wasmExports["oi"])(a0, a1, a2);
      var _emscripten_bind_btBvhTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"] = (a0) => (_emscripten_bind_btBvhTriangleMeshShape___destroy___0 = Module["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"] = wasmExports["pi"])(a0);
      var _emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9 = Module["_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9"] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) => (_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9 = Module["_emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9"] = wasmExports["qi"])(a0, a1, a2, a3, a4, a5, a6, a7, a8);
      var _emscripten_bind_btHeightfieldTerrainShape_setMargin_1 = Module["_emscripten_bind_btHeightfieldTerrainShape_setMargin_1"] = (a0, a1) => (_emscripten_bind_btHeightfieldTerrainShape_setMargin_1 = Module["_emscripten_bind_btHeightfieldTerrainShape_setMargin_1"] = wasmExports["ri"])(a0, a1);
      var _emscripten_bind_btHeightfieldTerrainShape_getMargin_0 = Module["_emscripten_bind_btHeightfieldTerrainShape_getMargin_0"] = (a0) => (_emscripten_bind_btHeightfieldTerrainShape_getMargin_0 = Module["_emscripten_bind_btHeightfieldTerrainShape_getMargin_0"] = wasmExports["si"])(a0);
      var _emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1 = Module["_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1 = Module["_emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1"] = wasmExports["ti"])(a0, a1);
      var _emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0 = Module["_emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0 = Module["_emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0"] = wasmExports["ui"])(a0);
      var _emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2 = Module["_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2 = Module["_emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2"] = wasmExports["vi"])(a0, a1, a2);
      var _emscripten_bind_btHeightfieldTerrainShape___destroy___0 = Module["_emscripten_bind_btHeightfieldTerrainShape___destroy___0"] = (a0) => (_emscripten_bind_btHeightfieldTerrainShape___destroy___0 = Module["_emscripten_bind_btHeightfieldTerrainShape___destroy___0"] = wasmExports["wi"])(a0);
      var _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0 = Module["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"] = () => (_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0 = Module["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"] = wasmExports["xi"])();
      var _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0 = Module["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"] = (a0) => (_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0 = Module["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"] = wasmExports["yi"])(a0);
      var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0 = Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"] = () => (_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0 = Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"] = wasmExports["zi"])();
      var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1 = Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"] = (a0) => (_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1 = Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"] = wasmExports["Ai"])(a0);
      var _emscripten_bind_btDefaultCollisionConfiguration___destroy___0 = Module["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"] = (a0) => (_emscripten_bind_btDefaultCollisionConfiguration___destroy___0 = Module["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"] = wasmExports["Bi"])(a0);
      var _emscripten_bind_btPersistentManifold_btPersistentManifold_0 = Module["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"] = () => (_emscripten_bind_btPersistentManifold_btPersistentManifold_0 = Module["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"] = wasmExports["Ci"])();
      var _emscripten_bind_btPersistentManifold_getBody0_0 = Module["_emscripten_bind_btPersistentManifold_getBody0_0"] = (a0) => (_emscripten_bind_btPersistentManifold_getBody0_0 = Module["_emscripten_bind_btPersistentManifold_getBody0_0"] = wasmExports["Di"])(a0);
      var _emscripten_bind_btPersistentManifold_getBody1_0 = Module["_emscripten_bind_btPersistentManifold_getBody1_0"] = (a0) => (_emscripten_bind_btPersistentManifold_getBody1_0 = Module["_emscripten_bind_btPersistentManifold_getBody1_0"] = wasmExports["Ei"])(a0);
      var _emscripten_bind_btPersistentManifold_getNumContacts_0 = Module["_emscripten_bind_btPersistentManifold_getNumContacts_0"] = (a0) => (_emscripten_bind_btPersistentManifold_getNumContacts_0 = Module["_emscripten_bind_btPersistentManifold_getNumContacts_0"] = wasmExports["Fi"])(a0);
      var _emscripten_bind_btPersistentManifold_getContactPoint_1 = Module["_emscripten_bind_btPersistentManifold_getContactPoint_1"] = (a0, a1) => (_emscripten_bind_btPersistentManifold_getContactPoint_1 = Module["_emscripten_bind_btPersistentManifold_getContactPoint_1"] = wasmExports["Gi"])(a0, a1);
      var _emscripten_bind_btPersistentManifold___destroy___0 = Module["_emscripten_bind_btPersistentManifold___destroy___0"] = (a0) => (_emscripten_bind_btPersistentManifold___destroy___0 = Module["_emscripten_bind_btPersistentManifold___destroy___0"] = wasmExports["Hi"])(a0);
      var _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1 = Module["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"] = (a0) => (_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1 = Module["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"] = wasmExports["Ii"])(a0);
      var _emscripten_bind_btCollisionDispatcher_getNumManifolds_0 = Module["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"] = (a0) => (_emscripten_bind_btCollisionDispatcher_getNumManifolds_0 = Module["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"] = wasmExports["Ji"])(a0);
      var _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1 = Module["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"] = (a0, a1) => (_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1 = Module["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"] = wasmExports["Ki"])(a0, a1);
      var _emscripten_bind_btCollisionDispatcher___destroy___0 = Module["_emscripten_bind_btCollisionDispatcher___destroy___0"] = (a0) => (_emscripten_bind_btCollisionDispatcher___destroy___0 = Module["_emscripten_bind_btCollisionDispatcher___destroy___0"] = wasmExports["Li"])(a0);
      var _emscripten_bind_btOverlappingPairCallback___destroy___0 = Module["_emscripten_bind_btOverlappingPairCallback___destroy___0"] = (a0) => (_emscripten_bind_btOverlappingPairCallback___destroy___0 = Module["_emscripten_bind_btOverlappingPairCallback___destroy___0"] = wasmExports["Mi"])(a0);
      var _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1 = Module["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"] = (a0, a1) => (_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1 = Module["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"] = wasmExports["Ni"])(a0, a1);
      var _emscripten_bind_btOverlappingPairCache___destroy___0 = Module["_emscripten_bind_btOverlappingPairCache___destroy___0"] = (a0) => (_emscripten_bind_btOverlappingPairCache___destroy___0 = Module["_emscripten_bind_btOverlappingPairCache___destroy___0"] = wasmExports["Oi"])(a0);
      var _emscripten_bind_btAxisSweep3_btAxisSweep3_2 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"] = (a0, a1) => (_emscripten_bind_btAxisSweep3_btAxisSweep3_2 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"] = wasmExports["Pi"])(a0, a1);
      var _emscripten_bind_btAxisSweep3_btAxisSweep3_3 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"] = (a0, a1, a2) => (_emscripten_bind_btAxisSweep3_btAxisSweep3_3 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"] = wasmExports["Qi"])(a0, a1, a2);
      var _emscripten_bind_btAxisSweep3_btAxisSweep3_4 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btAxisSweep3_btAxisSweep3_4 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"] = wasmExports["Ri"])(a0, a1, a2, a3);
      var _emscripten_bind_btAxisSweep3_btAxisSweep3_5 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btAxisSweep3_btAxisSweep3_5 = Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"] = wasmExports["Si"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btAxisSweep3___destroy___0 = Module["_emscripten_bind_btAxisSweep3___destroy___0"] = (a0) => (_emscripten_bind_btAxisSweep3___destroy___0 = Module["_emscripten_bind_btAxisSweep3___destroy___0"] = wasmExports["Ti"])(a0);
      var _emscripten_bind_btBroadphaseInterface___destroy___0 = Module["_emscripten_bind_btBroadphaseInterface___destroy___0"] = (a0) => (_emscripten_bind_btBroadphaseInterface___destroy___0 = Module["_emscripten_bind_btBroadphaseInterface___destroy___0"] = wasmExports["Ui"])(a0);
      var _emscripten_bind_btCollisionConfiguration___destroy___0 = Module["_emscripten_bind_btCollisionConfiguration___destroy___0"] = (a0) => (_emscripten_bind_btCollisionConfiguration___destroy___0 = Module["_emscripten_bind_btCollisionConfiguration___destroy___0"] = wasmExports["Vi"])(a0);
      var _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0 = Module["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"] = () => (_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0 = Module["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"] = wasmExports["Wi"])();
      var _emscripten_bind_btDbvtBroadphase___destroy___0 = Module["_emscripten_bind_btDbvtBroadphase___destroy___0"] = (a0) => (_emscripten_bind_btDbvtBroadphase___destroy___0 = Module["_emscripten_bind_btDbvtBroadphase___destroy___0"] = wasmExports["Xi"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3 = Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"] = (a0, a1, a2) => (_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3 = Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"] = wasmExports["Yi"])(a0, a1, a2);
      var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4 = Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4 = Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"] = wasmExports["Zi"])(a0, a1, a2, a3);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"] = wasmExports["_i"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"] = wasmExports["$i"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"] = wasmExports["aj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"] = wasmExports["bj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"] = wasmExports["cj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"] = wasmExports["dj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"] = wasmExports["ej"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"] = wasmExports["fj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"] = wasmExports["gj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"] = wasmExports["hj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"] = wasmExports["ij"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"] = wasmExports["jj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"] = wasmExports["kj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"] = wasmExports["lj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"] = wasmExports["mj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"] = wasmExports["nj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"] = wasmExports["oj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"] = wasmExports["pj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"] = wasmExports["qj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"] = wasmExports["rj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"] = wasmExports["sj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"] = wasmExports["tj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0 = Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"] = wasmExports["uj"])(a0);
      var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"] = (a0, a1) => (_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1 = Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"] = wasmExports["vj"])(a0, a1);
      var _emscripten_bind_btRigidBodyConstructionInfo___destroy___0 = Module["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"] = (a0) => (_emscripten_bind_btRigidBodyConstructionInfo___destroy___0 = Module["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"] = wasmExports["wj"])(a0);
      var _emscripten_bind_btRigidBody_btRigidBody_1 = Module["_emscripten_bind_btRigidBody_btRigidBody_1"] = (a0) => (_emscripten_bind_btRigidBody_btRigidBody_1 = Module["_emscripten_bind_btRigidBody_btRigidBody_1"] = wasmExports["xj"])(a0);
      var _emscripten_bind_btRigidBody_getCenterOfMassTransform_0 = Module["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"] = (a0) => (_emscripten_bind_btRigidBody_getCenterOfMassTransform_0 = Module["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"] = wasmExports["yj"])(a0);
      var _emscripten_bind_btRigidBody_setCenterOfMassTransform_1 = Module["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setCenterOfMassTransform_1 = Module["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"] = wasmExports["zj"])(a0, a1);
      var _emscripten_bind_btRigidBody_setSleepingThresholds_2 = Module["_emscripten_bind_btRigidBody_setSleepingThresholds_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_setSleepingThresholds_2 = Module["_emscripten_bind_btRigidBody_setSleepingThresholds_2"] = wasmExports["Aj"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_setDamping_2 = Module["_emscripten_bind_btRigidBody_setDamping_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_setDamping_2 = Module["_emscripten_bind_btRigidBody_setDamping_2"] = wasmExports["Bj"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_setMassProps_2 = Module["_emscripten_bind_btRigidBody_setMassProps_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_setMassProps_2 = Module["_emscripten_bind_btRigidBody_setMassProps_2"] = wasmExports["Cj"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_setLinearFactor_1 = Module["_emscripten_bind_btRigidBody_setLinearFactor_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setLinearFactor_1 = Module["_emscripten_bind_btRigidBody_setLinearFactor_1"] = wasmExports["Dj"])(a0, a1);
      var _emscripten_bind_btRigidBody_applyTorque_1 = Module["_emscripten_bind_btRigidBody_applyTorque_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_applyTorque_1 = Module["_emscripten_bind_btRigidBody_applyTorque_1"] = wasmExports["Ej"])(a0, a1);
      var _emscripten_bind_btRigidBody_applyForce_2 = Module["_emscripten_bind_btRigidBody_applyForce_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_applyForce_2 = Module["_emscripten_bind_btRigidBody_applyForce_2"] = wasmExports["Fj"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_applyCentralForce_1 = Module["_emscripten_bind_btRigidBody_applyCentralForce_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_applyCentralForce_1 = Module["_emscripten_bind_btRigidBody_applyCentralForce_1"] = wasmExports["Gj"])(a0, a1);
      var _emscripten_bind_btRigidBody_applyTorqueImpulse_1 = Module["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_applyTorqueImpulse_1 = Module["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"] = wasmExports["Hj"])(a0, a1);
      var _emscripten_bind_btRigidBody_applyImpulse_2 = Module["_emscripten_bind_btRigidBody_applyImpulse_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_applyImpulse_2 = Module["_emscripten_bind_btRigidBody_applyImpulse_2"] = wasmExports["Ij"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_applyCentralImpulse_1 = Module["_emscripten_bind_btRigidBody_applyCentralImpulse_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_applyCentralImpulse_1 = Module["_emscripten_bind_btRigidBody_applyCentralImpulse_1"] = wasmExports["Jj"])(a0, a1);
      var _emscripten_bind_btRigidBody_updateInertiaTensor_0 = Module["_emscripten_bind_btRigidBody_updateInertiaTensor_0"] = (a0) => (_emscripten_bind_btRigidBody_updateInertiaTensor_0 = Module["_emscripten_bind_btRigidBody_updateInertiaTensor_0"] = wasmExports["Kj"])(a0);
      var _emscripten_bind_btRigidBody_getLinearVelocity_0 = Module["_emscripten_bind_btRigidBody_getLinearVelocity_0"] = (a0) => (_emscripten_bind_btRigidBody_getLinearVelocity_0 = Module["_emscripten_bind_btRigidBody_getLinearVelocity_0"] = wasmExports["Lj"])(a0);
      var _emscripten_bind_btRigidBody_getAngularVelocity_0 = Module["_emscripten_bind_btRigidBody_getAngularVelocity_0"] = (a0) => (_emscripten_bind_btRigidBody_getAngularVelocity_0 = Module["_emscripten_bind_btRigidBody_getAngularVelocity_0"] = wasmExports["Mj"])(a0);
      var _emscripten_bind_btRigidBody_setLinearVelocity_1 = Module["_emscripten_bind_btRigidBody_setLinearVelocity_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setLinearVelocity_1 = Module["_emscripten_bind_btRigidBody_setLinearVelocity_1"] = wasmExports["Nj"])(a0, a1);
      var _emscripten_bind_btRigidBody_setAngularVelocity_1 = Module["_emscripten_bind_btRigidBody_setAngularVelocity_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setAngularVelocity_1 = Module["_emscripten_bind_btRigidBody_setAngularVelocity_1"] = wasmExports["Oj"])(a0, a1);
      var _emscripten_bind_btRigidBody_getMotionState_0 = Module["_emscripten_bind_btRigidBody_getMotionState_0"] = (a0) => (_emscripten_bind_btRigidBody_getMotionState_0 = Module["_emscripten_bind_btRigidBody_getMotionState_0"] = wasmExports["Pj"])(a0);
      var _emscripten_bind_btRigidBody_setMotionState_1 = Module["_emscripten_bind_btRigidBody_setMotionState_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setMotionState_1 = Module["_emscripten_bind_btRigidBody_setMotionState_1"] = wasmExports["Qj"])(a0, a1);
      var _emscripten_bind_btRigidBody_setAngularFactor_1 = Module["_emscripten_bind_btRigidBody_setAngularFactor_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setAngularFactor_1 = Module["_emscripten_bind_btRigidBody_setAngularFactor_1"] = wasmExports["Rj"])(a0, a1);
      var _emscripten_bind_btRigidBody_upcast_1 = Module["_emscripten_bind_btRigidBody_upcast_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_upcast_1 = Module["_emscripten_bind_btRigidBody_upcast_1"] = wasmExports["Sj"])(a0, a1);
      var _emscripten_bind_btRigidBody_getAabb_2 = Module["_emscripten_bind_btRigidBody_getAabb_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_getAabb_2 = Module["_emscripten_bind_btRigidBody_getAabb_2"] = wasmExports["Tj"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_applyGravity_0 = Module["_emscripten_bind_btRigidBody_applyGravity_0"] = (a0) => (_emscripten_bind_btRigidBody_applyGravity_0 = Module["_emscripten_bind_btRigidBody_applyGravity_0"] = wasmExports["Uj"])(a0);
      var _emscripten_bind_btRigidBody_getGravity_0 = Module["_emscripten_bind_btRigidBody_getGravity_0"] = (a0) => (_emscripten_bind_btRigidBody_getGravity_0 = Module["_emscripten_bind_btRigidBody_getGravity_0"] = wasmExports["Vj"])(a0);
      var _emscripten_bind_btRigidBody_setGravity_1 = Module["_emscripten_bind_btRigidBody_setGravity_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setGravity_1 = Module["_emscripten_bind_btRigidBody_setGravity_1"] = wasmExports["Wj"])(a0, a1);
      var _emscripten_bind_btRigidBody_setAnisotropicFriction_2 = Module["_emscripten_bind_btRigidBody_setAnisotropicFriction_2"] = (a0, a1, a2) => (_emscripten_bind_btRigidBody_setAnisotropicFriction_2 = Module["_emscripten_bind_btRigidBody_setAnisotropicFriction_2"] = wasmExports["Xj"])(a0, a1, a2);
      var _emscripten_bind_btRigidBody_getCollisionShape_0 = Module["_emscripten_bind_btRigidBody_getCollisionShape_0"] = (a0) => (_emscripten_bind_btRigidBody_getCollisionShape_0 = Module["_emscripten_bind_btRigidBody_getCollisionShape_0"] = wasmExports["Yj"])(a0);
      var _emscripten_bind_btRigidBody_setContactProcessingThreshold_1 = Module["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setContactProcessingThreshold_1 = Module["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"] = wasmExports["Zj"])(a0, a1);
      var _emscripten_bind_btRigidBody_setActivationState_1 = Module["_emscripten_bind_btRigidBody_setActivationState_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setActivationState_1 = Module["_emscripten_bind_btRigidBody_setActivationState_1"] = wasmExports["_j"])(a0, a1);
      var _emscripten_bind_btRigidBody_forceActivationState_1 = Module["_emscripten_bind_btRigidBody_forceActivationState_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_forceActivationState_1 = Module["_emscripten_bind_btRigidBody_forceActivationState_1"] = wasmExports["$j"])(a0, a1);
      var _emscripten_bind_btRigidBody_activate_0 = Module["_emscripten_bind_btRigidBody_activate_0"] = (a0) => (_emscripten_bind_btRigidBody_activate_0 = Module["_emscripten_bind_btRigidBody_activate_0"] = wasmExports["ak"])(a0);
      var _emscripten_bind_btRigidBody_activate_1 = Module["_emscripten_bind_btRigidBody_activate_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_activate_1 = Module["_emscripten_bind_btRigidBody_activate_1"] = wasmExports["bk"])(a0, a1);
      var _emscripten_bind_btRigidBody_isActive_0 = Module["_emscripten_bind_btRigidBody_isActive_0"] = (a0) => (_emscripten_bind_btRigidBody_isActive_0 = Module["_emscripten_bind_btRigidBody_isActive_0"] = wasmExports["ck"])(a0);
      var _emscripten_bind_btRigidBody_isKinematicObject_0 = Module["_emscripten_bind_btRigidBody_isKinematicObject_0"] = (a0) => (_emscripten_bind_btRigidBody_isKinematicObject_0 = Module["_emscripten_bind_btRigidBody_isKinematicObject_0"] = wasmExports["dk"])(a0);
      var _emscripten_bind_btRigidBody_isStaticObject_0 = Module["_emscripten_bind_btRigidBody_isStaticObject_0"] = (a0) => (_emscripten_bind_btRigidBody_isStaticObject_0 = Module["_emscripten_bind_btRigidBody_isStaticObject_0"] = wasmExports["ek"])(a0);
      var _emscripten_bind_btRigidBody_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btRigidBody_isStaticOrKinematicObject_0"] = (a0) => (_emscripten_bind_btRigidBody_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btRigidBody_isStaticOrKinematicObject_0"] = wasmExports["fk"])(a0);
      var _emscripten_bind_btRigidBody_setRestitution_1 = Module["_emscripten_bind_btRigidBody_setRestitution_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setRestitution_1 = Module["_emscripten_bind_btRigidBody_setRestitution_1"] = wasmExports["gk"])(a0, a1);
      var _emscripten_bind_btRigidBody_setFriction_1 = Module["_emscripten_bind_btRigidBody_setFriction_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setFriction_1 = Module["_emscripten_bind_btRigidBody_setFriction_1"] = wasmExports["hk"])(a0, a1);
      var _emscripten_bind_btRigidBody_setRollingFriction_1 = Module["_emscripten_bind_btRigidBody_setRollingFriction_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setRollingFriction_1 = Module["_emscripten_bind_btRigidBody_setRollingFriction_1"] = wasmExports["ik"])(a0, a1);
      var _emscripten_bind_btRigidBody_getWorldTransform_0 = Module["_emscripten_bind_btRigidBody_getWorldTransform_0"] = (a0) => (_emscripten_bind_btRigidBody_getWorldTransform_0 = Module["_emscripten_bind_btRigidBody_getWorldTransform_0"] = wasmExports["jk"])(a0);
      var _emscripten_bind_btRigidBody_getCollisionFlags_0 = Module["_emscripten_bind_btRigidBody_getCollisionFlags_0"] = (a0) => (_emscripten_bind_btRigidBody_getCollisionFlags_0 = Module["_emscripten_bind_btRigidBody_getCollisionFlags_0"] = wasmExports["kk"])(a0);
      var _emscripten_bind_btRigidBody_setCollisionFlags_1 = Module["_emscripten_bind_btRigidBody_setCollisionFlags_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setCollisionFlags_1 = Module["_emscripten_bind_btRigidBody_setCollisionFlags_1"] = wasmExports["lk"])(a0, a1);
      var _emscripten_bind_btRigidBody_setWorldTransform_1 = Module["_emscripten_bind_btRigidBody_setWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setWorldTransform_1 = Module["_emscripten_bind_btRigidBody_setWorldTransform_1"] = wasmExports["mk"])(a0, a1);
      var _emscripten_bind_btRigidBody_setCollisionShape_1 = Module["_emscripten_bind_btRigidBody_setCollisionShape_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setCollisionShape_1 = Module["_emscripten_bind_btRigidBody_setCollisionShape_1"] = wasmExports["nk"])(a0, a1);
      var _emscripten_bind_btRigidBody_setCcdMotionThreshold_1 = Module["_emscripten_bind_btRigidBody_setCcdMotionThreshold_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setCcdMotionThreshold_1 = Module["_emscripten_bind_btRigidBody_setCcdMotionThreshold_1"] = wasmExports["ok"])(a0, a1);
      var _emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1"] = wasmExports["pk"])(a0, a1);
      var _emscripten_bind_btRigidBody_getUserIndex_0 = Module["_emscripten_bind_btRigidBody_getUserIndex_0"] = (a0) => (_emscripten_bind_btRigidBody_getUserIndex_0 = Module["_emscripten_bind_btRigidBody_getUserIndex_0"] = wasmExports["qk"])(a0);
      var _emscripten_bind_btRigidBody_setUserIndex_1 = Module["_emscripten_bind_btRigidBody_setUserIndex_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setUserIndex_1 = Module["_emscripten_bind_btRigidBody_setUserIndex_1"] = wasmExports["rk"])(a0, a1);
      var _emscripten_bind_btRigidBody_getUserPointer_0 = Module["_emscripten_bind_btRigidBody_getUserPointer_0"] = (a0) => (_emscripten_bind_btRigidBody_getUserPointer_0 = Module["_emscripten_bind_btRigidBody_getUserPointer_0"] = wasmExports["sk"])(a0);
      var _emscripten_bind_btRigidBody_setUserPointer_1 = Module["_emscripten_bind_btRigidBody_setUserPointer_1"] = (a0, a1) => (_emscripten_bind_btRigidBody_setUserPointer_1 = Module["_emscripten_bind_btRigidBody_setUserPointer_1"] = wasmExports["tk"])(a0, a1);
      var _emscripten_bind_btRigidBody_getActivationState_0 = Module["_emscripten_bind_btRigidBody_getActivationState_0"] = (a0) => (_emscripten_bind_btRigidBody_getActivationState_0 = Module["_emscripten_bind_btRigidBody_getActivationState_0"] = wasmExports["uk"])(a0);
      var _emscripten_bind_btRigidBody___destroy___0 = Module["_emscripten_bind_btRigidBody___destroy___0"] = (a0) => (_emscripten_bind_btRigidBody___destroy___0 = Module["_emscripten_bind_btRigidBody___destroy___0"] = wasmExports["vk"])(a0);
      var _emscripten_bind_btConstraintSetting_btConstraintSetting_0 = Module["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"] = () => (_emscripten_bind_btConstraintSetting_btConstraintSetting_0 = Module["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"] = wasmExports["wk"])();
      var _emscripten_bind_btConstraintSetting_get_m_tau_0 = Module["_emscripten_bind_btConstraintSetting_get_m_tau_0"] = (a0) => (_emscripten_bind_btConstraintSetting_get_m_tau_0 = Module["_emscripten_bind_btConstraintSetting_get_m_tau_0"] = wasmExports["xk"])(a0);
      var _emscripten_bind_btConstraintSetting_set_m_tau_1 = Module["_emscripten_bind_btConstraintSetting_set_m_tau_1"] = (a0, a1) => (_emscripten_bind_btConstraintSetting_set_m_tau_1 = Module["_emscripten_bind_btConstraintSetting_set_m_tau_1"] = wasmExports["yk"])(a0, a1);
      var _emscripten_bind_btConstraintSetting_get_m_damping_0 = Module["_emscripten_bind_btConstraintSetting_get_m_damping_0"] = (a0) => (_emscripten_bind_btConstraintSetting_get_m_damping_0 = Module["_emscripten_bind_btConstraintSetting_get_m_damping_0"] = wasmExports["zk"])(a0);
      var _emscripten_bind_btConstraintSetting_set_m_damping_1 = Module["_emscripten_bind_btConstraintSetting_set_m_damping_1"] = (a0, a1) => (_emscripten_bind_btConstraintSetting_set_m_damping_1 = Module["_emscripten_bind_btConstraintSetting_set_m_damping_1"] = wasmExports["Ak"])(a0, a1);
      var _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0 = Module["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"] = (a0) => (_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0 = Module["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"] = wasmExports["Bk"])(a0);
      var _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1 = Module["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"] = (a0, a1) => (_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1 = Module["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"] = wasmExports["Ck"])(a0, a1);
      var _emscripten_bind_btConstraintSetting___destroy___0 = Module["_emscripten_bind_btConstraintSetting___destroy___0"] = (a0) => (_emscripten_bind_btConstraintSetting___destroy___0 = Module["_emscripten_bind_btConstraintSetting___destroy___0"] = wasmExports["Dk"])(a0);
      var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2 = Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"] = (a0, a1) => (_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2 = Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"] = wasmExports["Ek"])(a0, a1);
      var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4 = Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4 = Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"] = wasmExports["Fk"])(a0, a1, a2, a3);
      var _emscripten_bind_btPoint2PointConstraint_setPivotA_1 = Module["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"] = (a0, a1) => (_emscripten_bind_btPoint2PointConstraint_setPivotA_1 = Module["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"] = wasmExports["Gk"])(a0, a1);
      var _emscripten_bind_btPoint2PointConstraint_setPivotB_1 = Module["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"] = (a0, a1) => (_emscripten_bind_btPoint2PointConstraint_setPivotB_1 = Module["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"] = wasmExports["Hk"])(a0, a1);
      var _emscripten_bind_btPoint2PointConstraint_getPivotInA_0 = Module["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"] = (a0) => (_emscripten_bind_btPoint2PointConstraint_getPivotInA_0 = Module["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"] = wasmExports["Ik"])(a0);
      var _emscripten_bind_btPoint2PointConstraint_getPivotInB_0 = Module["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"] = (a0) => (_emscripten_bind_btPoint2PointConstraint_getPivotInB_0 = Module["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"] = wasmExports["Jk"])(a0);
      var _emscripten_bind_btPoint2PointConstraint_enableFeedback_1 = Module["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btPoint2PointConstraint_enableFeedback_1 = Module["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"] = wasmExports["Kk"])(a0, a1);
      var _emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0"] = wasmExports["Lk"])(a0);
      var _emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1"] = wasmExports["Mk"])(a0, a1);
      var _emscripten_bind_btPoint2PointConstraint_getParam_2 = Module["_emscripten_bind_btPoint2PointConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btPoint2PointConstraint_getParam_2 = Module["_emscripten_bind_btPoint2PointConstraint_getParam_2"] = wasmExports["Nk"])(a0, a1, a2);
      var _emscripten_bind_btPoint2PointConstraint_setParam_3 = Module["_emscripten_bind_btPoint2PointConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btPoint2PointConstraint_setParam_3 = Module["_emscripten_bind_btPoint2PointConstraint_setParam_3"] = wasmExports["Ok"])(a0, a1, a2, a3);
      var _emscripten_bind_btPoint2PointConstraint_get_m_setting_0 = Module["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"] = (a0) => (_emscripten_bind_btPoint2PointConstraint_get_m_setting_0 = Module["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"] = wasmExports["Pk"])(a0);
      var _emscripten_bind_btPoint2PointConstraint_set_m_setting_1 = Module["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"] = (a0, a1) => (_emscripten_bind_btPoint2PointConstraint_set_m_setting_1 = Module["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"] = wasmExports["Qk"])(a0, a1);
      var _emscripten_bind_btPoint2PointConstraint___destroy___0 = Module["_emscripten_bind_btPoint2PointConstraint___destroy___0"] = (a0) => (_emscripten_bind_btPoint2PointConstraint___destroy___0 = Module["_emscripten_bind_btPoint2PointConstraint___destroy___0"] = wasmExports["Rk"])(a0);
      var _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3"] = wasmExports["Sk"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5"] = wasmExports["Tk"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2"] = wasmExports["Uk"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2"] = wasmExports["Vk"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2"] = wasmExports["Wk"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1"] = wasmExports["Xk"])(a0, a1);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1"] = wasmExports["Yk"])(a0, a1);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1"] = wasmExports["Zk"])(a0, a1);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1"] = wasmExports["_k"])(a0, a1);
      var _emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0"] = (a0) => (_emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0"] = wasmExports["$k"])(a0);
      var _emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1"] = wasmExports["al"])(a0, a1);
      var _emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0"] = wasmExports["bl"])(a0);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1"] = wasmExports["cl"])(a0, a1);
      var _emscripten_bind_btGeneric6DofSpringConstraint_getParam_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btGeneric6DofSpringConstraint_getParam_2 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_getParam_2"] = wasmExports["dl"])(a0, a1, a2);
      var _emscripten_bind_btGeneric6DofSpringConstraint_setParam_3 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btGeneric6DofSpringConstraint_setParam_3 = Module["_emscripten_bind_btGeneric6DofSpringConstraint_setParam_3"] = wasmExports["el"])(a0, a1, a2, a3);
      var _emscripten_bind_btGeneric6DofSpringConstraint___destroy___0 = Module["_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0"] = (a0) => (_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0 = Module["_emscripten_bind_btGeneric6DofSpringConstraint___destroy___0"] = wasmExports["fl"])(a0);
      var _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0 = Module["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"] = () => (_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0 = Module["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"] = wasmExports["gl"])();
      var _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0 = Module["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"] = (a0) => (_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0 = Module["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"] = wasmExports["hl"])(a0);
      var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2 = Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2 = Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"] = wasmExports["il"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4 = Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4 = Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"] = wasmExports["jl"])(a0, a1, a2, a3);
      var _emscripten_bind_btConeTwistConstraint_setLimit_2 = Module["_emscripten_bind_btConeTwistConstraint_setLimit_2"] = (a0, a1, a2) => (_emscripten_bind_btConeTwistConstraint_setLimit_2 = Module["_emscripten_bind_btConeTwistConstraint_setLimit_2"] = wasmExports["kl"])(a0, a1, a2);
      var _emscripten_bind_btConeTwistConstraint_setAngularOnly_1 = Module["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setAngularOnly_1 = Module["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"] = wasmExports["ll"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_setDamping_1 = Module["_emscripten_bind_btConeTwistConstraint_setDamping_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setDamping_1 = Module["_emscripten_bind_btConeTwistConstraint_setDamping_1"] = wasmExports["ml"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_enableMotor_1 = Module["_emscripten_bind_btConeTwistConstraint_enableMotor_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_enableMotor_1 = Module["_emscripten_bind_btConeTwistConstraint_enableMotor_1"] = wasmExports["nl"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1 = Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1 = Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"] = wasmExports["ol"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1 = Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1 = Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"] = wasmExports["pl"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_setMotorTarget_1 = Module["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setMotorTarget_1 = Module["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"] = wasmExports["ql"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1 = Module["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1 = Module["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"] = wasmExports["rl"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_enableFeedback_1 = Module["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_enableFeedback_1 = Module["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"] = wasmExports["sl"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0"] = wasmExports["tl"])(a0);
      var _emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1"] = wasmExports["ul"])(a0, a1);
      var _emscripten_bind_btConeTwistConstraint_getParam_2 = Module["_emscripten_bind_btConeTwistConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btConeTwistConstraint_getParam_2 = Module["_emscripten_bind_btConeTwistConstraint_getParam_2"] = wasmExports["vl"])(a0, a1, a2);
      var _emscripten_bind_btConeTwistConstraint_setParam_3 = Module["_emscripten_bind_btConeTwistConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btConeTwistConstraint_setParam_3 = Module["_emscripten_bind_btConeTwistConstraint_setParam_3"] = wasmExports["wl"])(a0, a1, a2, a3);
      var _emscripten_bind_btConeTwistConstraint___destroy___0 = Module["_emscripten_bind_btConeTwistConstraint___destroy___0"] = (a0) => (_emscripten_bind_btConeTwistConstraint___destroy___0 = Module["_emscripten_bind_btConeTwistConstraint___destroy___0"] = wasmExports["xl"])(a0);
      var _emscripten_bind_btHingeConstraint_btHingeConstraint_2 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"] = (a0, a1) => (_emscripten_bind_btHingeConstraint_btHingeConstraint_2 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"] = wasmExports["yl"])(a0, a1);
      var _emscripten_bind_btHingeConstraint_btHingeConstraint_3 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"] = (a0, a1, a2) => (_emscripten_bind_btHingeConstraint_btHingeConstraint_3 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"] = wasmExports["zl"])(a0, a1, a2);
      var _emscripten_bind_btHingeConstraint_btHingeConstraint_4 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btHingeConstraint_btHingeConstraint_4 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"] = wasmExports["Al"])(a0, a1, a2, a3);
      var _emscripten_bind_btHingeConstraint_btHingeConstraint_5 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btHingeConstraint_btHingeConstraint_5 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"] = wasmExports["Bl"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btHingeConstraint_btHingeConstraint_6 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"] = (a0, a1, a2, a3, a4, a5) => (_emscripten_bind_btHingeConstraint_btHingeConstraint_6 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"] = wasmExports["Cl"])(a0, a1, a2, a3, a4, a5);
      var _emscripten_bind_btHingeConstraint_btHingeConstraint_7 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"] = (a0, a1, a2, a3, a4, a5, a6) => (_emscripten_bind_btHingeConstraint_btHingeConstraint_7 = Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"] = wasmExports["Dl"])(a0, a1, a2, a3, a4, a5, a6);
      var _emscripten_bind_btHingeConstraint_setLimit_4 = Module["_emscripten_bind_btHingeConstraint_setLimit_4"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btHingeConstraint_setLimit_4 = Module["_emscripten_bind_btHingeConstraint_setLimit_4"] = wasmExports["El"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btHingeConstraint_setLimit_5 = Module["_emscripten_bind_btHingeConstraint_setLimit_5"] = (a0, a1, a2, a3, a4, a5) => (_emscripten_bind_btHingeConstraint_setLimit_5 = Module["_emscripten_bind_btHingeConstraint_setLimit_5"] = wasmExports["Fl"])(a0, a1, a2, a3, a4, a5);
      var _emscripten_bind_btHingeConstraint_enableAngularMotor_3 = Module["_emscripten_bind_btHingeConstraint_enableAngularMotor_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btHingeConstraint_enableAngularMotor_3 = Module["_emscripten_bind_btHingeConstraint_enableAngularMotor_3"] = wasmExports["Gl"])(a0, a1, a2, a3);
      var _emscripten_bind_btHingeConstraint_setAngularOnly_1 = Module["_emscripten_bind_btHingeConstraint_setAngularOnly_1"] = (a0, a1) => (_emscripten_bind_btHingeConstraint_setAngularOnly_1 = Module["_emscripten_bind_btHingeConstraint_setAngularOnly_1"] = wasmExports["Hl"])(a0, a1);
      var _emscripten_bind_btHingeConstraint_enableMotor_1 = Module["_emscripten_bind_btHingeConstraint_enableMotor_1"] = (a0, a1) => (_emscripten_bind_btHingeConstraint_enableMotor_1 = Module["_emscripten_bind_btHingeConstraint_enableMotor_1"] = wasmExports["Il"])(a0, a1);
      var _emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1 = Module["_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1"] = (a0, a1) => (_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1 = Module["_emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1"] = wasmExports["Jl"])(a0, a1);
      var _emscripten_bind_btHingeConstraint_setMotorTarget_2 = Module["_emscripten_bind_btHingeConstraint_setMotorTarget_2"] = (a0, a1, a2) => (_emscripten_bind_btHingeConstraint_setMotorTarget_2 = Module["_emscripten_bind_btHingeConstraint_setMotorTarget_2"] = wasmExports["Kl"])(a0, a1, a2);
      var _emscripten_bind_btHingeConstraint_enableFeedback_1 = Module["_emscripten_bind_btHingeConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btHingeConstraint_enableFeedback_1 = Module["_emscripten_bind_btHingeConstraint_enableFeedback_1"] = wasmExports["Ll"])(a0, a1);
      var _emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0"] = wasmExports["Ml"])(a0);
      var _emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1"] = wasmExports["Nl"])(a0, a1);
      var _emscripten_bind_btHingeConstraint_getParam_2 = Module["_emscripten_bind_btHingeConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btHingeConstraint_getParam_2 = Module["_emscripten_bind_btHingeConstraint_getParam_2"] = wasmExports["Ol"])(a0, a1, a2);
      var _emscripten_bind_btHingeConstraint_setParam_3 = Module["_emscripten_bind_btHingeConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btHingeConstraint_setParam_3 = Module["_emscripten_bind_btHingeConstraint_setParam_3"] = wasmExports["Pl"])(a0, a1, a2, a3);
      var _emscripten_bind_btHingeConstraint___destroy___0 = Module["_emscripten_bind_btHingeConstraint___destroy___0"] = (a0) => (_emscripten_bind_btHingeConstraint___destroy___0 = Module["_emscripten_bind_btHingeConstraint___destroy___0"] = wasmExports["Ql"])(a0);
      var _emscripten_bind_btSliderConstraint_btSliderConstraint_3 = Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"] = (a0, a1, a2) => (_emscripten_bind_btSliderConstraint_btSliderConstraint_3 = Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"] = wasmExports["Rl"])(a0, a1, a2);
      var _emscripten_bind_btSliderConstraint_btSliderConstraint_5 = Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"] = (a0, a1, a2, a3, a4) => (_emscripten_bind_btSliderConstraint_btSliderConstraint_5 = Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"] = wasmExports["Sl"])(a0, a1, a2, a3, a4);
      var _emscripten_bind_btSliderConstraint_setLowerLinLimit_1 = Module["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"] = (a0, a1) => (_emscripten_bind_btSliderConstraint_setLowerLinLimit_1 = Module["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"] = wasmExports["Tl"])(a0, a1);
      var _emscripten_bind_btSliderConstraint_setUpperLinLimit_1 = Module["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"] = (a0, a1) => (_emscripten_bind_btSliderConstraint_setUpperLinLimit_1 = Module["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"] = wasmExports["Ul"])(a0, a1);
      var _emscripten_bind_btSliderConstraint_setLowerAngLimit_1 = Module["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"] = (a0, a1) => (_emscripten_bind_btSliderConstraint_setLowerAngLimit_1 = Module["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"] = wasmExports["Vl"])(a0, a1);
      var _emscripten_bind_btSliderConstraint_setUpperAngLimit_1 = Module["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"] = (a0, a1) => (_emscripten_bind_btSliderConstraint_setUpperAngLimit_1 = Module["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"] = wasmExports["Wl"])(a0, a1);
      var _emscripten_bind_btSliderConstraint_enableFeedback_1 = Module["_emscripten_bind_btSliderConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btSliderConstraint_enableFeedback_1 = Module["_emscripten_bind_btSliderConstraint_enableFeedback_1"] = wasmExports["Xl"])(a0, a1);
      var _emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0"] = wasmExports["Yl"])(a0);
      var _emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1"] = wasmExports["Zl"])(a0, a1);
      var _emscripten_bind_btSliderConstraint_getParam_2 = Module["_emscripten_bind_btSliderConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btSliderConstraint_getParam_2 = Module["_emscripten_bind_btSliderConstraint_getParam_2"] = wasmExports["_l"])(a0, a1, a2);
      var _emscripten_bind_btSliderConstraint_setParam_3 = Module["_emscripten_bind_btSliderConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btSliderConstraint_setParam_3 = Module["_emscripten_bind_btSliderConstraint_setParam_3"] = wasmExports["$l"])(a0, a1, a2, a3);
      var _emscripten_bind_btSliderConstraint___destroy___0 = Module["_emscripten_bind_btSliderConstraint___destroy___0"] = (a0) => (_emscripten_bind_btSliderConstraint___destroy___0 = Module["_emscripten_bind_btSliderConstraint___destroy___0"] = wasmExports["am"])(a0);
      var _emscripten_bind_btFixedConstraint_btFixedConstraint_4 = Module["_emscripten_bind_btFixedConstraint_btFixedConstraint_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btFixedConstraint_btFixedConstraint_4 = Module["_emscripten_bind_btFixedConstraint_btFixedConstraint_4"] = wasmExports["bm"])(a0, a1, a2, a3);
      var _emscripten_bind_btFixedConstraint_enableFeedback_1 = Module["_emscripten_bind_btFixedConstraint_enableFeedback_1"] = (a0, a1) => (_emscripten_bind_btFixedConstraint_enableFeedback_1 = Module["_emscripten_bind_btFixedConstraint_enableFeedback_1"] = wasmExports["cm"])(a0, a1);
      var _emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0"] = (a0) => (_emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0 = Module["_emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0"] = wasmExports["dm"])(a0);
      var _emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1"] = (a0, a1) => (_emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1 = Module["_emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1"] = wasmExports["em"])(a0, a1);
      var _emscripten_bind_btFixedConstraint_getParam_2 = Module["_emscripten_bind_btFixedConstraint_getParam_2"] = (a0, a1, a2) => (_emscripten_bind_btFixedConstraint_getParam_2 = Module["_emscripten_bind_btFixedConstraint_getParam_2"] = wasmExports["fm"])(a0, a1, a2);
      var _emscripten_bind_btFixedConstraint_setParam_3 = Module["_emscripten_bind_btFixedConstraint_setParam_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btFixedConstraint_setParam_3 = Module["_emscripten_bind_btFixedConstraint_setParam_3"] = wasmExports["gm"])(a0, a1, a2, a3);
      var _emscripten_bind_btFixedConstraint___destroy___0 = Module["_emscripten_bind_btFixedConstraint___destroy___0"] = (a0) => (_emscripten_bind_btFixedConstraint___destroy___0 = Module["_emscripten_bind_btFixedConstraint___destroy___0"] = wasmExports["hm"])(a0);
      var _emscripten_bind_btConstraintSolver___destroy___0 = Module["_emscripten_bind_btConstraintSolver___destroy___0"] = (a0) => (_emscripten_bind_btConstraintSolver___destroy___0 = Module["_emscripten_bind_btConstraintSolver___destroy___0"] = wasmExports["im"])(a0);
      var _emscripten_bind_btDispatcherInfo_get_m_timeStep_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_timeStep_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"] = wasmExports["jm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_timeStep_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_timeStep_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"] = wasmExports["km"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_stepCount_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_stepCount_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"] = wasmExports["lm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_stepCount_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_stepCount_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"] = wasmExports["mm"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"] = wasmExports["nm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"] = wasmExports["om"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"] = wasmExports["pm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"] = wasmExports["qm"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"] = wasmExports["rm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"] = wasmExports["sm"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"] = wasmExports["tm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"] = wasmExports["um"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"] = wasmExports["vm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"] = wasmExports["wm"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_useEpa_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_useEpa_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"] = wasmExports["xm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_useEpa_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_useEpa_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"] = wasmExports["ym"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"] = wasmExports["zm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"] = wasmExports["Am"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"] = wasmExports["Bm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"] = wasmExports["Cm"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"] = (a0) => (_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0 = Module["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"] = wasmExports["Dm"])(a0);
      var _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"] = (a0, a1) => (_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1 = Module["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"] = wasmExports["Em"])(a0, a1);
      var _emscripten_bind_btDispatcherInfo___destroy___0 = Module["_emscripten_bind_btDispatcherInfo___destroy___0"] = (a0) => (_emscripten_bind_btDispatcherInfo___destroy___0 = Module["_emscripten_bind_btDispatcherInfo___destroy___0"] = wasmExports["Fm"])(a0);
      var _emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0 = Module["_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0"] = (a0) => (_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0 = Module["_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0"] = wasmExports["Gm"])(a0);
      var _emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1 = Module["_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1"] = (a0, a1) => (_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1 = Module["_emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1"] = wasmExports["Hm"])(a0, a1);
      var _emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0 = Module["_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0"] = (a0) => (_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0 = Module["_emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0"] = wasmExports["Im"])(a0);
      var _emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1 = Module["_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1"] = (a0, a1) => (_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1 = Module["_emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1"] = wasmExports["Jm"])(a0, a1);
      var _emscripten_bind_btContactSolverInfo_get_m_numIterations_0 = Module["_emscripten_bind_btContactSolverInfo_get_m_numIterations_0"] = (a0) => (_emscripten_bind_btContactSolverInfo_get_m_numIterations_0 = Module["_emscripten_bind_btContactSolverInfo_get_m_numIterations_0"] = wasmExports["Km"])(a0);
      var _emscripten_bind_btContactSolverInfo_set_m_numIterations_1 = Module["_emscripten_bind_btContactSolverInfo_set_m_numIterations_1"] = (a0, a1) => (_emscripten_bind_btContactSolverInfo_set_m_numIterations_1 = Module["_emscripten_bind_btContactSolverInfo_set_m_numIterations_1"] = wasmExports["Lm"])(a0, a1);
      var _emscripten_bind_btContactSolverInfo___destroy___0 = Module["_emscripten_bind_btContactSolverInfo___destroy___0"] = (a0) => (_emscripten_bind_btContactSolverInfo___destroy___0 = Module["_emscripten_bind_btContactSolverInfo___destroy___0"] = wasmExports["Mm"])(a0);
      var _emscripten_bind_btVehicleTuning_btVehicleTuning_0 = Module["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"] = () => (_emscripten_bind_btVehicleTuning_btVehicleTuning_0 = Module["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"] = wasmExports["Nm"])();
      var _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"] = (a0) => (_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"] = wasmExports["Om"])(a0);
      var _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"] = (a0, a1) => (_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"] = wasmExports["Pm"])(a0, a1);
      var _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"] = (a0) => (_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"] = wasmExports["Qm"])(a0);
      var _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"] = (a0, a1) => (_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"] = wasmExports["Rm"])(a0, a1);
      var _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"] = (a0) => (_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0 = Module["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"] = wasmExports["Sm"])(a0);
      var _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"] = (a0, a1) => (_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1 = Module["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"] = wasmExports["Tm"])(a0, a1);
      var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"] = (a0) => (_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"] = wasmExports["Um"])(a0);
      var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"] = (a0, a1) => (_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"] = wasmExports["Vm"])(a0, a1);
      var _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0 = Module["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"] = (a0) => (_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0 = Module["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"] = wasmExports["Wm"])(a0);
      var _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1 = Module["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"] = (a0, a1) => (_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1 = Module["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"] = wasmExports["Xm"])(a0, a1);
      var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"] = (a0) => (_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"] = wasmExports["Ym"])(a0);
      var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"] = (a0, a1) => (_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"] = wasmExports["Zm"])(a0, a1);
      var _emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0 = Module["_emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0"] = (a0) => (_emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0 = Module["_emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0"] = wasmExports["_m"])(a0);
      var _emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1 = Module["_emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1"] = (a0, a1) => (_emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1 = Module["_emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1"] = wasmExports["$m"])(a0, a1);
      var _emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0 = Module["_emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0"] = (a0) => (_emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0 = Module["_emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0"] = wasmExports["an"])(a0);
      var _emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1 = Module["_emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1"] = (a0, a1) => (_emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1 = Module["_emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1"] = wasmExports["bn"])(a0, a1);
      var _emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0 = Module["_emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0"] = (a0) => (_emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0 = Module["_emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0"] = wasmExports["cn"])(a0);
      var _emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1 = Module["_emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1"] = (a0, a1) => (_emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1 = Module["_emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1"] = wasmExports["dn"])(a0, a1);
      var _emscripten_bind_btVehicleRaycasterResult___destroy___0 = Module["_emscripten_bind_btVehicleRaycasterResult___destroy___0"] = (a0) => (_emscripten_bind_btVehicleRaycasterResult___destroy___0 = Module["_emscripten_bind_btVehicleRaycasterResult___destroy___0"] = wasmExports["en"])(a0);
      var _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1 = Module["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"] = (a0) => (_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1 = Module["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"] = wasmExports["fn"])(a0);
      var _emscripten_bind_btDefaultVehicleRaycaster_castRay_3 = Module["_emscripten_bind_btDefaultVehicleRaycaster_castRay_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btDefaultVehicleRaycaster_castRay_3 = Module["_emscripten_bind_btDefaultVehicleRaycaster_castRay_3"] = wasmExports["gn"])(a0, a1, a2, a3);
      var _emscripten_bind_btDefaultVehicleRaycaster___destroy___0 = Module["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"] = (a0) => (_emscripten_bind_btDefaultVehicleRaycaster___destroy___0 = Module["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"] = wasmExports["hn"])(a0);
      var _emscripten_bind_RaycastInfo_get_m_contactNormalWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0"] = wasmExports["jn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_contactNormalWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_contactNormalWS_1"] = wasmExports["kn"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_contactPointWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_contactPointWS_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_contactPointWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_contactPointWS_0"] = wasmExports["ln"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_contactPointWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_contactPointWS_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_contactPointWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_contactPointWS_1"] = wasmExports["mn"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_suspensionLength_0 = Module["_emscripten_bind_RaycastInfo_get_m_suspensionLength_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_suspensionLength_0 = Module["_emscripten_bind_RaycastInfo_get_m_suspensionLength_0"] = wasmExports["nn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_suspensionLength_1 = Module["_emscripten_bind_RaycastInfo_set_m_suspensionLength_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_suspensionLength_1 = Module["_emscripten_bind_RaycastInfo_set_m_suspensionLength_1"] = wasmExports["on"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_hardPointWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_hardPointWS_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_hardPointWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_hardPointWS_0"] = wasmExports["pn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_hardPointWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_hardPointWS_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_hardPointWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_hardPointWS_1"] = wasmExports["qn"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0"] = wasmExports["rn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1"] = wasmExports["sn"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0 = Module["_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0"] = wasmExports["tn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1 = Module["_emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1"] = wasmExports["un"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_isInContact_0 = Module["_emscripten_bind_RaycastInfo_get_m_isInContact_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_isInContact_0 = Module["_emscripten_bind_RaycastInfo_get_m_isInContact_0"] = wasmExports["vn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_isInContact_1 = Module["_emscripten_bind_RaycastInfo_set_m_isInContact_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_isInContact_1 = Module["_emscripten_bind_RaycastInfo_set_m_isInContact_1"] = wasmExports["wn"])(a0, a1);
      var _emscripten_bind_RaycastInfo_get_m_groundObject_0 = Module["_emscripten_bind_RaycastInfo_get_m_groundObject_0"] = (a0) => (_emscripten_bind_RaycastInfo_get_m_groundObject_0 = Module["_emscripten_bind_RaycastInfo_get_m_groundObject_0"] = wasmExports["xn"])(a0);
      var _emscripten_bind_RaycastInfo_set_m_groundObject_1 = Module["_emscripten_bind_RaycastInfo_set_m_groundObject_1"] = (a0, a1) => (_emscripten_bind_RaycastInfo_set_m_groundObject_1 = Module["_emscripten_bind_RaycastInfo_set_m_groundObject_1"] = wasmExports["yn"])(a0, a1);
      var _emscripten_bind_RaycastInfo___destroy___0 = Module["_emscripten_bind_RaycastInfo___destroy___0"] = (a0) => (_emscripten_bind_RaycastInfo___destroy___0 = Module["_emscripten_bind_RaycastInfo___destroy___0"] = wasmExports["zn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0"] = wasmExports["An"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1"] = wasmExports["Bn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0"] = wasmExports["Cn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1"] = wasmExports["Dn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0"] = wasmExports["En"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1"] = wasmExports["Fn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0"] = wasmExports["Gn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1"] = wasmExports["Hn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0"] = wasmExports["In"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1"] = wasmExports["Jn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0"] = wasmExports["Kn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1"] = wasmExports["Ln"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0"] = wasmExports["Mn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1"] = wasmExports["Nn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0"] = wasmExports["On"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1"] = wasmExports["Pn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0"] = wasmExports["Qn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1"] = wasmExports["Rn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0"] = wasmExports["Sn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1"] = wasmExports["Tn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0"] = wasmExports["Un"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1"] = wasmExports["Vn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0 = Module["_emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0"] = wasmExports["Wn"])(a0);
      var _emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1"] = (a0, a1) => (_emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1 = Module["_emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1"] = wasmExports["Xn"])(a0, a1);
      var _emscripten_bind_btWheelInfoConstructionInfo___destroy___0 = Module["_emscripten_bind_btWheelInfoConstructionInfo___destroy___0"] = (a0) => (_emscripten_bind_btWheelInfoConstructionInfo___destroy___0 = Module["_emscripten_bind_btWheelInfoConstructionInfo___destroy___0"] = wasmExports["Yn"])(a0);
      var _emscripten_bind_btWheelInfo_btWheelInfo_1 = Module["_emscripten_bind_btWheelInfo_btWheelInfo_1"] = (a0) => (_emscripten_bind_btWheelInfo_btWheelInfo_1 = Module["_emscripten_bind_btWheelInfo_btWheelInfo_1"] = wasmExports["Zn"])(a0);
      var _emscripten_bind_btWheelInfo_getSuspensionRestLength_0 = Module["_emscripten_bind_btWheelInfo_getSuspensionRestLength_0"] = (a0) => (_emscripten_bind_btWheelInfo_getSuspensionRestLength_0 = Module["_emscripten_bind_btWheelInfo_getSuspensionRestLength_0"] = wasmExports["_n"])(a0);
      var _emscripten_bind_btWheelInfo_updateWheel_2 = Module["_emscripten_bind_btWheelInfo_updateWheel_2"] = (a0, a1, a2) => (_emscripten_bind_btWheelInfo_updateWheel_2 = Module["_emscripten_bind_btWheelInfo_updateWheel_2"] = wasmExports["$n"])(a0, a1, a2);
      var _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"] = wasmExports["ao"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"] = wasmExports["bo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_frictionSlip_0 = Module["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_frictionSlip_0 = Module["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"] = wasmExports["co"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_frictionSlip_1 = Module["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_frictionSlip_1 = Module["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"] = wasmExports["eo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_engineForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_engineForce_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_engineForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_engineForce_0"] = wasmExports["fo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_engineForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_engineForce_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_engineForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_engineForce_1"] = wasmExports["go"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_rollInfluence_0 = Module["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_rollInfluence_0 = Module["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"] = wasmExports["ho"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_rollInfluence_1 = Module["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_rollInfluence_1 = Module["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"] = wasmExports["io"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"] = wasmExports["jo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"] = wasmExports["ko"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"] = wasmExports["lo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"] = wasmExports["mo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"] = wasmExports["no"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"] = wasmExports["oo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"] = wasmExports["po"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"] = wasmExports["qo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_steering_0 = Module["_emscripten_bind_btWheelInfo_get_m_steering_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_steering_0 = Module["_emscripten_bind_btWheelInfo_get_m_steering_0"] = wasmExports["ro"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_steering_1 = Module["_emscripten_bind_btWheelInfo_set_m_steering_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_steering_1 = Module["_emscripten_bind_btWheelInfo_set_m_steering_1"] = wasmExports["so"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"] = wasmExports["to"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"] = wasmExports["uo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0 = Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"] = wasmExports["vo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1 = Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"] = wasmExports["wo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0"] = wasmExports["xo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1"] = wasmExports["yo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0 = Module["_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0 = Module["_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0"] = wasmExports["zo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1 = Module["_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1 = Module["_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1"] = wasmExports["Ao"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_raycastInfo_0 = Module["_emscripten_bind_btWheelInfo_get_m_raycastInfo_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_raycastInfo_0 = Module["_emscripten_bind_btWheelInfo_get_m_raycastInfo_0"] = wasmExports["Bo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_raycastInfo_1 = Module["_emscripten_bind_btWheelInfo_set_m_raycastInfo_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_raycastInfo_1 = Module["_emscripten_bind_btWheelInfo_set_m_raycastInfo_1"] = wasmExports["Co"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0 = Module["_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0 = Module["_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0"] = wasmExports["Do"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1 = Module["_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1 = Module["_emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1"] = wasmExports["Eo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_worldTransform_0 = Module["_emscripten_bind_btWheelInfo_get_m_worldTransform_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_worldTransform_0 = Module["_emscripten_bind_btWheelInfo_get_m_worldTransform_0"] = wasmExports["Fo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_worldTransform_1 = Module["_emscripten_bind_btWheelInfo_set_m_worldTransform_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_worldTransform_1 = Module["_emscripten_bind_btWheelInfo_set_m_worldTransform_1"] = wasmExports["Go"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0"] = wasmExports["Ho"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1"] = wasmExports["Io"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0 = Module["_emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0"] = wasmExports["Jo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1 = Module["_emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1"] = wasmExports["Ko"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_rotation_0 = Module["_emscripten_bind_btWheelInfo_get_m_rotation_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_rotation_0 = Module["_emscripten_bind_btWheelInfo_get_m_rotation_0"] = wasmExports["Lo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_rotation_1 = Module["_emscripten_bind_btWheelInfo_set_m_rotation_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_rotation_1 = Module["_emscripten_bind_btWheelInfo_set_m_rotation_1"] = wasmExports["Mo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_deltaRotation_0 = Module["_emscripten_bind_btWheelInfo_get_m_deltaRotation_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_deltaRotation_0 = Module["_emscripten_bind_btWheelInfo_get_m_deltaRotation_0"] = wasmExports["No"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_deltaRotation_1 = Module["_emscripten_bind_btWheelInfo_set_m_deltaRotation_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_deltaRotation_1 = Module["_emscripten_bind_btWheelInfo_set_m_deltaRotation_1"] = wasmExports["Oo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_brake_0 = Module["_emscripten_bind_btWheelInfo_get_m_brake_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_brake_0 = Module["_emscripten_bind_btWheelInfo_get_m_brake_0"] = wasmExports["Po"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_brake_1 = Module["_emscripten_bind_btWheelInfo_set_m_brake_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_brake_1 = Module["_emscripten_bind_btWheelInfo_set_m_brake_1"] = wasmExports["Qo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0 = Module["_emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0 = Module["_emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0"] = wasmExports["Ro"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1 = Module["_emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1 = Module["_emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1"] = wasmExports["So"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0 = Module["_emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0"] = wasmExports["To"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1 = Module["_emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1"] = wasmExports["Uo"])(a0, a1);
      var _emscripten_bind_btWheelInfo_get_m_skidInfo_0 = Module["_emscripten_bind_btWheelInfo_get_m_skidInfo_0"] = (a0) => (_emscripten_bind_btWheelInfo_get_m_skidInfo_0 = Module["_emscripten_bind_btWheelInfo_get_m_skidInfo_0"] = wasmExports["Vo"])(a0);
      var _emscripten_bind_btWheelInfo_set_m_skidInfo_1 = Module["_emscripten_bind_btWheelInfo_set_m_skidInfo_1"] = (a0, a1) => (_emscripten_bind_btWheelInfo_set_m_skidInfo_1 = Module["_emscripten_bind_btWheelInfo_set_m_skidInfo_1"] = wasmExports["Wo"])(a0, a1);
      var _emscripten_bind_btWheelInfo___destroy___0 = Module["_emscripten_bind_btWheelInfo___destroy___0"] = (a0) => (_emscripten_bind_btWheelInfo___destroy___0 = Module["_emscripten_bind_btWheelInfo___destroy___0"] = wasmExports["Xo"])(a0);
      var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3 = Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"] = (a0, a1, a2) => (_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3 = Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"] = wasmExports["Yo"])(a0, a1, a2);
      var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4 = Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4 = Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"] = wasmExports["Zo"])(a0, a1, a2, a3);
      var _emscripten_bind_btKinematicCharacterController_setWalkDirection_1 = Module["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setWalkDirection_1 = Module["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"] = wasmExports["_o"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2 = Module["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"] = (a0, a1, a2) => (_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2 = Module["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"] = wasmExports["$o"])(a0, a1, a2);
      var _emscripten_bind_btKinematicCharacterController_warp_1 = Module["_emscripten_bind_btKinematicCharacterController_warp_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_warp_1 = Module["_emscripten_bind_btKinematicCharacterController_warp_1"] = wasmExports["ap"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_preStep_1 = Module["_emscripten_bind_btKinematicCharacterController_preStep_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_preStep_1 = Module["_emscripten_bind_btKinematicCharacterController_preStep_1"] = wasmExports["bp"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_playerStep_2 = Module["_emscripten_bind_btKinematicCharacterController_playerStep_2"] = (a0, a1, a2) => (_emscripten_bind_btKinematicCharacterController_playerStep_2 = Module["_emscripten_bind_btKinematicCharacterController_playerStep_2"] = wasmExports["cp"])(a0, a1, a2);
      var _emscripten_bind_btKinematicCharacterController_setFallSpeed_1 = Module["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setFallSpeed_1 = Module["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"] = wasmExports["dp"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1 = Module["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1 = Module["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"] = wasmExports["ep"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1 = Module["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1 = Module["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"] = wasmExports["fp"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_canJump_0 = Module["_emscripten_bind_btKinematicCharacterController_canJump_0"] = (a0) => (_emscripten_bind_btKinematicCharacterController_canJump_0 = Module["_emscripten_bind_btKinematicCharacterController_canJump_0"] = wasmExports["gp"])(a0);
      var _emscripten_bind_btKinematicCharacterController_jump_0 = Module["_emscripten_bind_btKinematicCharacterController_jump_0"] = (a0) => (_emscripten_bind_btKinematicCharacterController_jump_0 = Module["_emscripten_bind_btKinematicCharacterController_jump_0"] = wasmExports["hp"])(a0);
      var _emscripten_bind_btKinematicCharacterController_setGravity_1 = Module["_emscripten_bind_btKinematicCharacterController_setGravity_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setGravity_1 = Module["_emscripten_bind_btKinematicCharacterController_setGravity_1"] = wasmExports["ip"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_getGravity_0 = Module["_emscripten_bind_btKinematicCharacterController_getGravity_0"] = (a0) => (_emscripten_bind_btKinematicCharacterController_getGravity_0 = Module["_emscripten_bind_btKinematicCharacterController_getGravity_0"] = wasmExports["jp"])(a0);
      var _emscripten_bind_btKinematicCharacterController_setMaxSlope_1 = Module["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setMaxSlope_1 = Module["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"] = wasmExports["kp"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_getMaxSlope_0 = Module["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"] = (a0) => (_emscripten_bind_btKinematicCharacterController_getMaxSlope_0 = Module["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"] = wasmExports["lp"])(a0);
      var _emscripten_bind_btKinematicCharacterController_getGhostObject_0 = Module["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"] = (a0) => (_emscripten_bind_btKinematicCharacterController_getGhostObject_0 = Module["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"] = wasmExports["mp"])(a0);
      var _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1 = Module["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1 = Module["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"] = wasmExports["np"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_onGround_0 = Module["_emscripten_bind_btKinematicCharacterController_onGround_0"] = (a0) => (_emscripten_bind_btKinematicCharacterController_onGround_0 = Module["_emscripten_bind_btKinematicCharacterController_onGround_0"] = wasmExports["op"])(a0);
      var _emscripten_bind_btKinematicCharacterController_setUpInterpolate_1 = Module["_emscripten_bind_btKinematicCharacterController_setUpInterpolate_1"] = (a0, a1) => (_emscripten_bind_btKinematicCharacterController_setUpInterpolate_1 = Module["_emscripten_bind_btKinematicCharacterController_setUpInterpolate_1"] = wasmExports["pp"])(a0, a1);
      var _emscripten_bind_btKinematicCharacterController_updateAction_2 = Module["_emscripten_bind_btKinematicCharacterController_updateAction_2"] = (a0, a1, a2) => (_emscripten_bind_btKinematicCharacterController_updateAction_2 = Module["_emscripten_bind_btKinematicCharacterController_updateAction_2"] = wasmExports["qp"])(a0, a1, a2);
      var _emscripten_bind_btKinematicCharacterController___destroy___0 = Module["_emscripten_bind_btKinematicCharacterController___destroy___0"] = (a0) => (_emscripten_bind_btKinematicCharacterController___destroy___0 = Module["_emscripten_bind_btKinematicCharacterController___destroy___0"] = wasmExports["rp"])(a0);
      var _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3 = Module["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3 = Module["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"] = wasmExports["sp"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle_applyEngineForce_2 = Module["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_applyEngineForce_2 = Module["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"] = wasmExports["tp"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle_setSteeringValue_2 = Module["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_setSteeringValue_2 = Module["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"] = wasmExports["up"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1 = Module["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1 = Module["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"] = wasmExports["vp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_updateWheelTransform_2 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_updateWheelTransform_2 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"] = wasmExports["wp"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle_addWheel_7 = Module["_emscripten_bind_btRaycastVehicle_addWheel_7"] = (a0, a1, a2, a3, a4, a5, a6, a7) => (_emscripten_bind_btRaycastVehicle_addWheel_7 = Module["_emscripten_bind_btRaycastVehicle_addWheel_7"] = wasmExports["xp"])(a0, a1, a2, a3, a4, a5, a6, a7);
      var _emscripten_bind_btRaycastVehicle_getNumWheels_0 = Module["_emscripten_bind_btRaycastVehicle_getNumWheels_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getNumWheels_0 = Module["_emscripten_bind_btRaycastVehicle_getNumWheels_0"] = wasmExports["yp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getRigidBody_0 = Module["_emscripten_bind_btRaycastVehicle_getRigidBody_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getRigidBody_0 = Module["_emscripten_bind_btRaycastVehicle_getRigidBody_0"] = wasmExports["zp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getWheelInfo_1 = Module["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_getWheelInfo_1 = Module["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"] = wasmExports["Ap"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_setBrake_2 = Module["_emscripten_bind_btRaycastVehicle_setBrake_2"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_setBrake_2 = Module["_emscripten_bind_btRaycastVehicle_setBrake_2"] = wasmExports["Bp"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3 = Module["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3 = Module["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"] = wasmExports["Cp"])(a0, a1, a2, a3);
      var _emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0 = Module["_emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0 = Module["_emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0"] = wasmExports["Dp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0 = Module["_emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0 = Module["_emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0"] = wasmExports["Ep"])(a0);
      var _emscripten_bind_btRaycastVehicle_rayCast_1 = Module["_emscripten_bind_btRaycastVehicle_rayCast_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_rayCast_1 = Module["_emscripten_bind_btRaycastVehicle_rayCast_1"] = wasmExports["Fp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_updateVehicle_1 = Module["_emscripten_bind_btRaycastVehicle_updateVehicle_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_updateVehicle_1 = Module["_emscripten_bind_btRaycastVehicle_updateVehicle_1"] = wasmExports["Gp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_resetSuspension_0 = Module["_emscripten_bind_btRaycastVehicle_resetSuspension_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_resetSuspension_0 = Module["_emscripten_bind_btRaycastVehicle_resetSuspension_0"] = wasmExports["Hp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getSteeringValue_1 = Module["_emscripten_bind_btRaycastVehicle_getSteeringValue_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_getSteeringValue_1 = Module["_emscripten_bind_btRaycastVehicle_getSteeringValue_1"] = wasmExports["Ip"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1"] = wasmExports["Jp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2 = Module["_emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2"] = wasmExports["Kp"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle_setPitchControl_1 = Module["_emscripten_bind_btRaycastVehicle_setPitchControl_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_setPitchControl_1 = Module["_emscripten_bind_btRaycastVehicle_setPitchControl_1"] = wasmExports["Lp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_updateSuspension_1 = Module["_emscripten_bind_btRaycastVehicle_updateSuspension_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_updateSuspension_1 = Module["_emscripten_bind_btRaycastVehicle_updateSuspension_1"] = wasmExports["Mp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_updateFriction_1 = Module["_emscripten_bind_btRaycastVehicle_updateFriction_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_updateFriction_1 = Module["_emscripten_bind_btRaycastVehicle_updateFriction_1"] = wasmExports["Np"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_getRightAxis_0 = Module["_emscripten_bind_btRaycastVehicle_getRightAxis_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getRightAxis_0 = Module["_emscripten_bind_btRaycastVehicle_getRightAxis_0"] = wasmExports["Op"])(a0);
      var _emscripten_bind_btRaycastVehicle_getUpAxis_0 = Module["_emscripten_bind_btRaycastVehicle_getUpAxis_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getUpAxis_0 = Module["_emscripten_bind_btRaycastVehicle_getUpAxis_0"] = wasmExports["Pp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getForwardAxis_0 = Module["_emscripten_bind_btRaycastVehicle_getForwardAxis_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getForwardAxis_0 = Module["_emscripten_bind_btRaycastVehicle_getForwardAxis_0"] = wasmExports["Qp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getForwardVector_0 = Module["_emscripten_bind_btRaycastVehicle_getForwardVector_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getForwardVector_0 = Module["_emscripten_bind_btRaycastVehicle_getForwardVector_0"] = wasmExports["Rp"])(a0);
      var _emscripten_bind_btRaycastVehicle_getUserConstraintType_0 = Module["_emscripten_bind_btRaycastVehicle_getUserConstraintType_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getUserConstraintType_0 = Module["_emscripten_bind_btRaycastVehicle_getUserConstraintType_0"] = wasmExports["Sp"])(a0);
      var _emscripten_bind_btRaycastVehicle_setUserConstraintType_1 = Module["_emscripten_bind_btRaycastVehicle_setUserConstraintType_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_setUserConstraintType_1 = Module["_emscripten_bind_btRaycastVehicle_setUserConstraintType_1"] = wasmExports["Tp"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_setUserConstraintId_1 = Module["_emscripten_bind_btRaycastVehicle_setUserConstraintId_1"] = (a0, a1) => (_emscripten_bind_btRaycastVehicle_setUserConstraintId_1 = Module["_emscripten_bind_btRaycastVehicle_setUserConstraintId_1"] = wasmExports["Up"])(a0, a1);
      var _emscripten_bind_btRaycastVehicle_getUserConstraintId_0 = Module["_emscripten_bind_btRaycastVehicle_getUserConstraintId_0"] = (a0) => (_emscripten_bind_btRaycastVehicle_getUserConstraintId_0 = Module["_emscripten_bind_btRaycastVehicle_getUserConstraintId_0"] = wasmExports["Vp"])(a0);
      var _emscripten_bind_btRaycastVehicle_updateAction_2 = Module["_emscripten_bind_btRaycastVehicle_updateAction_2"] = (a0, a1, a2) => (_emscripten_bind_btRaycastVehicle_updateAction_2 = Module["_emscripten_bind_btRaycastVehicle_updateAction_2"] = wasmExports["Wp"])(a0, a1, a2);
      var _emscripten_bind_btRaycastVehicle___destroy___0 = Module["_emscripten_bind_btRaycastVehicle___destroy___0"] = (a0) => (_emscripten_bind_btRaycastVehicle___destroy___0 = Module["_emscripten_bind_btRaycastVehicle___destroy___0"] = wasmExports["Xp"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"] = () => (_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"] = wasmExports["Yp"])();
      var _emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2 = Module["_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2"] = (a0, a1, a2) => (_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2 = Module["_emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2"] = wasmExports["Zp"])(a0, a1, a2);
      var _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0 = Module["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0 = Module["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"] = wasmExports["_p"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1 = Module["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"] = wasmExports["$p"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setActivationState_1 = Module["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setActivationState_1 = Module["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"] = wasmExports["aq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_forceActivationState_1 = Module["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_forceActivationState_1 = Module["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"] = wasmExports["bq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_activate_0 = Module["_emscripten_bind_btPairCachingGhostObject_activate_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_activate_0 = Module["_emscripten_bind_btPairCachingGhostObject_activate_0"] = wasmExports["cq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_activate_1 = Module["_emscripten_bind_btPairCachingGhostObject_activate_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_activate_1 = Module["_emscripten_bind_btPairCachingGhostObject_activate_1"] = wasmExports["dq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_isActive_0 = Module["_emscripten_bind_btPairCachingGhostObject_isActive_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_isActive_0 = Module["_emscripten_bind_btPairCachingGhostObject_isActive_0"] = wasmExports["eq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"] = wasmExports["fq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_isStaticObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isStaticObject_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_isStaticObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isStaticObject_0"] = wasmExports["gq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0 = Module["_emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0"] = wasmExports["hq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_setRestitution_1 = Module["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setRestitution_1 = Module["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"] = wasmExports["iq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setFriction_1 = Module["_emscripten_bind_btPairCachingGhostObject_setFriction_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setFriction_1 = Module["_emscripten_bind_btPairCachingGhostObject_setFriction_1"] = wasmExports["jq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setRollingFriction_1 = Module["_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1 = Module["_emscripten_bind_btPairCachingGhostObject_setRollingFriction_1"] = wasmExports["kq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0 = Module["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0 = Module["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"] = wasmExports["lq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0 = Module["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0 = Module["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"] = wasmExports["mq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"] = wasmExports["nq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1 = Module["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1 = Module["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"] = wasmExports["oq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"] = wasmExports["pq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1"] = wasmExports["qq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1 = Module["_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1"] = wasmExports["rq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_getUserIndex_0 = Module["_emscripten_bind_btPairCachingGhostObject_getUserIndex_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getUserIndex_0 = Module["_emscripten_bind_btPairCachingGhostObject_getUserIndex_0"] = wasmExports["sq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_setUserIndex_1 = Module["_emscripten_bind_btPairCachingGhostObject_setUserIndex_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setUserIndex_1 = Module["_emscripten_bind_btPairCachingGhostObject_setUserIndex_1"] = wasmExports["tq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_getUserPointer_0 = Module["_emscripten_bind_btPairCachingGhostObject_getUserPointer_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getUserPointer_0 = Module["_emscripten_bind_btPairCachingGhostObject_getUserPointer_0"] = wasmExports["uq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_setUserPointer_1 = Module["_emscripten_bind_btPairCachingGhostObject_setUserPointer_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_setUserPointer_1 = Module["_emscripten_bind_btPairCachingGhostObject_setUserPointer_1"] = wasmExports["vq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject_getActivationState_0 = Module["_emscripten_bind_btPairCachingGhostObject_getActivationState_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getActivationState_0 = Module["_emscripten_bind_btPairCachingGhostObject_getActivationState_0"] = wasmExports["wq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0 = Module["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0 = Module["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"] = wasmExports["xq"])(a0);
      var _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1 = Module["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"] = (a0, a1) => (_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1 = Module["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"] = wasmExports["yq"])(a0, a1);
      var _emscripten_bind_btPairCachingGhostObject___destroy___0 = Module["_emscripten_bind_btPairCachingGhostObject___destroy___0"] = (a0) => (_emscripten_bind_btPairCachingGhostObject___destroy___0 = Module["_emscripten_bind_btPairCachingGhostObject___destroy___0"] = wasmExports["zq"])(a0);
      var _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0 = Module["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"] = () => (_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0 = Module["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"] = wasmExports["Aq"])();
      var _emscripten_bind_btGhostPairCallback___destroy___0 = Module["_emscripten_bind_btGhostPairCallback___destroy___0"] = (a0) => (_emscripten_bind_btGhostPairCallback___destroy___0 = Module["_emscripten_bind_btGhostPairCallback___destroy___0"] = wasmExports["Bq"])(a0);
      var _emscripten_bind_btjsContactData_getId_0 = Module["_emscripten_bind_btjsContactData_getId_0"] = (a0) => (_emscripten_bind_btjsContactData_getId_0 = Module["_emscripten_bind_btjsContactData_getId_0"] = wasmExports["Cq"])(a0);
      var _emscripten_bind_btjsContactData_getBodyA_0 = Module["_emscripten_bind_btjsContactData_getBodyA_0"] = (a0) => (_emscripten_bind_btjsContactData_getBodyA_0 = Module["_emscripten_bind_btjsContactData_getBodyA_0"] = wasmExports["Dq"])(a0);
      var _emscripten_bind_btjsContactData_getBodyB_0 = Module["_emscripten_bind_btjsContactData_getBodyB_0"] = (a0) => (_emscripten_bind_btjsContactData_getBodyB_0 = Module["_emscripten_bind_btjsContactData_getBodyB_0"] = wasmExports["Eq"])(a0);
      var _emscripten_bind_btjsContactData_getPosition_0 = Module["_emscripten_bind_btjsContactData_getPosition_0"] = (a0) => (_emscripten_bind_btjsContactData_getPosition_0 = Module["_emscripten_bind_btjsContactData_getPosition_0"] = wasmExports["Fq"])(a0);
      var _emscripten_bind_btjsContactData_getNormalB_0 = Module["_emscripten_bind_btjsContactData_getNormalB_0"] = (a0) => (_emscripten_bind_btjsContactData_getNormalB_0 = Module["_emscripten_bind_btjsContactData_getNormalB_0"] = wasmExports["Gq"])(a0);
      var _emscripten_bind_btjsContactData___destroy___0 = Module["_emscripten_bind_btjsContactData___destroy___0"] = (a0) => (_emscripten_bind_btjsContactData___destroy___0 = Module["_emscripten_bind_btjsContactData___destroy___0"] = wasmExports["Hq"])(a0);
      var _emscripten_bind_btjsDynamicsWorld_btjsDynamicsWorld_4 = Module["_emscripten_bind_btjsDynamicsWorld_btjsDynamicsWorld_4"] = (a0, a1, a2, a3) => (_emscripten_bind_btjsDynamicsWorld_btjsDynamicsWorld_4 = Module["_emscripten_bind_btjsDynamicsWorld_btjsDynamicsWorld_4"] = wasmExports["Iq"])(a0, a1, a2, a3);
      var _emscripten_bind_btjsDynamicsWorld_createCompoundFromGimpactShape_2 = Module["_emscripten_bind_btjsDynamicsWorld_createCompoundFromGimpactShape_2"] = (a0, a1, a2) => (_emscripten_bind_btjsDynamicsWorld_createCompoundFromGimpactShape_2 = Module["_emscripten_bind_btjsDynamicsWorld_createCompoundFromGimpactShape_2"] = wasmExports["Jq"])(a0, a1, a2);
      var _emscripten_bind_btjsDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btjsDynamicsWorld_getDispatcher_0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld_getDispatcher_0 = Module["_emscripten_bind_btjsDynamicsWorld_getDispatcher_0"] = wasmExports["Kq"])(a0);
      var _emscripten_bind_btjsDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btjsDynamicsWorld_rayTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btjsDynamicsWorld_rayTest_3 = Module["_emscripten_bind_btjsDynamicsWorld_rayTest_3"] = wasmExports["Lq"])(a0, a1, a2, a3);
      var _emscripten_bind_btjsDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btjsDynamicsWorld_getPairCache_0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld_getPairCache_0 = Module["_emscripten_bind_btjsDynamicsWorld_getPairCache_0"] = wasmExports["Mq"])(a0);
      var _emscripten_bind_btjsDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btjsDynamicsWorld_getDispatchInfo_0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld_getDispatchInfo_0 = Module["_emscripten_bind_btjsDynamicsWorld_getDispatchInfo_0"] = wasmExports["Nq"])(a0);
      var _emscripten_bind_btjsDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btjsDynamicsWorld_addCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_addCollisionObject_1 = Module["_emscripten_bind_btjsDynamicsWorld_addCollisionObject_1"] = wasmExports["Oq"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btjsDynamicsWorld_addCollisionObject_2"] = (a0, a1, a2) => (_emscripten_bind_btjsDynamicsWorld_addCollisionObject_2 = Module["_emscripten_bind_btjsDynamicsWorld_addCollisionObject_2"] = wasmExports["Pq"])(a0, a1, a2);
      var _emscripten_bind_btjsDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btjsDynamicsWorld_addCollisionObject_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btjsDynamicsWorld_addCollisionObject_3 = Module["_emscripten_bind_btjsDynamicsWorld_addCollisionObject_3"] = wasmExports["Qq"])(a0, a1, a2, a3);
      var _emscripten_bind_btjsDynamicsWorld_removeCollisionObject_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeCollisionObject_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_removeCollisionObject_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeCollisionObject_1"] = wasmExports["Rq"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btjsDynamicsWorld_getBroadphase_0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld_getBroadphase_0 = Module["_emscripten_bind_btjsDynamicsWorld_getBroadphase_0"] = wasmExports["Sq"])(a0);
      var _emscripten_bind_btjsDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btjsDynamicsWorld_convexSweepTest_5"] = (a0, a1, a2, a3, a4, a5) => (_emscripten_bind_btjsDynamicsWorld_convexSweepTest_5 = Module["_emscripten_bind_btjsDynamicsWorld_convexSweepTest_5"] = wasmExports["Tq"])(a0, a1, a2, a3, a4, a5);
      var _emscripten_bind_btjsDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btjsDynamicsWorld_contactPairTest_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btjsDynamicsWorld_contactPairTest_3 = Module["_emscripten_bind_btjsDynamicsWorld_contactPairTest_3"] = wasmExports["Uq"])(a0, a1, a2, a3);
      var _emscripten_bind_btjsDynamicsWorld_contactTest_2 = Module["_emscripten_bind_btjsDynamicsWorld_contactTest_2"] = (a0, a1, a2) => (_emscripten_bind_btjsDynamicsWorld_contactTest_2 = Module["_emscripten_bind_btjsDynamicsWorld_contactTest_2"] = wasmExports["Vq"])(a0, a1, a2);
      var _emscripten_bind_btjsDynamicsWorld_updateSingleAabb_1 = Module["_emscripten_bind_btjsDynamicsWorld_updateSingleAabb_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_updateSingleAabb_1 = Module["_emscripten_bind_btjsDynamicsWorld_updateSingleAabb_1"] = wasmExports["Wq"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_setGravity_1 = Module["_emscripten_bind_btjsDynamicsWorld_setGravity_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_setGravity_1 = Module["_emscripten_bind_btjsDynamicsWorld_setGravity_1"] = wasmExports["Xq"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_getGravity_0 = Module["_emscripten_bind_btjsDynamicsWorld_getGravity_0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld_getGravity_0 = Module["_emscripten_bind_btjsDynamicsWorld_getGravity_0"] = wasmExports["Yq"])(a0);
      var _emscripten_bind_btjsDynamicsWorld_addRigidBody_1 = Module["_emscripten_bind_btjsDynamicsWorld_addRigidBody_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_addRigidBody_1 = Module["_emscripten_bind_btjsDynamicsWorld_addRigidBody_1"] = wasmExports["Zq"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_addRigidBody_3 = Module["_emscripten_bind_btjsDynamicsWorld_addRigidBody_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btjsDynamicsWorld_addRigidBody_3 = Module["_emscripten_bind_btjsDynamicsWorld_addRigidBody_3"] = wasmExports["_q"])(a0, a1, a2, a3);
      var _emscripten_bind_btjsDynamicsWorld_removeRigidBody_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeRigidBody_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_removeRigidBody_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeRigidBody_1"] = wasmExports["$q"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_addConstraint_1 = Module["_emscripten_bind_btjsDynamicsWorld_addConstraint_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_addConstraint_1 = Module["_emscripten_bind_btjsDynamicsWorld_addConstraint_1"] = wasmExports["ar"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_addConstraint_2 = Module["_emscripten_bind_btjsDynamicsWorld_addConstraint_2"] = (a0, a1, a2) => (_emscripten_bind_btjsDynamicsWorld_addConstraint_2 = Module["_emscripten_bind_btjsDynamicsWorld_addConstraint_2"] = wasmExports["br"])(a0, a1, a2);
      var _emscripten_bind_btjsDynamicsWorld_removeConstraint_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeConstraint_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_removeConstraint_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeConstraint_1"] = wasmExports["cr"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_stepSimulation_1 = Module["_emscripten_bind_btjsDynamicsWorld_stepSimulation_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_stepSimulation_1 = Module["_emscripten_bind_btjsDynamicsWorld_stepSimulation_1"] = wasmExports["dr"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_stepSimulation_2 = Module["_emscripten_bind_btjsDynamicsWorld_stepSimulation_2"] = (a0, a1, a2) => (_emscripten_bind_btjsDynamicsWorld_stepSimulation_2 = Module["_emscripten_bind_btjsDynamicsWorld_stepSimulation_2"] = wasmExports["er"])(a0, a1, a2);
      var _emscripten_bind_btjsDynamicsWorld_stepSimulation_3 = Module["_emscripten_bind_btjsDynamicsWorld_stepSimulation_3"] = (a0, a1, a2, a3) => (_emscripten_bind_btjsDynamicsWorld_stepSimulation_3 = Module["_emscripten_bind_btjsDynamicsWorld_stepSimulation_3"] = wasmExports["fr"])(a0, a1, a2, a3);
      var _emscripten_bind_btjsDynamicsWorld_addAction_1 = Module["_emscripten_bind_btjsDynamicsWorld_addAction_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_addAction_1 = Module["_emscripten_bind_btjsDynamicsWorld_addAction_1"] = wasmExports["gr"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_removeAction_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeAction_1"] = (a0, a1) => (_emscripten_bind_btjsDynamicsWorld_removeAction_1 = Module["_emscripten_bind_btjsDynamicsWorld_removeAction_1"] = wasmExports["hr"])(a0, a1);
      var _emscripten_bind_btjsDynamicsWorld_getSolverInfo_0 = Module["_emscripten_bind_btjsDynamicsWorld_getSolverInfo_0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld_getSolverInfo_0 = Module["_emscripten_bind_btjsDynamicsWorld_getSolverInfo_0"] = wasmExports["ir"])(a0);
      var _emscripten_bind_btjsDynamicsWorld___destroy___0 = Module["_emscripten_bind_btjsDynamicsWorld___destroy___0"] = (a0) => (_emscripten_bind_btjsDynamicsWorld___destroy___0 = Module["_emscripten_bind_btjsDynamicsWorld___destroy___0"] = wasmExports["jr"])(a0);
      var _emscripten_bind_btGImpactMeshShape_btGImpactMeshShape_1 = Module["_emscripten_bind_btGImpactMeshShape_btGImpactMeshShape_1"] = (a0) => (_emscripten_bind_btGImpactMeshShape_btGImpactMeshShape_1 = Module["_emscripten_bind_btGImpactMeshShape_btGImpactMeshShape_1"] = wasmExports["kr"])(a0);
      var _emscripten_bind_btGImpactMeshShape_updateBound_0 = Module["_emscripten_bind_btGImpactMeshShape_updateBound_0"] = (a0) => (_emscripten_bind_btGImpactMeshShape_updateBound_0 = Module["_emscripten_bind_btGImpactMeshShape_updateBound_0"] = wasmExports["lr"])(a0);
      var _emscripten_bind_btGImpactMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btGImpactMeshShape_setLocalScaling_1"] = (a0, a1) => (_emscripten_bind_btGImpactMeshShape_setLocalScaling_1 = Module["_emscripten_bind_btGImpactMeshShape_setLocalScaling_1"] = wasmExports["mr"])(a0, a1);
      var _emscripten_bind_btGImpactMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btGImpactMeshShape_getLocalScaling_0"] = (a0) => (_emscripten_bind_btGImpactMeshShape_getLocalScaling_0 = Module["_emscripten_bind_btGImpactMeshShape_getLocalScaling_0"] = wasmExports["nr"])(a0);
      var _emscripten_bind_btGImpactMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btGImpactMeshShape_calculateLocalInertia_2"] = (a0, a1, a2) => (_emscripten_bind_btGImpactMeshShape_calculateLocalInertia_2 = Module["_emscripten_bind_btGImpactMeshShape_calculateLocalInertia_2"] = wasmExports["or"])(a0, a1, a2);
      var _emscripten_bind_btGImpactMeshShape___destroy___0 = Module["_emscripten_bind_btGImpactMeshShape___destroy___0"] = (a0) => (_emscripten_bind_btGImpactMeshShape___destroy___0 = Module["_emscripten_bind_btGImpactMeshShape___destroy___0"] = wasmExports["pr"])(a0);
      var _emscripten_enum_PHY_ScalarType_PHY_FLOAT = Module["_emscripten_enum_PHY_ScalarType_PHY_FLOAT"] = () => (_emscripten_enum_PHY_ScalarType_PHY_FLOAT = Module["_emscripten_enum_PHY_ScalarType_PHY_FLOAT"] = wasmExports["qr"])();
      var _emscripten_enum_PHY_ScalarType_PHY_DOUBLE = Module["_emscripten_enum_PHY_ScalarType_PHY_DOUBLE"] = () => (_emscripten_enum_PHY_ScalarType_PHY_DOUBLE = Module["_emscripten_enum_PHY_ScalarType_PHY_DOUBLE"] = wasmExports["rr"])();
      var _emscripten_enum_PHY_ScalarType_PHY_INTEGER = Module["_emscripten_enum_PHY_ScalarType_PHY_INTEGER"] = () => (_emscripten_enum_PHY_ScalarType_PHY_INTEGER = Module["_emscripten_enum_PHY_ScalarType_PHY_INTEGER"] = wasmExports["sr"])();
      var _emscripten_enum_PHY_ScalarType_PHY_SHORT = Module["_emscripten_enum_PHY_ScalarType_PHY_SHORT"] = () => (_emscripten_enum_PHY_ScalarType_PHY_SHORT = Module["_emscripten_enum_PHY_ScalarType_PHY_SHORT"] = wasmExports["tr"])();
      var _emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88 = Module["_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88"] = () => (_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88 = Module["_emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88"] = wasmExports["ur"])();
      var _emscripten_enum_PHY_ScalarType_PHY_UCHAR = Module["_emscripten_enum_PHY_ScalarType_PHY_UCHAR"] = () => (_emscripten_enum_PHY_ScalarType_PHY_UCHAR = Module["_emscripten_enum_PHY_ScalarType_PHY_UCHAR"] = wasmExports["vr"])();
      var _emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP"] = () => (_emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP"] = wasmExports["wr"])();
      var _emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP"] = () => (_emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP"] = wasmExports["xr"])();
      var _emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM"] = () => (_emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM"] = wasmExports["yr"])();
      var _emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM"] = () => (_emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM = Module["_emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM"] = wasmExports["zr"])();
      var _setContactCallback = Module["_setContactCallback"] = (a0) => (_setContactCallback = Module["_setContactCallback"] = wasmExports["Br"])(a0);
      var ___errno_location = () => (___errno_location = wasmExports["__errno_location"])();
      var stackSave = () => (stackSave = wasmExports["Cr"])();
      var stackRestore = (a0) => (stackRestore = wasmExports["Dr"])(a0);
      var stackAlloc = (a0) => (stackAlloc = wasmExports["Er"])(a0);
      var ___cxa_is_pointer_type = (a0) => (___cxa_is_pointer_type = wasmExports["Fr"])(a0);
      var ___start_em_js = Module["___start_em_js"] = 24970;
      var ___stop_em_js = Module["___stop_em_js"] = 25068;
      Module["cwrap"] = cwrap;
      Module["addFunction"] = addFunction;
      var calledRun;
      dependenciesFulfilled = function runCaller() {
        if (!calledRun)
          run();
        if (!calledRun)
          dependenciesFulfilled = runCaller;
      };
      function run() {
        if (runDependencies > 0) {
          return;
        }
        preRun();
        if (runDependencies > 0) {
          return;
        }
        function doRun() {
          if (calledRun)
            return;
          calledRun = true;
          Module["calledRun"] = true;
          if (ABORT)
            return;
          initRuntime();
          readyPromiseResolve(Module);
          if (Module["onRuntimeInitialized"])
            Module["onRuntimeInitialized"]();
          postRun();
        }
        if (Module["setStatus"]) {
          Module["setStatus"]("Running...");
          setTimeout(function() {
            setTimeout(function() {
              Module["setStatus"]("");
            }, 1);
            doRun();
          }, 1);
        } else {
          doRun();
        }
      }
      if (Module["preInit"]) {
        if (typeof Module["preInit"] == "function")
          Module["preInit"] = [Module["preInit"]];
        while (Module["preInit"].length > 0) {
          Module["preInit"].pop()();
        }
      }
      run();
      function WrapperObject() {}
      WrapperObject.prototype = Object.create(WrapperObject.prototype);
      WrapperObject.prototype.constructor = WrapperObject;
      WrapperObject.prototype.__class__ = WrapperObject;
      WrapperObject.__cache__ = {};
      Module["WrapperObject"] = WrapperObject;
      function getCache(__class__) {
        return (__class__ || WrapperObject).__cache__;
      }
      Module["getCache"] = getCache;
      function wrapPointer(ptr, __class__) {
        var cache = getCache(__class__);
        var ret = cache[ptr];
        if (ret)
          return ret;
        ret = Object.create((__class__ || WrapperObject).prototype);
        ret.ptr = ptr;
        return cache[ptr] = ret;
      }
      Module["wrapPointer"] = wrapPointer;
      function castObject(obj, __class__) {
        return wrapPointer(obj.ptr, __class__);
      }
      Module["castObject"] = castObject;
      Module["NULL"] = wrapPointer(0);
      function destroy(obj) {
        if (!obj["__destroy__"])
          throw "Error: Cannot destroy object. (Did you create it yourself?)";
        obj["__destroy__"]();
        delete getCache(obj.__class__)[obj.ptr];
      }
      Module["destroy"] = destroy;
      function compare(obj1, obj2) {
        return obj1.ptr === obj2.ptr;
      }
      Module["compare"] = compare;
      function getPointer(obj) {
        return obj.ptr;
      }
      Module["getPointer"] = getPointer;
      function getClass(obj) {
        return obj.__class__;
      }
      Module["getClass"] = getClass;
      var ensureCache = { buffer: 0, size: 0, pos: 0, temps: [], needed: 0, prepare: function() {
        if (ensureCache.needed) {
          for (var i = 0;i < ensureCache.temps.length; i++) {
            Module["_free"](ensureCache.temps[i]);
          }
          ensureCache.temps.length = 0;
          Module["_free"](ensureCache.buffer);
          ensureCache.buffer = 0;
          ensureCache.size += ensureCache.needed;
          ensureCache.needed = 0;
        }
        if (!ensureCache.buffer) {
          ensureCache.size += 128;
          ensureCache.buffer = Module["_malloc"](ensureCache.size);
          assert(ensureCache.buffer);
        }
        ensureCache.pos = 0;
      }, alloc: function(array, view) {
        assert(ensureCache.buffer);
        var bytes = view.BYTES_PER_ELEMENT;
        var len = array.length * bytes;
        len = len + 7 & -8;
        var ret;
        if (ensureCache.pos + len >= ensureCache.size) {
          assert(len > 0);
          ensureCache.needed += len;
          ret = Module["_malloc"](len);
          ensureCache.temps.push(ret);
        } else {
          ret = ensureCache.buffer + ensureCache.pos;
          ensureCache.pos += len;
        }
        return ret;
      }, copy: function(array, view, offset) {
        offset >>>= 0;
        var bytes = view.BYTES_PER_ELEMENT;
        switch (bytes) {
          case 2:
            offset >>>= 1;
            break;
          case 4:
            offset >>>= 2;
            break;
          case 8:
            offset >>>= 3;
            break;
        }
        for (var i = 0;i < array.length; i++) {
          view[offset + i] = array[i];
        }
      } };
      function ensureFloat32(value) {
        if (typeof value === "object") {
          var offset = ensureCache.alloc(value, HEAPF32);
          ensureCache.copy(value, HEAPF32, offset);
          return offset;
        }
        return value;
      }
      function btCollisionShape() {
        throw "cannot construct a btCollisionShape, no constructor in IDL";
      }
      btCollisionShape.prototype = Object.create(WrapperObject.prototype);
      btCollisionShape.prototype.constructor = btCollisionShape;
      btCollisionShape.prototype.__class__ = btCollisionShape;
      btCollisionShape.__cache__ = {};
      Module["btCollisionShape"] = btCollisionShape;
      btCollisionShape.prototype["setLocalScaling"] = btCollisionShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCollisionShape_setLocalScaling_1(self2, scaling);
      };
      btCollisionShape.prototype["getLocalScaling"] = btCollisionShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionShape_getLocalScaling_0(self2), btVector3);
      };
      btCollisionShape.prototype["calculateLocalInertia"] = btCollisionShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCollisionShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCollisionShape.prototype["setMargin"] = btCollisionShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCollisionShape_setMargin_1(self2, margin);
      };
      btCollisionShape.prototype["getMargin"] = btCollisionShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCollisionShape_getMargin_0(self2);
      };
      btCollisionShape.prototype["__destroy__"] = btCollisionShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCollisionShape___destroy___0(self2);
      };
      function btCollisionWorld() {
        throw "cannot construct a btCollisionWorld, no constructor in IDL";
      }
      btCollisionWorld.prototype = Object.create(WrapperObject.prototype);
      btCollisionWorld.prototype.constructor = btCollisionWorld;
      btCollisionWorld.prototype.__class__ = btCollisionWorld;
      btCollisionWorld.__cache__ = {};
      Module["btCollisionWorld"] = btCollisionWorld;
      btCollisionWorld.prototype["getDispatcher"] = btCollisionWorld.prototype.getDispatcher = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatcher_0(self2), btDispatcher);
      };
      btCollisionWorld.prototype["rayTest"] = btCollisionWorld.prototype.rayTest = function(rayFromWorld, rayToWorld, resultCallback) {
        var self2 = this.ptr;
        if (rayFromWorld && typeof rayFromWorld === "object")
          rayFromWorld = rayFromWorld.ptr;
        if (rayToWorld && typeof rayToWorld === "object")
          rayToWorld = rayToWorld.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btCollisionWorld_rayTest_3(self2, rayFromWorld, rayToWorld, resultCallback);
      };
      btCollisionWorld.prototype["getPairCache"] = btCollisionWorld.prototype.getPairCache = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionWorld_getPairCache_0(self2), btOverlappingPairCache);
      };
      btCollisionWorld.prototype["getDispatchInfo"] = btCollisionWorld.prototype.getDispatchInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatchInfo_0(self2), btDispatcherInfo);
      };
      btCollisionWorld.prototype["addCollisionObject"] = btCollisionWorld.prototype.addCollisionObject = function(collisionObject, collisionFilterGroup, collisionFilterMask) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        if (collisionFilterGroup && typeof collisionFilterGroup === "object")
          collisionFilterGroup = collisionFilterGroup.ptr;
        if (collisionFilterMask && typeof collisionFilterMask === "object")
          collisionFilterMask = collisionFilterMask.ptr;
        if (collisionFilterGroup === undefined) {
          _emscripten_bind_btCollisionWorld_addCollisionObject_1(self2, collisionObject);
          return;
        }
        if (collisionFilterMask === undefined) {
          _emscripten_bind_btCollisionWorld_addCollisionObject_2(self2, collisionObject, collisionFilterGroup);
          return;
        }
        _emscripten_bind_btCollisionWorld_addCollisionObject_3(self2, collisionObject, collisionFilterGroup, collisionFilterMask);
      };
      btCollisionWorld.prototype["removeCollisionObject"] = btCollisionWorld.prototype.removeCollisionObject = function(collisionObject) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        _emscripten_bind_btCollisionWorld_removeCollisionObject_1(self2, collisionObject);
      };
      btCollisionWorld.prototype["getBroadphase"] = btCollisionWorld.prototype.getBroadphase = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionWorld_getBroadphase_0(self2), btBroadphaseInterface);
      };
      btCollisionWorld.prototype["convexSweepTest"] = btCollisionWorld.prototype.convexSweepTest = function(castShape, from, to, resultCallback, allowedCcdPenetration) {
        var self2 = this.ptr;
        if (castShape && typeof castShape === "object")
          castShape = castShape.ptr;
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        if (allowedCcdPenetration && typeof allowedCcdPenetration === "object")
          allowedCcdPenetration = allowedCcdPenetration.ptr;
        _emscripten_bind_btCollisionWorld_convexSweepTest_5(self2, castShape, from, to, resultCallback, allowedCcdPenetration);
      };
      btCollisionWorld.prototype["contactPairTest"] = btCollisionWorld.prototype.contactPairTest = function(colObjA, colObjB, resultCallback) {
        var self2 = this.ptr;
        if (colObjA && typeof colObjA === "object")
          colObjA = colObjA.ptr;
        if (colObjB && typeof colObjB === "object")
          colObjB = colObjB.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btCollisionWorld_contactPairTest_3(self2, colObjA, colObjB, resultCallback);
      };
      btCollisionWorld.prototype["contactTest"] = btCollisionWorld.prototype.contactTest = function(colObj, resultCallback) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btCollisionWorld_contactTest_2(self2, colObj, resultCallback);
      };
      btCollisionWorld.prototype["updateSingleAabb"] = btCollisionWorld.prototype.updateSingleAabb = function(colObj) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        _emscripten_bind_btCollisionWorld_updateSingleAabb_1(self2, colObj);
      };
      btCollisionWorld.prototype["__destroy__"] = btCollisionWorld.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCollisionWorld___destroy___0(self2);
      };
      function btCollisionObject() {
        throw "cannot construct a btCollisionObject, no constructor in IDL";
      }
      btCollisionObject.prototype = Object.create(WrapperObject.prototype);
      btCollisionObject.prototype.constructor = btCollisionObject;
      btCollisionObject.prototype.__class__ = btCollisionObject;
      btCollisionObject.__cache__ = {};
      Module["btCollisionObject"] = btCollisionObject;
      btCollisionObject.prototype["setAnisotropicFriction"] = btCollisionObject.prototype.setAnisotropicFriction = function(anisotropicFriction, frictionMode) {
        var self2 = this.ptr;
        if (anisotropicFriction && typeof anisotropicFriction === "object")
          anisotropicFriction = anisotropicFriction.ptr;
        if (frictionMode && typeof frictionMode === "object")
          frictionMode = frictionMode.ptr;
        _emscripten_bind_btCollisionObject_setAnisotropicFriction_2(self2, anisotropicFriction, frictionMode);
      };
      btCollisionObject.prototype["getCollisionShape"] = btCollisionObject.prototype.getCollisionShape = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionObject_getCollisionShape_0(self2), btCollisionShape);
      };
      btCollisionObject.prototype["setContactProcessingThreshold"] = btCollisionObject.prototype.setContactProcessingThreshold = function(contactProcessingThreshold) {
        var self2 = this.ptr;
        if (contactProcessingThreshold && typeof contactProcessingThreshold === "object")
          contactProcessingThreshold = contactProcessingThreshold.ptr;
        _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1(self2, contactProcessingThreshold);
      };
      btCollisionObject.prototype["setActivationState"] = btCollisionObject.prototype.setActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btCollisionObject_setActivationState_1(self2, newState);
      };
      btCollisionObject.prototype["forceActivationState"] = btCollisionObject.prototype.forceActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btCollisionObject_forceActivationState_1(self2, newState);
      };
      btCollisionObject.prototype["activate"] = btCollisionObject.prototype.activate = function(forceActivation) {
        var self2 = this.ptr;
        if (forceActivation && typeof forceActivation === "object")
          forceActivation = forceActivation.ptr;
        if (forceActivation === undefined) {
          _emscripten_bind_btCollisionObject_activate_0(self2);
          return;
        }
        _emscripten_bind_btCollisionObject_activate_1(self2, forceActivation);
      };
      btCollisionObject.prototype["isActive"] = btCollisionObject.prototype.isActive = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btCollisionObject_isActive_0(self2);
      };
      btCollisionObject.prototype["isKinematicObject"] = btCollisionObject.prototype.isKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btCollisionObject_isKinematicObject_0(self2);
      };
      btCollisionObject.prototype["isStaticObject"] = btCollisionObject.prototype.isStaticObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btCollisionObject_isStaticObject_0(self2);
      };
      btCollisionObject.prototype["isStaticOrKinematicObject"] = btCollisionObject.prototype.isStaticOrKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0(self2);
      };
      btCollisionObject.prototype["setRestitution"] = btCollisionObject.prototype.setRestitution = function(rest) {
        var self2 = this.ptr;
        if (rest && typeof rest === "object")
          rest = rest.ptr;
        _emscripten_bind_btCollisionObject_setRestitution_1(self2, rest);
      };
      btCollisionObject.prototype["setFriction"] = btCollisionObject.prototype.setFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btCollisionObject_setFriction_1(self2, frict);
      };
      btCollisionObject.prototype["setRollingFriction"] = btCollisionObject.prototype.setRollingFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btCollisionObject_setRollingFriction_1(self2, frict);
      };
      btCollisionObject.prototype["getWorldTransform"] = btCollisionObject.prototype.getWorldTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionObject_getWorldTransform_0(self2), btTransform);
      };
      btCollisionObject.prototype["getCollisionFlags"] = btCollisionObject.prototype.getCollisionFlags = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCollisionObject_getCollisionFlags_0(self2);
      };
      btCollisionObject.prototype["setCollisionFlags"] = btCollisionObject.prototype.setCollisionFlags = function(flags) {
        var self2 = this.ptr;
        if (flags && typeof flags === "object")
          flags = flags.ptr;
        _emscripten_bind_btCollisionObject_setCollisionFlags_1(self2, flags);
      };
      btCollisionObject.prototype["setWorldTransform"] = btCollisionObject.prototype.setWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btCollisionObject_setWorldTransform_1(self2, worldTrans);
      };
      btCollisionObject.prototype["setCollisionShape"] = btCollisionObject.prototype.setCollisionShape = function(collisionShape) {
        var self2 = this.ptr;
        if (collisionShape && typeof collisionShape === "object")
          collisionShape = collisionShape.ptr;
        _emscripten_bind_btCollisionObject_setCollisionShape_1(self2, collisionShape);
      };
      btCollisionObject.prototype["setCcdMotionThreshold"] = btCollisionObject.prototype.setCcdMotionThreshold = function(ccdMotionThreshold) {
        var self2 = this.ptr;
        if (ccdMotionThreshold && typeof ccdMotionThreshold === "object")
          ccdMotionThreshold = ccdMotionThreshold.ptr;
        _emscripten_bind_btCollisionObject_setCcdMotionThreshold_1(self2, ccdMotionThreshold);
      };
      btCollisionObject.prototype["setCcdSweptSphereRadius"] = btCollisionObject.prototype.setCcdSweptSphereRadius = function(radius) {
        var self2 = this.ptr;
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        _emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1(self2, radius);
      };
      btCollisionObject.prototype["getUserIndex"] = btCollisionObject.prototype.getUserIndex = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCollisionObject_getUserIndex_0(self2);
      };
      btCollisionObject.prototype["setUserIndex"] = btCollisionObject.prototype.setUserIndex = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        _emscripten_bind_btCollisionObject_setUserIndex_1(self2, index);
      };
      btCollisionObject.prototype["getUserPointer"] = btCollisionObject.prototype.getUserPointer = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCollisionObject_getUserPointer_0(self2), VoidPtr);
      };
      btCollisionObject.prototype["setUserPointer"] = btCollisionObject.prototype.setUserPointer = function(userPointer) {
        var self2 = this.ptr;
        if (userPointer && typeof userPointer === "object")
          userPointer = userPointer.ptr;
        _emscripten_bind_btCollisionObject_setUserPointer_1(self2, userPointer);
      };
      btCollisionObject.prototype["getActivationState"] = btCollisionObject.prototype.getActivationState = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCollisionObject_getActivationState_0(self2);
      };
      btCollisionObject.prototype["__destroy__"] = btCollisionObject.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCollisionObject___destroy___0(self2);
      };
      function btConcaveShape() {
        throw "cannot construct a btConcaveShape, no constructor in IDL";
      }
      btConcaveShape.prototype = Object.create(btCollisionShape.prototype);
      btConcaveShape.prototype.constructor = btConcaveShape;
      btConcaveShape.prototype.__class__ = btConcaveShape;
      btConcaveShape.__cache__ = {};
      Module["btConcaveShape"] = btConcaveShape;
      btConcaveShape.prototype["setLocalScaling"] = btConcaveShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConcaveShape_setLocalScaling_1(self2, scaling);
      };
      btConcaveShape.prototype["getLocalScaling"] = btConcaveShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConcaveShape_getLocalScaling_0(self2), btVector3);
      };
      btConcaveShape.prototype["calculateLocalInertia"] = btConcaveShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConcaveShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConcaveShape.prototype["__destroy__"] = btConcaveShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConcaveShape___destroy___0(self2);
      };
      function btTypedConstraint() {
        throw "cannot construct a btTypedConstraint, no constructor in IDL";
      }
      btTypedConstraint.prototype = Object.create(WrapperObject.prototype);
      btTypedConstraint.prototype.constructor = btTypedConstraint;
      btTypedConstraint.prototype.__class__ = btTypedConstraint;
      btTypedConstraint.__cache__ = {};
      Module["btTypedConstraint"] = btTypedConstraint;
      btTypedConstraint.prototype["enableFeedback"] = btTypedConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btTypedConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btTypedConstraint.prototype["getBreakingImpulseThreshold"] = btTypedConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btTypedConstraint.prototype["setBreakingImpulseThreshold"] = btTypedConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btTypedConstraint.prototype["getParam"] = btTypedConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btTypedConstraint_getParam_2(self2, num, axis);
      };
      btTypedConstraint.prototype["setParam"] = btTypedConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btTypedConstraint_setParam_3(self2, num, value, axis);
      };
      btTypedConstraint.prototype["__destroy__"] = btTypedConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btTypedConstraint___destroy___0(self2);
      };
      function btDynamicsWorld() {
        throw "cannot construct a btDynamicsWorld, no constructor in IDL";
      }
      btDynamicsWorld.prototype = Object.create(btCollisionWorld.prototype);
      btDynamicsWorld.prototype.constructor = btDynamicsWorld;
      btDynamicsWorld.prototype.__class__ = btDynamicsWorld;
      btDynamicsWorld.__cache__ = {};
      Module["btDynamicsWorld"] = btDynamicsWorld;
      btDynamicsWorld.prototype["addAction"] = btDynamicsWorld.prototype.addAction = function(action) {
        var self2 = this.ptr;
        if (action && typeof action === "object")
          action = action.ptr;
        _emscripten_bind_btDynamicsWorld_addAction_1(self2, action);
      };
      btDynamicsWorld.prototype["removeAction"] = btDynamicsWorld.prototype.removeAction = function(action) {
        var self2 = this.ptr;
        if (action && typeof action === "object")
          action = action.ptr;
        _emscripten_bind_btDynamicsWorld_removeAction_1(self2, action);
      };
      btDynamicsWorld.prototype["getSolverInfo"] = btDynamicsWorld.prototype.getSolverInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDynamicsWorld_getSolverInfo_0(self2), btContactSolverInfo);
      };
      btDynamicsWorld.prototype["getDispatcher"] = btDynamicsWorld.prototype.getDispatcher = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatcher_0(self2), btDispatcher);
      };
      btDynamicsWorld.prototype["rayTest"] = btDynamicsWorld.prototype.rayTest = function(rayFromWorld, rayToWorld, resultCallback) {
        var self2 = this.ptr;
        if (rayFromWorld && typeof rayFromWorld === "object")
          rayFromWorld = rayFromWorld.ptr;
        if (rayToWorld && typeof rayToWorld === "object")
          rayToWorld = rayToWorld.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btDynamicsWorld_rayTest_3(self2, rayFromWorld, rayToWorld, resultCallback);
      };
      btDynamicsWorld.prototype["getPairCache"] = btDynamicsWorld.prototype.getPairCache = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDynamicsWorld_getPairCache_0(self2), btOverlappingPairCache);
      };
      btDynamicsWorld.prototype["getDispatchInfo"] = btDynamicsWorld.prototype.getDispatchInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatchInfo_0(self2), btDispatcherInfo);
      };
      btDynamicsWorld.prototype["addCollisionObject"] = btDynamicsWorld.prototype.addCollisionObject = function(collisionObject, collisionFilterGroup, collisionFilterMask) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        if (collisionFilterGroup && typeof collisionFilterGroup === "object")
          collisionFilterGroup = collisionFilterGroup.ptr;
        if (collisionFilterMask && typeof collisionFilterMask === "object")
          collisionFilterMask = collisionFilterMask.ptr;
        if (collisionFilterGroup === undefined) {
          _emscripten_bind_btDynamicsWorld_addCollisionObject_1(self2, collisionObject);
          return;
        }
        if (collisionFilterMask === undefined) {
          _emscripten_bind_btDynamicsWorld_addCollisionObject_2(self2, collisionObject, collisionFilterGroup);
          return;
        }
        _emscripten_bind_btDynamicsWorld_addCollisionObject_3(self2, collisionObject, collisionFilterGroup, collisionFilterMask);
      };
      btDynamicsWorld.prototype["removeCollisionObject"] = btDynamicsWorld.prototype.removeCollisionObject = function(collisionObject) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        _emscripten_bind_btDynamicsWorld_removeCollisionObject_1(self2, collisionObject);
      };
      btDynamicsWorld.prototype["getBroadphase"] = btDynamicsWorld.prototype.getBroadphase = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDynamicsWorld_getBroadphase_0(self2), btBroadphaseInterface);
      };
      btDynamicsWorld.prototype["convexSweepTest"] = btDynamicsWorld.prototype.convexSweepTest = function(castShape, from, to, resultCallback, allowedCcdPenetration) {
        var self2 = this.ptr;
        if (castShape && typeof castShape === "object")
          castShape = castShape.ptr;
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        if (allowedCcdPenetration && typeof allowedCcdPenetration === "object")
          allowedCcdPenetration = allowedCcdPenetration.ptr;
        _emscripten_bind_btDynamicsWorld_convexSweepTest_5(self2, castShape, from, to, resultCallback, allowedCcdPenetration);
      };
      btDynamicsWorld.prototype["contactPairTest"] = btDynamicsWorld.prototype.contactPairTest = function(colObjA, colObjB, resultCallback) {
        var self2 = this.ptr;
        if (colObjA && typeof colObjA === "object")
          colObjA = colObjA.ptr;
        if (colObjB && typeof colObjB === "object")
          colObjB = colObjB.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btDynamicsWorld_contactPairTest_3(self2, colObjA, colObjB, resultCallback);
      };
      btDynamicsWorld.prototype["contactTest"] = btDynamicsWorld.prototype.contactTest = function(colObj, resultCallback) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btDynamicsWorld_contactTest_2(self2, colObj, resultCallback);
      };
      btDynamicsWorld.prototype["updateSingleAabb"] = btDynamicsWorld.prototype.updateSingleAabb = function(colObj) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        _emscripten_bind_btDynamicsWorld_updateSingleAabb_1(self2, colObj);
      };
      btDynamicsWorld.prototype["__destroy__"] = btDynamicsWorld.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDynamicsWorld___destroy___0(self2);
      };
      function btVector3(x, y, z) {
        if (x && typeof x === "object")
          x = x.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        if (x === undefined) {
          this.ptr = _emscripten_bind_btVector3_btVector3_0();
          getCache(btVector3)[this.ptr] = this;
          return;
        }
        if (y === undefined) {
          this.ptr = _emscripten_bind_btVector3_btVector3_1(x);
          getCache(btVector3)[this.ptr] = this;
          return;
        }
        if (z === undefined) {
          this.ptr = _emscripten_bind_btVector3_btVector3_2(x, y);
          getCache(btVector3)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btVector3_btVector3_3(x, y, z);
        getCache(btVector3)[this.ptr] = this;
      }
      btVector3.prototype = Object.create(WrapperObject.prototype);
      btVector3.prototype.constructor = btVector3;
      btVector3.prototype.__class__ = btVector3;
      btVector3.__cache__ = {};
      Module["btVector3"] = btVector3;
      btVector3.prototype["length"] = btVector3.prototype.length = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector3_length_0(self2);
      };
      btVector3.prototype["x"] = btVector3.prototype.x = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector3_x_0(self2);
      };
      btVector3.prototype["y"] = btVector3.prototype.y = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector3_y_0(self2);
      };
      btVector3.prototype["z"] = btVector3.prototype.z = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector3_z_0(self2);
      };
      btVector3.prototype["setX"] = btVector3.prototype.setX = function(x) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        _emscripten_bind_btVector3_setX_1(self2, x);
      };
      btVector3.prototype["setY"] = btVector3.prototype.setY = function(y) {
        var self2 = this.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        _emscripten_bind_btVector3_setY_1(self2, y);
      };
      btVector3.prototype["setZ"] = btVector3.prototype.setZ = function(z) {
        var self2 = this.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        _emscripten_bind_btVector3_setZ_1(self2, z);
      };
      btVector3.prototype["setValue"] = btVector3.prototype.setValue = function(x, y, z) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        _emscripten_bind_btVector3_setValue_3(self2, x, y, z);
      };
      btVector3.prototype["normalize"] = btVector3.prototype.normalize = function() {
        var self2 = this.ptr;
        _emscripten_bind_btVector3_normalize_0(self2);
      };
      btVector3.prototype["rotate"] = btVector3.prototype.rotate = function(wAxis, angle) {
        var self2 = this.ptr;
        if (wAxis && typeof wAxis === "object")
          wAxis = wAxis.ptr;
        if (angle && typeof angle === "object")
          angle = angle.ptr;
        return wrapPointer(_emscripten_bind_btVector3_rotate_2(self2, wAxis, angle), btVector3);
      };
      btVector3.prototype["dot"] = btVector3.prototype.dot = function(v) {
        var self2 = this.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        return _emscripten_bind_btVector3_dot_1(self2, v);
      };
      btVector3.prototype["op_mul"] = btVector3.prototype.op_mul = function(x) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        return wrapPointer(_emscripten_bind_btVector3_op_mul_1(self2, x), btVector3);
      };
      btVector3.prototype["op_add"] = btVector3.prototype.op_add = function(v) {
        var self2 = this.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        return wrapPointer(_emscripten_bind_btVector3_op_add_1(self2, v), btVector3);
      };
      btVector3.prototype["op_sub"] = btVector3.prototype.op_sub = function(v) {
        var self2 = this.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        return wrapPointer(_emscripten_bind_btVector3_op_sub_1(self2, v), btVector3);
      };
      btVector3.prototype["__destroy__"] = btVector3.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btVector3___destroy___0(self2);
      };
      function btQuadWord() {
        throw "cannot construct a btQuadWord, no constructor in IDL";
      }
      btQuadWord.prototype = Object.create(WrapperObject.prototype);
      btQuadWord.prototype.constructor = btQuadWord;
      btQuadWord.prototype.__class__ = btQuadWord;
      btQuadWord.__cache__ = {};
      Module["btQuadWord"] = btQuadWord;
      btQuadWord.prototype["x"] = btQuadWord.prototype.x = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuadWord_x_0(self2);
      };
      btQuadWord.prototype["y"] = btQuadWord.prototype.y = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuadWord_y_0(self2);
      };
      btQuadWord.prototype["z"] = btQuadWord.prototype.z = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuadWord_z_0(self2);
      };
      btQuadWord.prototype["w"] = btQuadWord.prototype.w = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuadWord_w_0(self2);
      };
      btQuadWord.prototype["setX"] = btQuadWord.prototype.setX = function(x) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        _emscripten_bind_btQuadWord_setX_1(self2, x);
      };
      btQuadWord.prototype["setY"] = btQuadWord.prototype.setY = function(y) {
        var self2 = this.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        _emscripten_bind_btQuadWord_setY_1(self2, y);
      };
      btQuadWord.prototype["setZ"] = btQuadWord.prototype.setZ = function(z) {
        var self2 = this.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        _emscripten_bind_btQuadWord_setZ_1(self2, z);
      };
      btQuadWord.prototype["setW"] = btQuadWord.prototype.setW = function(w) {
        var self2 = this.ptr;
        if (w && typeof w === "object")
          w = w.ptr;
        _emscripten_bind_btQuadWord_setW_1(self2, w);
      };
      btQuadWord.prototype["__destroy__"] = btQuadWord.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btQuadWord___destroy___0(self2);
      };
      function btMotionState() {
        throw "cannot construct a btMotionState, no constructor in IDL";
      }
      btMotionState.prototype = Object.create(WrapperObject.prototype);
      btMotionState.prototype.constructor = btMotionState;
      btMotionState.prototype.__class__ = btMotionState;
      btMotionState.__cache__ = {};
      Module["btMotionState"] = btMotionState;
      btMotionState.prototype["getWorldTransform"] = btMotionState.prototype.getWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btMotionState_getWorldTransform_1(self2, worldTrans);
      };
      btMotionState.prototype["setWorldTransform"] = btMotionState.prototype.setWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btMotionState_setWorldTransform_1(self2, worldTrans);
      };
      btMotionState.prototype["__destroy__"] = btMotionState.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btMotionState___destroy___0(self2);
      };
      function RayResultCallback() {
        throw "cannot construct a RayResultCallback, no constructor in IDL";
      }
      RayResultCallback.prototype = Object.create(WrapperObject.prototype);
      RayResultCallback.prototype.constructor = RayResultCallback;
      RayResultCallback.prototype.__class__ = RayResultCallback;
      RayResultCallback.__cache__ = {};
      Module["RayResultCallback"] = RayResultCallback;
      RayResultCallback.prototype["hasHit"] = RayResultCallback.prototype.hasHit = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_RayResultCallback_hasHit_0(self2);
      };
      RayResultCallback.prototype["get_m_collisionFilterGroup"] = RayResultCallback.prototype.get_m_collisionFilterGroup = function() {
        var self2 = this.ptr;
        return _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0(self2);
      };
      RayResultCallback.prototype["set_m_collisionFilterGroup"] = RayResultCallback.prototype.set_m_collisionFilterGroup = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1(self2, arg0);
      };
      Object.defineProperty(RayResultCallback.prototype, "m_collisionFilterGroup", { get: RayResultCallback.prototype.get_m_collisionFilterGroup, set: RayResultCallback.prototype.set_m_collisionFilterGroup });
      RayResultCallback.prototype["get_m_collisionFilterMask"] = RayResultCallback.prototype.get_m_collisionFilterMask = function() {
        var self2 = this.ptr;
        return _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0(self2);
      };
      RayResultCallback.prototype["set_m_collisionFilterMask"] = RayResultCallback.prototype.set_m_collisionFilterMask = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1(self2, arg0);
      };
      Object.defineProperty(RayResultCallback.prototype, "m_collisionFilterMask", { get: RayResultCallback.prototype.get_m_collisionFilterMask, set: RayResultCallback.prototype.set_m_collisionFilterMask });
      RayResultCallback.prototype["get_m_closestHitFraction"] = RayResultCallback.prototype.get_m_closestHitFraction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_RayResultCallback_get_m_closestHitFraction_0(self2);
      };
      RayResultCallback.prototype["set_m_closestHitFraction"] = RayResultCallback.prototype.set_m_closestHitFraction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RayResultCallback_set_m_closestHitFraction_1(self2, arg0);
      };
      Object.defineProperty(RayResultCallback.prototype, "m_closestHitFraction", { get: RayResultCallback.prototype.get_m_closestHitFraction, set: RayResultCallback.prototype.set_m_closestHitFraction });
      RayResultCallback.prototype["get_m_collisionObject"] = RayResultCallback.prototype.get_m_collisionObject = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_RayResultCallback_get_m_collisionObject_0(self2), btCollisionObject);
      };
      RayResultCallback.prototype["set_m_collisionObject"] = RayResultCallback.prototype.set_m_collisionObject = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RayResultCallback_set_m_collisionObject_1(self2, arg0);
      };
      Object.defineProperty(RayResultCallback.prototype, "m_collisionObject", { get: RayResultCallback.prototype.get_m_collisionObject, set: RayResultCallback.prototype.set_m_collisionObject });
      RayResultCallback.prototype["__destroy__"] = RayResultCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_RayResultCallback___destroy___0(self2);
      };
      function ContactResultCallback() {
        throw "cannot construct a ContactResultCallback, no constructor in IDL";
      }
      ContactResultCallback.prototype = Object.create(WrapperObject.prototype);
      ContactResultCallback.prototype.constructor = ContactResultCallback;
      ContactResultCallback.prototype.__class__ = ContactResultCallback;
      ContactResultCallback.__cache__ = {};
      Module["ContactResultCallback"] = ContactResultCallback;
      ContactResultCallback.prototype["addSingleResult"] = ContactResultCallback.prototype.addSingleResult = function(cp, colObj0Wrap, partId0, index0, colObj1Wrap, partId1, index1) {
        var self2 = this.ptr;
        if (cp && typeof cp === "object")
          cp = cp.ptr;
        if (colObj0Wrap && typeof colObj0Wrap === "object")
          colObj0Wrap = colObj0Wrap.ptr;
        if (partId0 && typeof partId0 === "object")
          partId0 = partId0.ptr;
        if (index0 && typeof index0 === "object")
          index0 = index0.ptr;
        if (colObj1Wrap && typeof colObj1Wrap === "object")
          colObj1Wrap = colObj1Wrap.ptr;
        if (partId1 && typeof partId1 === "object")
          partId1 = partId1.ptr;
        if (index1 && typeof index1 === "object")
          index1 = index1.ptr;
        return _emscripten_bind_ContactResultCallback_addSingleResult_7(self2, cp, colObj0Wrap, partId0, index0, colObj1Wrap, partId1, index1);
      };
      ContactResultCallback.prototype["__destroy__"] = ContactResultCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_ContactResultCallback___destroy___0(self2);
      };
      function ConvexResultCallback() {
        throw "cannot construct a ConvexResultCallback, no constructor in IDL";
      }
      ConvexResultCallback.prototype = Object.create(WrapperObject.prototype);
      ConvexResultCallback.prototype.constructor = ConvexResultCallback;
      ConvexResultCallback.prototype.__class__ = ConvexResultCallback;
      ConvexResultCallback.__cache__ = {};
      Module["ConvexResultCallback"] = ConvexResultCallback;
      ConvexResultCallback.prototype["hasHit"] = ConvexResultCallback.prototype.hasHit = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_ConvexResultCallback_hasHit_0(self2);
      };
      ConvexResultCallback.prototype["get_m_collisionFilterGroup"] = ConvexResultCallback.prototype.get_m_collisionFilterGroup = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0(self2);
      };
      ConvexResultCallback.prototype["set_m_collisionFilterGroup"] = ConvexResultCallback.prototype.set_m_collisionFilterGroup = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1(self2, arg0);
      };
      Object.defineProperty(ConvexResultCallback.prototype, "m_collisionFilterGroup", { get: ConvexResultCallback.prototype.get_m_collisionFilterGroup, set: ConvexResultCallback.prototype.set_m_collisionFilterGroup });
      ConvexResultCallback.prototype["get_m_collisionFilterMask"] = ConvexResultCallback.prototype.get_m_collisionFilterMask = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0(self2);
      };
      ConvexResultCallback.prototype["set_m_collisionFilterMask"] = ConvexResultCallback.prototype.set_m_collisionFilterMask = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1(self2, arg0);
      };
      Object.defineProperty(ConvexResultCallback.prototype, "m_collisionFilterMask", { get: ConvexResultCallback.prototype.get_m_collisionFilterMask, set: ConvexResultCallback.prototype.set_m_collisionFilterMask });
      ConvexResultCallback.prototype["get_m_closestHitFraction"] = ConvexResultCallback.prototype.get_m_closestHitFraction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0(self2);
      };
      ConvexResultCallback.prototype["set_m_closestHitFraction"] = ConvexResultCallback.prototype.set_m_closestHitFraction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1(self2, arg0);
      };
      Object.defineProperty(ConvexResultCallback.prototype, "m_closestHitFraction", { get: ConvexResultCallback.prototype.get_m_closestHitFraction, set: ConvexResultCallback.prototype.set_m_closestHitFraction });
      ConvexResultCallback.prototype["__destroy__"] = ConvexResultCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_ConvexResultCallback___destroy___0(self2);
      };
      function btConvexShape() {
        throw "cannot construct a btConvexShape, no constructor in IDL";
      }
      btConvexShape.prototype = Object.create(btCollisionShape.prototype);
      btConvexShape.prototype.constructor = btConvexShape;
      btConvexShape.prototype.__class__ = btConvexShape;
      btConvexShape.__cache__ = {};
      Module["btConvexShape"] = btConvexShape;
      btConvexShape.prototype["setLocalScaling"] = btConvexShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConvexShape_setLocalScaling_1(self2, scaling);
      };
      btConvexShape.prototype["getLocalScaling"] = btConvexShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConvexShape_getLocalScaling_0(self2), btVector3);
      };
      btConvexShape.prototype["calculateLocalInertia"] = btConvexShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConvexShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConvexShape.prototype["setMargin"] = btConvexShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btConvexShape_setMargin_1(self2, margin);
      };
      btConvexShape.prototype["getMargin"] = btConvexShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConvexShape_getMargin_0(self2);
      };
      btConvexShape.prototype["__destroy__"] = btConvexShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConvexShape___destroy___0(self2);
      };
      function btCapsuleShape(radius, height) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        if (height && typeof height === "object")
          height = height.ptr;
        this.ptr = _emscripten_bind_btCapsuleShape_btCapsuleShape_2(radius, height);
        getCache(btCapsuleShape)[this.ptr] = this;
      }
      btCapsuleShape.prototype = Object.create(btCollisionShape.prototype);
      btCapsuleShape.prototype.constructor = btCapsuleShape;
      btCapsuleShape.prototype.__class__ = btCapsuleShape;
      btCapsuleShape.__cache__ = {};
      Module["btCapsuleShape"] = btCapsuleShape;
      btCapsuleShape.prototype["setMargin"] = btCapsuleShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCapsuleShape_setMargin_1(self2, margin);
      };
      btCapsuleShape.prototype["getMargin"] = btCapsuleShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShape_getMargin_0(self2);
      };
      btCapsuleShape.prototype["getUpAxis"] = btCapsuleShape.prototype.getUpAxis = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShape_getUpAxis_0(self2);
      };
      btCapsuleShape.prototype["getRadius"] = btCapsuleShape.prototype.getRadius = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShape_getRadius_0(self2);
      };
      btCapsuleShape.prototype["getHalfHeight"] = btCapsuleShape.prototype.getHalfHeight = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShape_getHalfHeight_0(self2);
      };
      btCapsuleShape.prototype["setLocalScaling"] = btCapsuleShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCapsuleShape_setLocalScaling_1(self2, scaling);
      };
      btCapsuleShape.prototype["getLocalScaling"] = btCapsuleShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCapsuleShape_getLocalScaling_0(self2), btVector3);
      };
      btCapsuleShape.prototype["calculateLocalInertia"] = btCapsuleShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCapsuleShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCapsuleShape.prototype["__destroy__"] = btCapsuleShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCapsuleShape___destroy___0(self2);
      };
      function btCylinderShape(halfExtents) {
        if (halfExtents && typeof halfExtents === "object")
          halfExtents = halfExtents.ptr;
        this.ptr = _emscripten_bind_btCylinderShape_btCylinderShape_1(halfExtents);
        getCache(btCylinderShape)[this.ptr] = this;
      }
      btCylinderShape.prototype = Object.create(btCollisionShape.prototype);
      btCylinderShape.prototype.constructor = btCylinderShape;
      btCylinderShape.prototype.__class__ = btCylinderShape;
      btCylinderShape.__cache__ = {};
      Module["btCylinderShape"] = btCylinderShape;
      btCylinderShape.prototype["setMargin"] = btCylinderShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCylinderShape_setMargin_1(self2, margin);
      };
      btCylinderShape.prototype["getMargin"] = btCylinderShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCylinderShape_getMargin_0(self2);
      };
      btCylinderShape.prototype["setLocalScaling"] = btCylinderShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCylinderShape_setLocalScaling_1(self2, scaling);
      };
      btCylinderShape.prototype["getLocalScaling"] = btCylinderShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCylinderShape_getLocalScaling_0(self2), btVector3);
      };
      btCylinderShape.prototype["calculateLocalInertia"] = btCylinderShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCylinderShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCylinderShape.prototype["__destroy__"] = btCylinderShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCylinderShape___destroy___0(self2);
      };
      function btConeShape(radius, height) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        if (height && typeof height === "object")
          height = height.ptr;
        this.ptr = _emscripten_bind_btConeShape_btConeShape_2(radius, height);
        getCache(btConeShape)[this.ptr] = this;
      }
      btConeShape.prototype = Object.create(btCollisionShape.prototype);
      btConeShape.prototype.constructor = btConeShape;
      btConeShape.prototype.__class__ = btConeShape;
      btConeShape.__cache__ = {};
      Module["btConeShape"] = btConeShape;
      btConeShape.prototype["setLocalScaling"] = btConeShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConeShape_setLocalScaling_1(self2, scaling);
      };
      btConeShape.prototype["getLocalScaling"] = btConeShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConeShape_getLocalScaling_0(self2), btVector3);
      };
      btConeShape.prototype["calculateLocalInertia"] = btConeShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConeShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConeShape.prototype["__destroy__"] = btConeShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConeShape___destroy___0(self2);
      };
      function btStridingMeshInterface() {
        throw "cannot construct a btStridingMeshInterface, no constructor in IDL";
      }
      btStridingMeshInterface.prototype = Object.create(WrapperObject.prototype);
      btStridingMeshInterface.prototype.constructor = btStridingMeshInterface;
      btStridingMeshInterface.prototype.__class__ = btStridingMeshInterface;
      btStridingMeshInterface.__cache__ = {};
      Module["btStridingMeshInterface"] = btStridingMeshInterface;
      btStridingMeshInterface.prototype["__destroy__"] = btStridingMeshInterface.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btStridingMeshInterface___destroy___0(self2);
      };
      function btTriangleMeshShape() {
        throw "cannot construct a btTriangleMeshShape, no constructor in IDL";
      }
      btTriangleMeshShape.prototype = Object.create(btConcaveShape.prototype);
      btTriangleMeshShape.prototype.constructor = btTriangleMeshShape;
      btTriangleMeshShape.prototype.__class__ = btTriangleMeshShape;
      btTriangleMeshShape.__cache__ = {};
      Module["btTriangleMeshShape"] = btTriangleMeshShape;
      btTriangleMeshShape.prototype["setLocalScaling"] = btTriangleMeshShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btTriangleMeshShape_setLocalScaling_1(self2, scaling);
      };
      btTriangleMeshShape.prototype["getLocalScaling"] = btTriangleMeshShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btTriangleMeshShape_getLocalScaling_0(self2), btVector3);
      };
      btTriangleMeshShape.prototype["calculateLocalInertia"] = btTriangleMeshShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btTriangleMeshShape.prototype["__destroy__"] = btTriangleMeshShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btTriangleMeshShape___destroy___0(self2);
      };
      function btDispatcher() {
        throw "cannot construct a btDispatcher, no constructor in IDL";
      }
      btDispatcher.prototype = Object.create(WrapperObject.prototype);
      btDispatcher.prototype.constructor = btDispatcher;
      btDispatcher.prototype.__class__ = btDispatcher;
      btDispatcher.__cache__ = {};
      Module["btDispatcher"] = btDispatcher;
      btDispatcher.prototype["getNumManifolds"] = btDispatcher.prototype.getNumManifolds = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcher_getNumManifolds_0(self2);
      };
      btDispatcher.prototype["getManifoldByIndexInternal"] = btDispatcher.prototype.getManifoldByIndexInternal = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1(self2, index), btPersistentManifold);
      };
      btDispatcher.prototype["__destroy__"] = btDispatcher.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDispatcher___destroy___0(self2);
      };
      function btGeneric6DofConstraint(rbA, rbB, frameInA, frameInB, useLinearFrameReferenceFrameA) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (frameInA && typeof frameInA === "object")
          frameInA = frameInA.ptr;
        if (frameInB && typeof frameInB === "object")
          frameInB = frameInB.ptr;
        if (useLinearFrameReferenceFrameA && typeof useLinearFrameReferenceFrameA === "object")
          useLinearFrameReferenceFrameA = useLinearFrameReferenceFrameA.ptr;
        if (frameInB === undefined) {
          this.ptr = _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3(rbA, rbB, frameInA);
          getCache(btGeneric6DofConstraint)[this.ptr] = this;
          return;
        }
        if (useLinearFrameReferenceFrameA === undefined) {
          this.ptr = _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(rbA, rbB, frameInA, frameInB);
          getCache(btGeneric6DofConstraint)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5(rbA, rbB, frameInA, frameInB, useLinearFrameReferenceFrameA);
        getCache(btGeneric6DofConstraint)[this.ptr] = this;
      }
      btGeneric6DofConstraint.prototype = Object.create(btTypedConstraint.prototype);
      btGeneric6DofConstraint.prototype.constructor = btGeneric6DofConstraint;
      btGeneric6DofConstraint.prototype.__class__ = btGeneric6DofConstraint;
      btGeneric6DofConstraint.__cache__ = {};
      Module["btGeneric6DofConstraint"] = btGeneric6DofConstraint;
      btGeneric6DofConstraint.prototype["setLinearLowerLimit"] = btGeneric6DofConstraint.prototype.setLinearLowerLimit = function(linearLower) {
        var self2 = this.ptr;
        if (linearLower && typeof linearLower === "object")
          linearLower = linearLower.ptr;
        _emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1(self2, linearLower);
      };
      btGeneric6DofConstraint.prototype["setLinearUpperLimit"] = btGeneric6DofConstraint.prototype.setLinearUpperLimit = function(linearUpper) {
        var self2 = this.ptr;
        if (linearUpper && typeof linearUpper === "object")
          linearUpper = linearUpper.ptr;
        _emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1(self2, linearUpper);
      };
      btGeneric6DofConstraint.prototype["setAngularLowerLimit"] = btGeneric6DofConstraint.prototype.setAngularLowerLimit = function(angularLower) {
        var self2 = this.ptr;
        if (angularLower && typeof angularLower === "object")
          angularLower = angularLower.ptr;
        _emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1(self2, angularLower);
      };
      btGeneric6DofConstraint.prototype["setAngularUpperLimit"] = btGeneric6DofConstraint.prototype.setAngularUpperLimit = function(angularUpper) {
        var self2 = this.ptr;
        if (angularUpper && typeof angularUpper === "object")
          angularUpper = angularUpper.ptr;
        _emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1(self2, angularUpper);
      };
      btGeneric6DofConstraint.prototype["getFrameOffsetA"] = btGeneric6DofConstraint.prototype.getFrameOffsetA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0(self2), btTransform);
      };
      btGeneric6DofConstraint.prototype["enableFeedback"] = btGeneric6DofConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btGeneric6DofConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btGeneric6DofConstraint.prototype["getBreakingImpulseThreshold"] = btGeneric6DofConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btGeneric6DofConstraint.prototype["setBreakingImpulseThreshold"] = btGeneric6DofConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btGeneric6DofConstraint.prototype["getParam"] = btGeneric6DofConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btGeneric6DofConstraint_getParam_2(self2, num, axis);
      };
      btGeneric6DofConstraint.prototype["setParam"] = btGeneric6DofConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btGeneric6DofConstraint_setParam_3(self2, num, value, axis);
      };
      btGeneric6DofConstraint.prototype["__destroy__"] = btGeneric6DofConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGeneric6DofConstraint___destroy___0(self2);
      };
      function btDiscreteDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration) {
        if (dispatcher && typeof dispatcher === "object")
          dispatcher = dispatcher.ptr;
        if (pairCache && typeof pairCache === "object")
          pairCache = pairCache.ptr;
        if (constraintSolver && typeof constraintSolver === "object")
          constraintSolver = constraintSolver.ptr;
        if (collisionConfiguration && typeof collisionConfiguration === "object")
          collisionConfiguration = collisionConfiguration.ptr;
        this.ptr = _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4(dispatcher, pairCache, constraintSolver, collisionConfiguration);
        getCache(btDiscreteDynamicsWorld)[this.ptr] = this;
      }
      btDiscreteDynamicsWorld.prototype = Object.create(btDynamicsWorld.prototype);
      btDiscreteDynamicsWorld.prototype.constructor = btDiscreteDynamicsWorld;
      btDiscreteDynamicsWorld.prototype.__class__ = btDiscreteDynamicsWorld;
      btDiscreteDynamicsWorld.__cache__ = {};
      Module["btDiscreteDynamicsWorld"] = btDiscreteDynamicsWorld;
      btDiscreteDynamicsWorld.prototype["setGravity"] = btDiscreteDynamicsWorld.prototype.setGravity = function(gravity) {
        var self2 = this.ptr;
        if (gravity && typeof gravity === "object")
          gravity = gravity.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1(self2, gravity);
      };
      btDiscreteDynamicsWorld.prototype["getGravity"] = btDiscreteDynamicsWorld.prototype.getGravity = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0(self2), btVector3);
      };
      btDiscreteDynamicsWorld.prototype["addRigidBody"] = btDiscreteDynamicsWorld.prototype.addRigidBody = function(body, group, mask) {
        var self2 = this.ptr;
        if (body && typeof body === "object")
          body = body.ptr;
        if (group && typeof group === "object")
          group = group.ptr;
        if (mask && typeof mask === "object")
          mask = mask.ptr;
        if (group === undefined) {
          _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1(self2, body);
          return;
        }
        if (mask === undefined) {
          _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(self2, body, group);
          return;
        }
        _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3(self2, body, group, mask);
      };
      btDiscreteDynamicsWorld.prototype["removeRigidBody"] = btDiscreteDynamicsWorld.prototype.removeRigidBody = function(body) {
        var self2 = this.ptr;
        if (body && typeof body === "object")
          body = body.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1(self2, body);
      };
      btDiscreteDynamicsWorld.prototype["addConstraint"] = btDiscreteDynamicsWorld.prototype.addConstraint = function(constraint, disableCollisionsBetweenLinkedBodies) {
        var self2 = this.ptr;
        if (constraint && typeof constraint === "object")
          constraint = constraint.ptr;
        if (disableCollisionsBetweenLinkedBodies && typeof disableCollisionsBetweenLinkedBodies === "object")
          disableCollisionsBetweenLinkedBodies = disableCollisionsBetweenLinkedBodies.ptr;
        if (disableCollisionsBetweenLinkedBodies === undefined) {
          _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1(self2, constraint);
          return;
        }
        _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2(self2, constraint, disableCollisionsBetweenLinkedBodies);
      };
      btDiscreteDynamicsWorld.prototype["removeConstraint"] = btDiscreteDynamicsWorld.prototype.removeConstraint = function(constraint) {
        var self2 = this.ptr;
        if (constraint && typeof constraint === "object")
          constraint = constraint.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1(self2, constraint);
      };
      btDiscreteDynamicsWorld.prototype["stepSimulation"] = btDiscreteDynamicsWorld.prototype.stepSimulation = function(timeStep, maxSubSteps, fixedTimeStep) {
        var self2 = this.ptr;
        if (timeStep && typeof timeStep === "object")
          timeStep = timeStep.ptr;
        if (maxSubSteps && typeof maxSubSteps === "object")
          maxSubSteps = maxSubSteps.ptr;
        if (fixedTimeStep && typeof fixedTimeStep === "object")
          fixedTimeStep = fixedTimeStep.ptr;
        if (maxSubSteps === undefined) {
          return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1(self2, timeStep);
        }
        if (fixedTimeStep === undefined) {
          return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2(self2, timeStep, maxSubSteps);
        }
        return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3(self2, timeStep, maxSubSteps, fixedTimeStep);
      };
      btDiscreteDynamicsWorld.prototype["getDispatcher"] = btDiscreteDynamicsWorld.prototype.getDispatcher = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0(self2), btDispatcher);
      };
      btDiscreteDynamicsWorld.prototype["rayTest"] = btDiscreteDynamicsWorld.prototype.rayTest = function(rayFromWorld, rayToWorld, resultCallback) {
        var self2 = this.ptr;
        if (rayFromWorld && typeof rayFromWorld === "object")
          rayFromWorld = rayFromWorld.ptr;
        if (rayToWorld && typeof rayToWorld === "object")
          rayToWorld = rayToWorld.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3(self2, rayFromWorld, rayToWorld, resultCallback);
      };
      btDiscreteDynamicsWorld.prototype["getPairCache"] = btDiscreteDynamicsWorld.prototype.getPairCache = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0(self2), btOverlappingPairCache);
      };
      btDiscreteDynamicsWorld.prototype["getDispatchInfo"] = btDiscreteDynamicsWorld.prototype.getDispatchInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0(self2), btDispatcherInfo);
      };
      btDiscreteDynamicsWorld.prototype["addCollisionObject"] = btDiscreteDynamicsWorld.prototype.addCollisionObject = function(collisionObject, collisionFilterGroup, collisionFilterMask) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        if (collisionFilterGroup && typeof collisionFilterGroup === "object")
          collisionFilterGroup = collisionFilterGroup.ptr;
        if (collisionFilterMask && typeof collisionFilterMask === "object")
          collisionFilterMask = collisionFilterMask.ptr;
        if (collisionFilterGroup === undefined) {
          _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1(self2, collisionObject);
          return;
        }
        if (collisionFilterMask === undefined) {
          _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2(self2, collisionObject, collisionFilterGroup);
          return;
        }
        _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3(self2, collisionObject, collisionFilterGroup, collisionFilterMask);
      };
      btDiscreteDynamicsWorld.prototype["removeCollisionObject"] = btDiscreteDynamicsWorld.prototype.removeCollisionObject = function(collisionObject) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1(self2, collisionObject);
      };
      btDiscreteDynamicsWorld.prototype["getBroadphase"] = btDiscreteDynamicsWorld.prototype.getBroadphase = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0(self2), btBroadphaseInterface);
      };
      btDiscreteDynamicsWorld.prototype["convexSweepTest"] = btDiscreteDynamicsWorld.prototype.convexSweepTest = function(castShape, from, to, resultCallback, allowedCcdPenetration) {
        var self2 = this.ptr;
        if (castShape && typeof castShape === "object")
          castShape = castShape.ptr;
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        if (allowedCcdPenetration && typeof allowedCcdPenetration === "object")
          allowedCcdPenetration = allowedCcdPenetration.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5(self2, castShape, from, to, resultCallback, allowedCcdPenetration);
      };
      btDiscreteDynamicsWorld.prototype["contactPairTest"] = btDiscreteDynamicsWorld.prototype.contactPairTest = function(colObjA, colObjB, resultCallback) {
        var self2 = this.ptr;
        if (colObjA && typeof colObjA === "object")
          colObjA = colObjA.ptr;
        if (colObjB && typeof colObjB === "object")
          colObjB = colObjB.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3(self2, colObjA, colObjB, resultCallback);
      };
      btDiscreteDynamicsWorld.prototype["contactTest"] = btDiscreteDynamicsWorld.prototype.contactTest = function(colObj, resultCallback) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_contactTest_2(self2, colObj, resultCallback);
      };
      btDiscreteDynamicsWorld.prototype["updateSingleAabb"] = btDiscreteDynamicsWorld.prototype.updateSingleAabb = function(colObj) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_updateSingleAabb_1(self2, colObj);
      };
      btDiscreteDynamicsWorld.prototype["addAction"] = btDiscreteDynamicsWorld.prototype.addAction = function(action) {
        var self2 = this.ptr;
        if (action && typeof action === "object")
          action = action.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_addAction_1(self2, action);
      };
      btDiscreteDynamicsWorld.prototype["removeAction"] = btDiscreteDynamicsWorld.prototype.removeAction = function(action) {
        var self2 = this.ptr;
        if (action && typeof action === "object")
          action = action.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld_removeAction_1(self2, action);
      };
      btDiscreteDynamicsWorld.prototype["getSolverInfo"] = btDiscreteDynamicsWorld.prototype.getSolverInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0(self2), btContactSolverInfo);
      };
      btDiscreteDynamicsWorld.prototype["__destroy__"] = btDiscreteDynamicsWorld.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDiscreteDynamicsWorld___destroy___0(self2);
      };
      function btVehicleRaycaster() {
        throw "cannot construct a btVehicleRaycaster, no constructor in IDL";
      }
      btVehicleRaycaster.prototype = Object.create(WrapperObject.prototype);
      btVehicleRaycaster.prototype.constructor = btVehicleRaycaster;
      btVehicleRaycaster.prototype.__class__ = btVehicleRaycaster;
      btVehicleRaycaster.__cache__ = {};
      Module["btVehicleRaycaster"] = btVehicleRaycaster;
      btVehicleRaycaster.prototype["castRay"] = btVehicleRaycaster.prototype.castRay = function(from, to, result) {
        var self2 = this.ptr;
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        if (result && typeof result === "object")
          result = result.ptr;
        _emscripten_bind_btVehicleRaycaster_castRay_3(self2, from, to, result);
      };
      btVehicleRaycaster.prototype["__destroy__"] = btVehicleRaycaster.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btVehicleRaycaster___destroy___0(self2);
      };
      function btActionInterface() {
        throw "cannot construct a btActionInterface, no constructor in IDL";
      }
      btActionInterface.prototype = Object.create(WrapperObject.prototype);
      btActionInterface.prototype.constructor = btActionInterface;
      btActionInterface.prototype.__class__ = btActionInterface;
      btActionInterface.__cache__ = {};
      Module["btActionInterface"] = btActionInterface;
      btActionInterface.prototype["updateAction"] = btActionInterface.prototype.updateAction = function(collisionWorld, deltaTimeStep) {
        var self2 = this.ptr;
        if (collisionWorld && typeof collisionWorld === "object")
          collisionWorld = collisionWorld.ptr;
        if (deltaTimeStep && typeof deltaTimeStep === "object")
          deltaTimeStep = deltaTimeStep.ptr;
        _emscripten_bind_btActionInterface_updateAction_2(self2, collisionWorld, deltaTimeStep);
      };
      btActionInterface.prototype["__destroy__"] = btActionInterface.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btActionInterface___destroy___0(self2);
      };
      function btGhostObject() {
        this.ptr = _emscripten_bind_btGhostObject_btGhostObject_0();
        getCache(btGhostObject)[this.ptr] = this;
      }
      btGhostObject.prototype = Object.create(btCollisionObject.prototype);
      btGhostObject.prototype.constructor = btGhostObject;
      btGhostObject.prototype.__class__ = btGhostObject;
      btGhostObject.__cache__ = {};
      Module["btGhostObject"] = btGhostObject;
      btGhostObject.prototype["getNumOverlappingObjects"] = btGhostObject.prototype.getNumOverlappingObjects = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btGhostObject_getNumOverlappingObjects_0(self2);
      };
      btGhostObject.prototype["getOverlappingObject"] = btGhostObject.prototype.getOverlappingObject = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btGhostObject_getOverlappingObject_1(self2, index), btCollisionObject);
      };
      btGhostObject.prototype["setAnisotropicFriction"] = btGhostObject.prototype.setAnisotropicFriction = function(anisotropicFriction, frictionMode) {
        var self2 = this.ptr;
        if (anisotropicFriction && typeof anisotropicFriction === "object")
          anisotropicFriction = anisotropicFriction.ptr;
        if (frictionMode && typeof frictionMode === "object")
          frictionMode = frictionMode.ptr;
        _emscripten_bind_btGhostObject_setAnisotropicFriction_2(self2, anisotropicFriction, frictionMode);
      };
      btGhostObject.prototype["getCollisionShape"] = btGhostObject.prototype.getCollisionShape = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGhostObject_getCollisionShape_0(self2), btCollisionShape);
      };
      btGhostObject.prototype["setContactProcessingThreshold"] = btGhostObject.prototype.setContactProcessingThreshold = function(contactProcessingThreshold) {
        var self2 = this.ptr;
        if (contactProcessingThreshold && typeof contactProcessingThreshold === "object")
          contactProcessingThreshold = contactProcessingThreshold.ptr;
        _emscripten_bind_btGhostObject_setContactProcessingThreshold_1(self2, contactProcessingThreshold);
      };
      btGhostObject.prototype["setActivationState"] = btGhostObject.prototype.setActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btGhostObject_setActivationState_1(self2, newState);
      };
      btGhostObject.prototype["forceActivationState"] = btGhostObject.prototype.forceActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btGhostObject_forceActivationState_1(self2, newState);
      };
      btGhostObject.prototype["activate"] = btGhostObject.prototype.activate = function(forceActivation) {
        var self2 = this.ptr;
        if (forceActivation && typeof forceActivation === "object")
          forceActivation = forceActivation.ptr;
        if (forceActivation === undefined) {
          _emscripten_bind_btGhostObject_activate_0(self2);
          return;
        }
        _emscripten_bind_btGhostObject_activate_1(self2, forceActivation);
      };
      btGhostObject.prototype["isActive"] = btGhostObject.prototype.isActive = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btGhostObject_isActive_0(self2);
      };
      btGhostObject.prototype["isKinematicObject"] = btGhostObject.prototype.isKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btGhostObject_isKinematicObject_0(self2);
      };
      btGhostObject.prototype["isStaticObject"] = btGhostObject.prototype.isStaticObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btGhostObject_isStaticObject_0(self2);
      };
      btGhostObject.prototype["isStaticOrKinematicObject"] = btGhostObject.prototype.isStaticOrKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btGhostObject_isStaticOrKinematicObject_0(self2);
      };
      btGhostObject.prototype["setRestitution"] = btGhostObject.prototype.setRestitution = function(rest) {
        var self2 = this.ptr;
        if (rest && typeof rest === "object")
          rest = rest.ptr;
        _emscripten_bind_btGhostObject_setRestitution_1(self2, rest);
      };
      btGhostObject.prototype["setFriction"] = btGhostObject.prototype.setFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btGhostObject_setFriction_1(self2, frict);
      };
      btGhostObject.prototype["setRollingFriction"] = btGhostObject.prototype.setRollingFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btGhostObject_setRollingFriction_1(self2, frict);
      };
      btGhostObject.prototype["getWorldTransform"] = btGhostObject.prototype.getWorldTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGhostObject_getWorldTransform_0(self2), btTransform);
      };
      btGhostObject.prototype["getCollisionFlags"] = btGhostObject.prototype.getCollisionFlags = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btGhostObject_getCollisionFlags_0(self2);
      };
      btGhostObject.prototype["setCollisionFlags"] = btGhostObject.prototype.setCollisionFlags = function(flags) {
        var self2 = this.ptr;
        if (flags && typeof flags === "object")
          flags = flags.ptr;
        _emscripten_bind_btGhostObject_setCollisionFlags_1(self2, flags);
      };
      btGhostObject.prototype["setWorldTransform"] = btGhostObject.prototype.setWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btGhostObject_setWorldTransform_1(self2, worldTrans);
      };
      btGhostObject.prototype["setCollisionShape"] = btGhostObject.prototype.setCollisionShape = function(collisionShape) {
        var self2 = this.ptr;
        if (collisionShape && typeof collisionShape === "object")
          collisionShape = collisionShape.ptr;
        _emscripten_bind_btGhostObject_setCollisionShape_1(self2, collisionShape);
      };
      btGhostObject.prototype["setCcdMotionThreshold"] = btGhostObject.prototype.setCcdMotionThreshold = function(ccdMotionThreshold) {
        var self2 = this.ptr;
        if (ccdMotionThreshold && typeof ccdMotionThreshold === "object")
          ccdMotionThreshold = ccdMotionThreshold.ptr;
        _emscripten_bind_btGhostObject_setCcdMotionThreshold_1(self2, ccdMotionThreshold);
      };
      btGhostObject.prototype["setCcdSweptSphereRadius"] = btGhostObject.prototype.setCcdSweptSphereRadius = function(radius) {
        var self2 = this.ptr;
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        _emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1(self2, radius);
      };
      btGhostObject.prototype["getUserIndex"] = btGhostObject.prototype.getUserIndex = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btGhostObject_getUserIndex_0(self2);
      };
      btGhostObject.prototype["setUserIndex"] = btGhostObject.prototype.setUserIndex = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        _emscripten_bind_btGhostObject_setUserIndex_1(self2, index);
      };
      btGhostObject.prototype["getUserPointer"] = btGhostObject.prototype.getUserPointer = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGhostObject_getUserPointer_0(self2), VoidPtr);
      };
      btGhostObject.prototype["setUserPointer"] = btGhostObject.prototype.setUserPointer = function(userPointer) {
        var self2 = this.ptr;
        if (userPointer && typeof userPointer === "object")
          userPointer = userPointer.ptr;
        _emscripten_bind_btGhostObject_setUserPointer_1(self2, userPointer);
      };
      btGhostObject.prototype["getActivationState"] = btGhostObject.prototype.getActivationState = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btGhostObject_getActivationState_0(self2);
      };
      btGhostObject.prototype["__destroy__"] = btGhostObject.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGhostObject___destroy___0(self2);
      };
      function btGImpactShapeInterface() {
        throw "cannot construct a btGImpactShapeInterface, no constructor in IDL";
      }
      btGImpactShapeInterface.prototype = Object.create(btConcaveShape.prototype);
      btGImpactShapeInterface.prototype.constructor = btGImpactShapeInterface;
      btGImpactShapeInterface.prototype.__class__ = btGImpactShapeInterface;
      btGImpactShapeInterface.__cache__ = {};
      Module["btGImpactShapeInterface"] = btGImpactShapeInterface;
      btGImpactShapeInterface.prototype["setLocalScaling"] = btGImpactShapeInterface.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btGImpactShapeInterface_setLocalScaling_1(self2, scaling);
      };
      btGImpactShapeInterface.prototype["getLocalScaling"] = btGImpactShapeInterface.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGImpactShapeInterface_getLocalScaling_0(self2), btVector3);
      };
      btGImpactShapeInterface.prototype["calculateLocalInertia"] = btGImpactShapeInterface.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btGImpactShapeInterface_calculateLocalInertia_2(self2, mass, inertia);
      };
      btGImpactShapeInterface.prototype["__destroy__"] = btGImpactShapeInterface.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGImpactShapeInterface___destroy___0(self2);
      };
      function VoidPtr() {
        throw "cannot construct a VoidPtr, no constructor in IDL";
      }
      VoidPtr.prototype = Object.create(WrapperObject.prototype);
      VoidPtr.prototype.constructor = VoidPtr;
      VoidPtr.prototype.__class__ = VoidPtr;
      VoidPtr.__cache__ = {};
      Module["VoidPtr"] = VoidPtr;
      VoidPtr.prototype["__destroy__"] = VoidPtr.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_VoidPtr___destroy___0(self2);
      };
      function btVector4(x, y, z, w) {
        if (x && typeof x === "object")
          x = x.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        if (w && typeof w === "object")
          w = w.ptr;
        if (x === undefined) {
          this.ptr = _emscripten_bind_btVector4_btVector4_0();
          getCache(btVector4)[this.ptr] = this;
          return;
        }
        if (y === undefined) {
          this.ptr = _emscripten_bind_btVector4_btVector4_1(x);
          getCache(btVector4)[this.ptr] = this;
          return;
        }
        if (z === undefined) {
          this.ptr = _emscripten_bind_btVector4_btVector4_2(x, y);
          getCache(btVector4)[this.ptr] = this;
          return;
        }
        if (w === undefined) {
          this.ptr = _emscripten_bind_btVector4_btVector4_3(x, y, z);
          getCache(btVector4)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btVector4_btVector4_4(x, y, z, w);
        getCache(btVector4)[this.ptr] = this;
      }
      btVector4.prototype = Object.create(btVector3.prototype);
      btVector4.prototype.constructor = btVector4;
      btVector4.prototype.__class__ = btVector4;
      btVector4.__cache__ = {};
      Module["btVector4"] = btVector4;
      btVector4.prototype["w"] = btVector4.prototype.w = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector4_w_0(self2);
      };
      btVector4.prototype["setValue"] = btVector4.prototype.setValue = function(x, y, z, w) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        if (w && typeof w === "object")
          w = w.ptr;
        _emscripten_bind_btVector4_setValue_4(self2, x, y, z, w);
      };
      btVector4.prototype["length"] = btVector4.prototype.length = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector4_length_0(self2);
      };
      btVector4.prototype["x"] = btVector4.prototype.x = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector4_x_0(self2);
      };
      btVector4.prototype["y"] = btVector4.prototype.y = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector4_y_0(self2);
      };
      btVector4.prototype["z"] = btVector4.prototype.z = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVector4_z_0(self2);
      };
      btVector4.prototype["setX"] = btVector4.prototype.setX = function(x) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        _emscripten_bind_btVector4_setX_1(self2, x);
      };
      btVector4.prototype["setY"] = btVector4.prototype.setY = function(y) {
        var self2 = this.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        _emscripten_bind_btVector4_setY_1(self2, y);
      };
      btVector4.prototype["setZ"] = btVector4.prototype.setZ = function(z) {
        var self2 = this.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        _emscripten_bind_btVector4_setZ_1(self2, z);
      };
      btVector4.prototype["normalize"] = btVector4.prototype.normalize = function() {
        var self2 = this.ptr;
        _emscripten_bind_btVector4_normalize_0(self2);
      };
      btVector4.prototype["rotate"] = btVector4.prototype.rotate = function(wAxis, angle) {
        var self2 = this.ptr;
        if (wAxis && typeof wAxis === "object")
          wAxis = wAxis.ptr;
        if (angle && typeof angle === "object")
          angle = angle.ptr;
        return wrapPointer(_emscripten_bind_btVector4_rotate_2(self2, wAxis, angle), btVector3);
      };
      btVector4.prototype["dot"] = btVector4.prototype.dot = function(v) {
        var self2 = this.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        return _emscripten_bind_btVector4_dot_1(self2, v);
      };
      btVector4.prototype["op_mul"] = btVector4.prototype.op_mul = function(x) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        return wrapPointer(_emscripten_bind_btVector4_op_mul_1(self2, x), btVector3);
      };
      btVector4.prototype["op_add"] = btVector4.prototype.op_add = function(v) {
        var self2 = this.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        return wrapPointer(_emscripten_bind_btVector4_op_add_1(self2, v), btVector3);
      };
      btVector4.prototype["op_sub"] = btVector4.prototype.op_sub = function(v) {
        var self2 = this.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        return wrapPointer(_emscripten_bind_btVector4_op_sub_1(self2, v), btVector3);
      };
      btVector4.prototype["__destroy__"] = btVector4.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btVector4___destroy___0(self2);
      };
      function btQuaternion(x, y, z, w) {
        if (x && typeof x === "object")
          x = x.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        if (w && typeof w === "object")
          w = w.ptr;
        this.ptr = _emscripten_bind_btQuaternion_btQuaternion_4(x, y, z, w);
        getCache(btQuaternion)[this.ptr] = this;
      }
      btQuaternion.prototype = Object.create(btQuadWord.prototype);
      btQuaternion.prototype.constructor = btQuaternion;
      btQuaternion.prototype.__class__ = btQuaternion;
      btQuaternion.__cache__ = {};
      Module["btQuaternion"] = btQuaternion;
      btQuaternion.prototype["setValue"] = btQuaternion.prototype.setValue = function(x, y, z, w) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        if (w && typeof w === "object")
          w = w.ptr;
        _emscripten_bind_btQuaternion_setValue_4(self2, x, y, z, w);
      };
      btQuaternion.prototype["setEulerZYX"] = btQuaternion.prototype.setEulerZYX = function(z, y, x) {
        var self2 = this.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        _emscripten_bind_btQuaternion_setEulerZYX_3(self2, z, y, x);
      };
      btQuaternion.prototype["setRotation"] = btQuaternion.prototype.setRotation = function(axis, angle) {
        var self2 = this.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        if (angle && typeof angle === "object")
          angle = angle.ptr;
        _emscripten_bind_btQuaternion_setRotation_2(self2, axis, angle);
      };
      btQuaternion.prototype["normalize"] = btQuaternion.prototype.normalize = function() {
        var self2 = this.ptr;
        _emscripten_bind_btQuaternion_normalize_0(self2);
      };
      btQuaternion.prototype["length2"] = btQuaternion.prototype.length2 = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_length2_0(self2);
      };
      btQuaternion.prototype["length"] = btQuaternion.prototype.length = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_length_0(self2);
      };
      btQuaternion.prototype["dot"] = btQuaternion.prototype.dot = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        return _emscripten_bind_btQuaternion_dot_1(self2, q);
      };
      btQuaternion.prototype["normalized"] = btQuaternion.prototype.normalized = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_normalized_0(self2), btQuaternion);
      };
      btQuaternion.prototype["getAxis"] = btQuaternion.prototype.getAxis = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_getAxis_0(self2), btVector3);
      };
      btQuaternion.prototype["inverse"] = btQuaternion.prototype.inverse = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_inverse_0(self2), btQuaternion);
      };
      btQuaternion.prototype["getAngle"] = btQuaternion.prototype.getAngle = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_getAngle_0(self2);
      };
      btQuaternion.prototype["getAngleShortestPath"] = btQuaternion.prototype.getAngleShortestPath = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_getAngleShortestPath_0(self2);
      };
      btQuaternion.prototype["angle"] = btQuaternion.prototype.angle = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        return _emscripten_bind_btQuaternion_angle_1(self2, q);
      };
      btQuaternion.prototype["angleShortestPath"] = btQuaternion.prototype.angleShortestPath = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        return _emscripten_bind_btQuaternion_angleShortestPath_1(self2, q);
      };
      btQuaternion.prototype["op_add"] = btQuaternion.prototype.op_add = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_op_add_1(self2, q), btQuaternion);
      };
      btQuaternion.prototype["op_sub"] = btQuaternion.prototype.op_sub = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_op_sub_1(self2, q), btQuaternion);
      };
      btQuaternion.prototype["op_mul"] = btQuaternion.prototype.op_mul = function(s) {
        var self2 = this.ptr;
        if (s && typeof s === "object")
          s = s.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_op_mul_1(self2, s), btQuaternion);
      };
      btQuaternion.prototype["op_mulq"] = btQuaternion.prototype.op_mulq = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_op_mulq_1(self2, q), btQuaternion);
      };
      btQuaternion.prototype["op_div"] = btQuaternion.prototype.op_div = function(s) {
        var self2 = this.ptr;
        if (s && typeof s === "object")
          s = s.ptr;
        return wrapPointer(_emscripten_bind_btQuaternion_op_div_1(self2, s), btQuaternion);
      };
      btQuaternion.prototype["x"] = btQuaternion.prototype.x = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_x_0(self2);
      };
      btQuaternion.prototype["y"] = btQuaternion.prototype.y = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_y_0(self2);
      };
      btQuaternion.prototype["z"] = btQuaternion.prototype.z = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_z_0(self2);
      };
      btQuaternion.prototype["w"] = btQuaternion.prototype.w = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btQuaternion_w_0(self2);
      };
      btQuaternion.prototype["setX"] = btQuaternion.prototype.setX = function(x) {
        var self2 = this.ptr;
        if (x && typeof x === "object")
          x = x.ptr;
        _emscripten_bind_btQuaternion_setX_1(self2, x);
      };
      btQuaternion.prototype["setY"] = btQuaternion.prototype.setY = function(y) {
        var self2 = this.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        _emscripten_bind_btQuaternion_setY_1(self2, y);
      };
      btQuaternion.prototype["setZ"] = btQuaternion.prototype.setZ = function(z) {
        var self2 = this.ptr;
        if (z && typeof z === "object")
          z = z.ptr;
        _emscripten_bind_btQuaternion_setZ_1(self2, z);
      };
      btQuaternion.prototype["setW"] = btQuaternion.prototype.setW = function(w) {
        var self2 = this.ptr;
        if (w && typeof w === "object")
          w = w.ptr;
        _emscripten_bind_btQuaternion_setW_1(self2, w);
      };
      btQuaternion.prototype["__destroy__"] = btQuaternion.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btQuaternion___destroy___0(self2);
      };
      function btMatrix3x3() {
        throw "cannot construct a btMatrix3x3, no constructor in IDL";
      }
      btMatrix3x3.prototype = Object.create(WrapperObject.prototype);
      btMatrix3x3.prototype.constructor = btMatrix3x3;
      btMatrix3x3.prototype.__class__ = btMatrix3x3;
      btMatrix3x3.__cache__ = {};
      Module["btMatrix3x3"] = btMatrix3x3;
      btMatrix3x3.prototype["setEulerZYX"] = btMatrix3x3.prototype.setEulerZYX = function(ex, ey, ez) {
        var self2 = this.ptr;
        if (ex && typeof ex === "object")
          ex = ex.ptr;
        if (ey && typeof ey === "object")
          ey = ey.ptr;
        if (ez && typeof ez === "object")
          ez = ez.ptr;
        _emscripten_bind_btMatrix3x3_setEulerZYX_3(self2, ex, ey, ez);
      };
      btMatrix3x3.prototype["getRotation"] = btMatrix3x3.prototype.getRotation = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        _emscripten_bind_btMatrix3x3_getRotation_1(self2, q);
      };
      btMatrix3x3.prototype["getRow"] = btMatrix3x3.prototype.getRow = function(y) {
        var self2 = this.ptr;
        if (y && typeof y === "object")
          y = y.ptr;
        return wrapPointer(_emscripten_bind_btMatrix3x3_getRow_1(self2, y), btVector3);
      };
      btMatrix3x3.prototype["__destroy__"] = btMatrix3x3.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btMatrix3x3___destroy___0(self2);
      };
      function btTransform(q, v) {
        if (q && typeof q === "object")
          q = q.ptr;
        if (v && typeof v === "object")
          v = v.ptr;
        if (q === undefined) {
          this.ptr = _emscripten_bind_btTransform_btTransform_0();
          getCache(btTransform)[this.ptr] = this;
          return;
        }
        if (v === undefined) {
          this.ptr = _emscripten_bind_btTransform_btTransform_1(q);
          getCache(btTransform)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btTransform_btTransform_2(q, v);
        getCache(btTransform)[this.ptr] = this;
      }
      btTransform.prototype = Object.create(WrapperObject.prototype);
      btTransform.prototype.constructor = btTransform;
      btTransform.prototype.__class__ = btTransform;
      btTransform.__cache__ = {};
      Module["btTransform"] = btTransform;
      btTransform.prototype["setIdentity"] = btTransform.prototype.setIdentity = function() {
        var self2 = this.ptr;
        _emscripten_bind_btTransform_setIdentity_0(self2);
      };
      btTransform.prototype["setOrigin"] = btTransform.prototype.setOrigin = function(origin) {
        var self2 = this.ptr;
        if (origin && typeof origin === "object")
          origin = origin.ptr;
        _emscripten_bind_btTransform_setOrigin_1(self2, origin);
      };
      btTransform.prototype["setRotation"] = btTransform.prototype.setRotation = function(rotation) {
        var self2 = this.ptr;
        if (rotation && typeof rotation === "object")
          rotation = rotation.ptr;
        _emscripten_bind_btTransform_setRotation_1(self2, rotation);
      };
      btTransform.prototype["getOrigin"] = btTransform.prototype.getOrigin = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btTransform_getOrigin_0(self2), btVector3);
      };
      btTransform.prototype["getRotation"] = btTransform.prototype.getRotation = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btTransform_getRotation_0(self2), btQuaternion);
      };
      btTransform.prototype["getBasis"] = btTransform.prototype.getBasis = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btTransform_getBasis_0(self2), btMatrix3x3);
      };
      btTransform.prototype["setFromOpenGLMatrix"] = btTransform.prototype.setFromOpenGLMatrix = function(m) {
        var self2 = this.ptr;
        ensureCache.prepare();
        if (typeof m == "object") {
          m = ensureFloat32(m);
        }
        _emscripten_bind_btTransform_setFromOpenGLMatrix_1(self2, m);
      };
      btTransform.prototype["__destroy__"] = btTransform.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btTransform___destroy___0(self2);
      };
      function btDefaultMotionState(startTrans, centerOfMassOffset) {
        if (startTrans && typeof startTrans === "object")
          startTrans = startTrans.ptr;
        if (centerOfMassOffset && typeof centerOfMassOffset === "object")
          centerOfMassOffset = centerOfMassOffset.ptr;
        if (startTrans === undefined) {
          this.ptr = _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0();
          getCache(btDefaultMotionState)[this.ptr] = this;
          return;
        }
        if (centerOfMassOffset === undefined) {
          this.ptr = _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1(startTrans);
          getCache(btDefaultMotionState)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2(startTrans, centerOfMassOffset);
        getCache(btDefaultMotionState)[this.ptr] = this;
      }
      btDefaultMotionState.prototype = Object.create(btMotionState.prototype);
      btDefaultMotionState.prototype.constructor = btDefaultMotionState;
      btDefaultMotionState.prototype.__class__ = btDefaultMotionState;
      btDefaultMotionState.__cache__ = {};
      Module["btDefaultMotionState"] = btDefaultMotionState;
      btDefaultMotionState.prototype["getWorldTransform"] = btDefaultMotionState.prototype.getWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btDefaultMotionState_getWorldTransform_1(self2, worldTrans);
      };
      btDefaultMotionState.prototype["setWorldTransform"] = btDefaultMotionState.prototype.setWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btDefaultMotionState_setWorldTransform_1(self2, worldTrans);
      };
      btDefaultMotionState.prototype["get_m_graphicsWorldTrans"] = btDefaultMotionState.prototype.get_m_graphicsWorldTrans = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0(self2), btTransform);
      };
      btDefaultMotionState.prototype["set_m_graphicsWorldTrans"] = btDefaultMotionState.prototype.set_m_graphicsWorldTrans = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1(self2, arg0);
      };
      Object.defineProperty(btDefaultMotionState.prototype, "m_graphicsWorldTrans", { get: btDefaultMotionState.prototype.get_m_graphicsWorldTrans, set: btDefaultMotionState.prototype.set_m_graphicsWorldTrans });
      btDefaultMotionState.prototype["__destroy__"] = btDefaultMotionState.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDefaultMotionState___destroy___0(self2);
      };
      function btCollisionObjectWrapper() {
        throw "cannot construct a btCollisionObjectWrapper, no constructor in IDL";
      }
      btCollisionObjectWrapper.prototype = Object.create(WrapperObject.prototype);
      btCollisionObjectWrapper.prototype.constructor = btCollisionObjectWrapper;
      btCollisionObjectWrapper.prototype.__class__ = btCollisionObjectWrapper;
      btCollisionObjectWrapper.__cache__ = {};
      Module["btCollisionObjectWrapper"] = btCollisionObjectWrapper;
      function ClosestRayResultCallback(from, to) {
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        this.ptr = _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2(from, to);
        getCache(ClosestRayResultCallback)[this.ptr] = this;
      }
      ClosestRayResultCallback.prototype = Object.create(RayResultCallback.prototype);
      ClosestRayResultCallback.prototype.constructor = ClosestRayResultCallback;
      ClosestRayResultCallback.prototype.__class__ = ClosestRayResultCallback;
      ClosestRayResultCallback.__cache__ = {};
      Module["ClosestRayResultCallback"] = ClosestRayResultCallback;
      ClosestRayResultCallback.prototype["hasHit"] = ClosestRayResultCallback.prototype.hasHit = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_ClosestRayResultCallback_hasHit_0(self2);
      };
      ClosestRayResultCallback.prototype["get_m_rayFromWorld"] = ClosestRayResultCallback.prototype.get_m_rayFromWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0(self2), btVector3);
      };
      ClosestRayResultCallback.prototype["set_m_rayFromWorld"] = ClosestRayResultCallback.prototype.set_m_rayFromWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_rayFromWorld", { get: ClosestRayResultCallback.prototype.get_m_rayFromWorld, set: ClosestRayResultCallback.prototype.set_m_rayFromWorld });
      ClosestRayResultCallback.prototype["get_m_rayToWorld"] = ClosestRayResultCallback.prototype.get_m_rayToWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0(self2), btVector3);
      };
      ClosestRayResultCallback.prototype["set_m_rayToWorld"] = ClosestRayResultCallback.prototype.set_m_rayToWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_rayToWorld", { get: ClosestRayResultCallback.prototype.get_m_rayToWorld, set: ClosestRayResultCallback.prototype.set_m_rayToWorld });
      ClosestRayResultCallback.prototype["get_m_hitNormalWorld"] = ClosestRayResultCallback.prototype.get_m_hitNormalWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0(self2), btVector3);
      };
      ClosestRayResultCallback.prototype["set_m_hitNormalWorld"] = ClosestRayResultCallback.prototype.set_m_hitNormalWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_hitNormalWorld", { get: ClosestRayResultCallback.prototype.get_m_hitNormalWorld, set: ClosestRayResultCallback.prototype.set_m_hitNormalWorld });
      ClosestRayResultCallback.prototype["get_m_hitPointWorld"] = ClosestRayResultCallback.prototype.get_m_hitPointWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0(self2), btVector3);
      };
      ClosestRayResultCallback.prototype["set_m_hitPointWorld"] = ClosestRayResultCallback.prototype.set_m_hitPointWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_hitPointWorld", { get: ClosestRayResultCallback.prototype.get_m_hitPointWorld, set: ClosestRayResultCallback.prototype.set_m_hitPointWorld });
      ClosestRayResultCallback.prototype["get_m_collisionFilterGroup"] = ClosestRayResultCallback.prototype.get_m_collisionFilterGroup = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0(self2);
      };
      ClosestRayResultCallback.prototype["set_m_collisionFilterGroup"] = ClosestRayResultCallback.prototype.set_m_collisionFilterGroup = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_collisionFilterGroup", { get: ClosestRayResultCallback.prototype.get_m_collisionFilterGroup, set: ClosestRayResultCallback.prototype.set_m_collisionFilterGroup });
      ClosestRayResultCallback.prototype["get_m_collisionFilterMask"] = ClosestRayResultCallback.prototype.get_m_collisionFilterMask = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0(self2);
      };
      ClosestRayResultCallback.prototype["set_m_collisionFilterMask"] = ClosestRayResultCallback.prototype.set_m_collisionFilterMask = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_collisionFilterMask", { get: ClosestRayResultCallback.prototype.get_m_collisionFilterMask, set: ClosestRayResultCallback.prototype.set_m_collisionFilterMask });
      ClosestRayResultCallback.prototype["get_m_closestHitFraction"] = ClosestRayResultCallback.prototype.get_m_closestHitFraction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0(self2);
      };
      ClosestRayResultCallback.prototype["set_m_closestHitFraction"] = ClosestRayResultCallback.prototype.set_m_closestHitFraction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_closestHitFraction", { get: ClosestRayResultCallback.prototype.get_m_closestHitFraction, set: ClosestRayResultCallback.prototype.set_m_closestHitFraction });
      ClosestRayResultCallback.prototype["get_m_collisionObject"] = ClosestRayResultCallback.prototype.get_m_collisionObject = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0(self2), btCollisionObject);
      };
      ClosestRayResultCallback.prototype["set_m_collisionObject"] = ClosestRayResultCallback.prototype.set_m_collisionObject = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1(self2, arg0);
      };
      Object.defineProperty(ClosestRayResultCallback.prototype, "m_collisionObject", { get: ClosestRayResultCallback.prototype.get_m_collisionObject, set: ClosestRayResultCallback.prototype.set_m_collisionObject });
      ClosestRayResultCallback.prototype["__destroy__"] = ClosestRayResultCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_ClosestRayResultCallback___destroy___0(self2);
      };
      function btManifoldPoint() {
        throw "cannot construct a btManifoldPoint, no constructor in IDL";
      }
      btManifoldPoint.prototype = Object.create(WrapperObject.prototype);
      btManifoldPoint.prototype.constructor = btManifoldPoint;
      btManifoldPoint.prototype.__class__ = btManifoldPoint;
      btManifoldPoint.__cache__ = {};
      Module["btManifoldPoint"] = btManifoldPoint;
      btManifoldPoint.prototype["getPositionWorldOnA"] = btManifoldPoint.prototype.getPositionWorldOnA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0(self2), btVector3);
      };
      btManifoldPoint.prototype["getPositionWorldOnB"] = btManifoldPoint.prototype.getPositionWorldOnB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0(self2), btVector3);
      };
      btManifoldPoint.prototype["getAppliedImpulse"] = btManifoldPoint.prototype.getAppliedImpulse = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btManifoldPoint_getAppliedImpulse_0(self2);
      };
      btManifoldPoint.prototype["getDistance"] = btManifoldPoint.prototype.getDistance = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btManifoldPoint_getDistance_0(self2);
      };
      btManifoldPoint.prototype["get_m_localPointA"] = btManifoldPoint.prototype.get_m_localPointA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointA_0(self2), btVector3);
      };
      btManifoldPoint.prototype["set_m_localPointA"] = btManifoldPoint.prototype.set_m_localPointA = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btManifoldPoint_set_m_localPointA_1(self2, arg0);
      };
      Object.defineProperty(btManifoldPoint.prototype, "m_localPointA", { get: btManifoldPoint.prototype.get_m_localPointA, set: btManifoldPoint.prototype.set_m_localPointA });
      btManifoldPoint.prototype["get_m_localPointB"] = btManifoldPoint.prototype.get_m_localPointB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointB_0(self2), btVector3);
      };
      btManifoldPoint.prototype["set_m_localPointB"] = btManifoldPoint.prototype.set_m_localPointB = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btManifoldPoint_set_m_localPointB_1(self2, arg0);
      };
      Object.defineProperty(btManifoldPoint.prototype, "m_localPointB", { get: btManifoldPoint.prototype.get_m_localPointB, set: btManifoldPoint.prototype.set_m_localPointB });
      btManifoldPoint.prototype["get_m_positionWorldOnB"] = btManifoldPoint.prototype.get_m_positionWorldOnB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0(self2), btVector3);
      };
      btManifoldPoint.prototype["set_m_positionWorldOnB"] = btManifoldPoint.prototype.set_m_positionWorldOnB = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1(self2, arg0);
      };
      Object.defineProperty(btManifoldPoint.prototype, "m_positionWorldOnB", { get: btManifoldPoint.prototype.get_m_positionWorldOnB, set: btManifoldPoint.prototype.set_m_positionWorldOnB });
      btManifoldPoint.prototype["get_m_positionWorldOnA"] = btManifoldPoint.prototype.get_m_positionWorldOnA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0(self2), btVector3);
      };
      btManifoldPoint.prototype["set_m_positionWorldOnA"] = btManifoldPoint.prototype.set_m_positionWorldOnA = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1(self2, arg0);
      };
      Object.defineProperty(btManifoldPoint.prototype, "m_positionWorldOnA", { get: btManifoldPoint.prototype.get_m_positionWorldOnA, set: btManifoldPoint.prototype.set_m_positionWorldOnA });
      btManifoldPoint.prototype["get_m_normalWorldOnB"] = btManifoldPoint.prototype.get_m_normalWorldOnB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0(self2), btVector3);
      };
      btManifoldPoint.prototype["set_m_normalWorldOnB"] = btManifoldPoint.prototype.set_m_normalWorldOnB = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1(self2, arg0);
      };
      Object.defineProperty(btManifoldPoint.prototype, "m_normalWorldOnB", { get: btManifoldPoint.prototype.get_m_normalWorldOnB, set: btManifoldPoint.prototype.set_m_normalWorldOnB });
      btManifoldPoint.prototype["__destroy__"] = btManifoldPoint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btManifoldPoint___destroy___0(self2);
      };
      function ConcreteContactResultCallback() {
        this.ptr = _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0();
        getCache(ConcreteContactResultCallback)[this.ptr] = this;
      }
      ConcreteContactResultCallback.prototype = Object.create(ContactResultCallback.prototype);
      ConcreteContactResultCallback.prototype.constructor = ConcreteContactResultCallback;
      ConcreteContactResultCallback.prototype.__class__ = ConcreteContactResultCallback;
      ConcreteContactResultCallback.__cache__ = {};
      Module["ConcreteContactResultCallback"] = ConcreteContactResultCallback;
      ConcreteContactResultCallback.prototype["addSingleResult"] = ConcreteContactResultCallback.prototype.addSingleResult = function(cp, colObj0Wrap, partId0, index0, colObj1Wrap, partId1, index1) {
        var self2 = this.ptr;
        if (cp && typeof cp === "object")
          cp = cp.ptr;
        if (colObj0Wrap && typeof colObj0Wrap === "object")
          colObj0Wrap = colObj0Wrap.ptr;
        if (partId0 && typeof partId0 === "object")
          partId0 = partId0.ptr;
        if (index0 && typeof index0 === "object")
          index0 = index0.ptr;
        if (colObj1Wrap && typeof colObj1Wrap === "object")
          colObj1Wrap = colObj1Wrap.ptr;
        if (partId1 && typeof partId1 === "object")
          partId1 = partId1.ptr;
        if (index1 && typeof index1 === "object")
          index1 = index1.ptr;
        return _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7(self2, cp, colObj0Wrap, partId0, index0, colObj1Wrap, partId1, index1);
      };
      ConcreteContactResultCallback.prototype["__destroy__"] = ConcreteContactResultCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_ConcreteContactResultCallback___destroy___0(self2);
      };
      function LocalShapeInfo() {
        throw "cannot construct a LocalShapeInfo, no constructor in IDL";
      }
      LocalShapeInfo.prototype = Object.create(WrapperObject.prototype);
      LocalShapeInfo.prototype.constructor = LocalShapeInfo;
      LocalShapeInfo.prototype.__class__ = LocalShapeInfo;
      LocalShapeInfo.__cache__ = {};
      Module["LocalShapeInfo"] = LocalShapeInfo;
      LocalShapeInfo.prototype["get_m_shapePart"] = LocalShapeInfo.prototype.get_m_shapePart = function() {
        var self2 = this.ptr;
        return _emscripten_bind_LocalShapeInfo_get_m_shapePart_0(self2);
      };
      LocalShapeInfo.prototype["set_m_shapePart"] = LocalShapeInfo.prototype.set_m_shapePart = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalShapeInfo_set_m_shapePart_1(self2, arg0);
      };
      Object.defineProperty(LocalShapeInfo.prototype, "m_shapePart", { get: LocalShapeInfo.prototype.get_m_shapePart, set: LocalShapeInfo.prototype.set_m_shapePart });
      LocalShapeInfo.prototype["get_m_triangleIndex"] = LocalShapeInfo.prototype.get_m_triangleIndex = function() {
        var self2 = this.ptr;
        return _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0(self2);
      };
      LocalShapeInfo.prototype["set_m_triangleIndex"] = LocalShapeInfo.prototype.set_m_triangleIndex = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1(self2, arg0);
      };
      Object.defineProperty(LocalShapeInfo.prototype, "m_triangleIndex", { get: LocalShapeInfo.prototype.get_m_triangleIndex, set: LocalShapeInfo.prototype.set_m_triangleIndex });
      LocalShapeInfo.prototype["__destroy__"] = LocalShapeInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_LocalShapeInfo___destroy___0(self2);
      };
      function LocalConvexResult(hitCollisionObject, localShapeInfo, hitNormalLocal, hitPointLocal, hitFraction) {
        if (hitCollisionObject && typeof hitCollisionObject === "object")
          hitCollisionObject = hitCollisionObject.ptr;
        if (localShapeInfo && typeof localShapeInfo === "object")
          localShapeInfo = localShapeInfo.ptr;
        if (hitNormalLocal && typeof hitNormalLocal === "object")
          hitNormalLocal = hitNormalLocal.ptr;
        if (hitPointLocal && typeof hitPointLocal === "object")
          hitPointLocal = hitPointLocal.ptr;
        if (hitFraction && typeof hitFraction === "object")
          hitFraction = hitFraction.ptr;
        this.ptr = _emscripten_bind_LocalConvexResult_LocalConvexResult_5(hitCollisionObject, localShapeInfo, hitNormalLocal, hitPointLocal, hitFraction);
        getCache(LocalConvexResult)[this.ptr] = this;
      }
      LocalConvexResult.prototype = Object.create(WrapperObject.prototype);
      LocalConvexResult.prototype.constructor = LocalConvexResult;
      LocalConvexResult.prototype.__class__ = LocalConvexResult;
      LocalConvexResult.__cache__ = {};
      Module["LocalConvexResult"] = LocalConvexResult;
      LocalConvexResult.prototype["get_m_hitCollisionObject"] = LocalConvexResult.prototype.get_m_hitCollisionObject = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0(self2), btCollisionObject);
      };
      LocalConvexResult.prototype["set_m_hitCollisionObject"] = LocalConvexResult.prototype.set_m_hitCollisionObject = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1(self2, arg0);
      };
      Object.defineProperty(LocalConvexResult.prototype, "m_hitCollisionObject", { get: LocalConvexResult.prototype.get_m_hitCollisionObject, set: LocalConvexResult.prototype.set_m_hitCollisionObject });
      LocalConvexResult.prototype["get_m_localShapeInfo"] = LocalConvexResult.prototype.get_m_localShapeInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0(self2), LocalShapeInfo);
      };
      LocalConvexResult.prototype["set_m_localShapeInfo"] = LocalConvexResult.prototype.set_m_localShapeInfo = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1(self2, arg0);
      };
      Object.defineProperty(LocalConvexResult.prototype, "m_localShapeInfo", { get: LocalConvexResult.prototype.get_m_localShapeInfo, set: LocalConvexResult.prototype.set_m_localShapeInfo });
      LocalConvexResult.prototype["get_m_hitNormalLocal"] = LocalConvexResult.prototype.get_m_hitNormalLocal = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0(self2), btVector3);
      };
      LocalConvexResult.prototype["set_m_hitNormalLocal"] = LocalConvexResult.prototype.set_m_hitNormalLocal = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1(self2, arg0);
      };
      Object.defineProperty(LocalConvexResult.prototype, "m_hitNormalLocal", { get: LocalConvexResult.prototype.get_m_hitNormalLocal, set: LocalConvexResult.prototype.set_m_hitNormalLocal });
      LocalConvexResult.prototype["get_m_hitPointLocal"] = LocalConvexResult.prototype.get_m_hitPointLocal = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0(self2), btVector3);
      };
      LocalConvexResult.prototype["set_m_hitPointLocal"] = LocalConvexResult.prototype.set_m_hitPointLocal = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1(self2, arg0);
      };
      Object.defineProperty(LocalConvexResult.prototype, "m_hitPointLocal", { get: LocalConvexResult.prototype.get_m_hitPointLocal, set: LocalConvexResult.prototype.set_m_hitPointLocal });
      LocalConvexResult.prototype["get_m_hitFraction"] = LocalConvexResult.prototype.get_m_hitFraction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_LocalConvexResult_get_m_hitFraction_0(self2);
      };
      LocalConvexResult.prototype["set_m_hitFraction"] = LocalConvexResult.prototype.set_m_hitFraction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_LocalConvexResult_set_m_hitFraction_1(self2, arg0);
      };
      Object.defineProperty(LocalConvexResult.prototype, "m_hitFraction", { get: LocalConvexResult.prototype.get_m_hitFraction, set: LocalConvexResult.prototype.set_m_hitFraction });
      LocalConvexResult.prototype["__destroy__"] = LocalConvexResult.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_LocalConvexResult___destroy___0(self2);
      };
      function ClosestConvexResultCallback(convexFromWorld, convexToWorld) {
        if (convexFromWorld && typeof convexFromWorld === "object")
          convexFromWorld = convexFromWorld.ptr;
        if (convexToWorld && typeof convexToWorld === "object")
          convexToWorld = convexToWorld.ptr;
        this.ptr = _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2(convexFromWorld, convexToWorld);
        getCache(ClosestConvexResultCallback)[this.ptr] = this;
      }
      ClosestConvexResultCallback.prototype = Object.create(ConvexResultCallback.prototype);
      ClosestConvexResultCallback.prototype.constructor = ClosestConvexResultCallback;
      ClosestConvexResultCallback.prototype.__class__ = ClosestConvexResultCallback;
      ClosestConvexResultCallback.__cache__ = {};
      Module["ClosestConvexResultCallback"] = ClosestConvexResultCallback;
      ClosestConvexResultCallback.prototype["hasHit"] = ClosestConvexResultCallback.prototype.hasHit = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_ClosestConvexResultCallback_hasHit_0(self2);
      };
      ClosestConvexResultCallback.prototype["get_m_convexFromWorld"] = ClosestConvexResultCallback.prototype.get_m_convexFromWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0(self2), btVector3);
      };
      ClosestConvexResultCallback.prototype["set_m_convexFromWorld"] = ClosestConvexResultCallback.prototype.set_m_convexFromWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_convexFromWorld", { get: ClosestConvexResultCallback.prototype.get_m_convexFromWorld, set: ClosestConvexResultCallback.prototype.set_m_convexFromWorld });
      ClosestConvexResultCallback.prototype["get_m_convexToWorld"] = ClosestConvexResultCallback.prototype.get_m_convexToWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0(self2), btVector3);
      };
      ClosestConvexResultCallback.prototype["set_m_convexToWorld"] = ClosestConvexResultCallback.prototype.set_m_convexToWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_convexToWorld", { get: ClosestConvexResultCallback.prototype.get_m_convexToWorld, set: ClosestConvexResultCallback.prototype.set_m_convexToWorld });
      ClosestConvexResultCallback.prototype["get_m_hitNormalWorld"] = ClosestConvexResultCallback.prototype.get_m_hitNormalWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0(self2), btVector3);
      };
      ClosestConvexResultCallback.prototype["set_m_hitNormalWorld"] = ClosestConvexResultCallback.prototype.set_m_hitNormalWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_hitNormalWorld", { get: ClosestConvexResultCallback.prototype.get_m_hitNormalWorld, set: ClosestConvexResultCallback.prototype.set_m_hitNormalWorld });
      ClosestConvexResultCallback.prototype["get_m_hitPointWorld"] = ClosestConvexResultCallback.prototype.get_m_hitPointWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0(self2), btVector3);
      };
      ClosestConvexResultCallback.prototype["set_m_hitPointWorld"] = ClosestConvexResultCallback.prototype.set_m_hitPointWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_hitPointWorld", { get: ClosestConvexResultCallback.prototype.get_m_hitPointWorld, set: ClosestConvexResultCallback.prototype.set_m_hitPointWorld });
      ClosestConvexResultCallback.prototype["get_m_collisionFilterGroup"] = ClosestConvexResultCallback.prototype.get_m_collisionFilterGroup = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0(self2);
      };
      ClosestConvexResultCallback.prototype["set_m_collisionFilterGroup"] = ClosestConvexResultCallback.prototype.set_m_collisionFilterGroup = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_collisionFilterGroup", { get: ClosestConvexResultCallback.prototype.get_m_collisionFilterGroup, set: ClosestConvexResultCallback.prototype.set_m_collisionFilterGroup });
      ClosestConvexResultCallback.prototype["get_m_collisionFilterMask"] = ClosestConvexResultCallback.prototype.get_m_collisionFilterMask = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0(self2);
      };
      ClosestConvexResultCallback.prototype["set_m_collisionFilterMask"] = ClosestConvexResultCallback.prototype.set_m_collisionFilterMask = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_collisionFilterMask", { get: ClosestConvexResultCallback.prototype.get_m_collisionFilterMask, set: ClosestConvexResultCallback.prototype.set_m_collisionFilterMask });
      ClosestConvexResultCallback.prototype["get_m_closestHitFraction"] = ClosestConvexResultCallback.prototype.get_m_closestHitFraction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0(self2);
      };
      ClosestConvexResultCallback.prototype["set_m_closestHitFraction"] = ClosestConvexResultCallback.prototype.set_m_closestHitFraction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1(self2, arg0);
      };
      Object.defineProperty(ClosestConvexResultCallback.prototype, "m_closestHitFraction", { get: ClosestConvexResultCallback.prototype.get_m_closestHitFraction, set: ClosestConvexResultCallback.prototype.set_m_closestHitFraction });
      ClosestConvexResultCallback.prototype["__destroy__"] = ClosestConvexResultCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_ClosestConvexResultCallback___destroy___0(self2);
      };
      function btConvexTriangleMeshShape(meshInterface, calcAabb) {
        if (meshInterface && typeof meshInterface === "object")
          meshInterface = meshInterface.ptr;
        if (calcAabb && typeof calcAabb === "object")
          calcAabb = calcAabb.ptr;
        if (calcAabb === undefined) {
          this.ptr = _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1(meshInterface);
          getCache(btConvexTriangleMeshShape)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2(meshInterface, calcAabb);
        getCache(btConvexTriangleMeshShape)[this.ptr] = this;
      }
      btConvexTriangleMeshShape.prototype = Object.create(btConvexShape.prototype);
      btConvexTriangleMeshShape.prototype.constructor = btConvexTriangleMeshShape;
      btConvexTriangleMeshShape.prototype.__class__ = btConvexTriangleMeshShape;
      btConvexTriangleMeshShape.__cache__ = {};
      Module["btConvexTriangleMeshShape"] = btConvexTriangleMeshShape;
      btConvexTriangleMeshShape.prototype["setLocalScaling"] = btConvexTriangleMeshShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1(self2, scaling);
      };
      btConvexTriangleMeshShape.prototype["getLocalScaling"] = btConvexTriangleMeshShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0(self2), btVector3);
      };
      btConvexTriangleMeshShape.prototype["calculateLocalInertia"] = btConvexTriangleMeshShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConvexTriangleMeshShape.prototype["setMargin"] = btConvexTriangleMeshShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btConvexTriangleMeshShape_setMargin_1(self2, margin);
      };
      btConvexTriangleMeshShape.prototype["getMargin"] = btConvexTriangleMeshShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConvexTriangleMeshShape_getMargin_0(self2);
      };
      btConvexTriangleMeshShape.prototype["__destroy__"] = btConvexTriangleMeshShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConvexTriangleMeshShape___destroy___0(self2);
      };
      function btBoxShape(boxHalfExtents) {
        if (boxHalfExtents && typeof boxHalfExtents === "object")
          boxHalfExtents = boxHalfExtents.ptr;
        this.ptr = _emscripten_bind_btBoxShape_btBoxShape_1(boxHalfExtents);
        getCache(btBoxShape)[this.ptr] = this;
      }
      btBoxShape.prototype = Object.create(btCollisionShape.prototype);
      btBoxShape.prototype.constructor = btBoxShape;
      btBoxShape.prototype.__class__ = btBoxShape;
      btBoxShape.__cache__ = {};
      Module["btBoxShape"] = btBoxShape;
      btBoxShape.prototype["setMargin"] = btBoxShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btBoxShape_setMargin_1(self2, margin);
      };
      btBoxShape.prototype["getMargin"] = btBoxShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btBoxShape_getMargin_0(self2);
      };
      btBoxShape.prototype["setLocalScaling"] = btBoxShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btBoxShape_setLocalScaling_1(self2, scaling);
      };
      btBoxShape.prototype["getLocalScaling"] = btBoxShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btBoxShape_getLocalScaling_0(self2), btVector3);
      };
      btBoxShape.prototype["calculateLocalInertia"] = btBoxShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btBoxShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btBoxShape.prototype["__destroy__"] = btBoxShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btBoxShape___destroy___0(self2);
      };
      function btCapsuleShapeX(radius, height) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        if (height && typeof height === "object")
          height = height.ptr;
        this.ptr = _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2(radius, height);
        getCache(btCapsuleShapeX)[this.ptr] = this;
      }
      btCapsuleShapeX.prototype = Object.create(btCapsuleShape.prototype);
      btCapsuleShapeX.prototype.constructor = btCapsuleShapeX;
      btCapsuleShapeX.prototype.__class__ = btCapsuleShapeX;
      btCapsuleShapeX.__cache__ = {};
      Module["btCapsuleShapeX"] = btCapsuleShapeX;
      btCapsuleShapeX.prototype["setMargin"] = btCapsuleShapeX.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCapsuleShapeX_setMargin_1(self2, margin);
      };
      btCapsuleShapeX.prototype["getMargin"] = btCapsuleShapeX.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeX_getMargin_0(self2);
      };
      btCapsuleShapeX.prototype["getUpAxis"] = btCapsuleShapeX.prototype.getUpAxis = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeX_getUpAxis_0(self2);
      };
      btCapsuleShapeX.prototype["getRadius"] = btCapsuleShapeX.prototype.getRadius = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeX_getRadius_0(self2);
      };
      btCapsuleShapeX.prototype["getHalfHeight"] = btCapsuleShapeX.prototype.getHalfHeight = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeX_getHalfHeight_0(self2);
      };
      btCapsuleShapeX.prototype["setLocalScaling"] = btCapsuleShapeX.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCapsuleShapeX_setLocalScaling_1(self2, scaling);
      };
      btCapsuleShapeX.prototype["getLocalScaling"] = btCapsuleShapeX.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCapsuleShapeX_getLocalScaling_0(self2), btVector3);
      };
      btCapsuleShapeX.prototype["calculateLocalInertia"] = btCapsuleShapeX.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCapsuleShapeX.prototype["__destroy__"] = btCapsuleShapeX.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCapsuleShapeX___destroy___0(self2);
      };
      function btCapsuleShapeZ(radius, height) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        if (height && typeof height === "object")
          height = height.ptr;
        this.ptr = _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2(radius, height);
        getCache(btCapsuleShapeZ)[this.ptr] = this;
      }
      btCapsuleShapeZ.prototype = Object.create(btCapsuleShape.prototype);
      btCapsuleShapeZ.prototype.constructor = btCapsuleShapeZ;
      btCapsuleShapeZ.prototype.__class__ = btCapsuleShapeZ;
      btCapsuleShapeZ.__cache__ = {};
      Module["btCapsuleShapeZ"] = btCapsuleShapeZ;
      btCapsuleShapeZ.prototype["setMargin"] = btCapsuleShapeZ.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCapsuleShapeZ_setMargin_1(self2, margin);
      };
      btCapsuleShapeZ.prototype["getMargin"] = btCapsuleShapeZ.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeZ_getMargin_0(self2);
      };
      btCapsuleShapeZ.prototype["getUpAxis"] = btCapsuleShapeZ.prototype.getUpAxis = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeZ_getUpAxis_0(self2);
      };
      btCapsuleShapeZ.prototype["getRadius"] = btCapsuleShapeZ.prototype.getRadius = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeZ_getRadius_0(self2);
      };
      btCapsuleShapeZ.prototype["getHalfHeight"] = btCapsuleShapeZ.prototype.getHalfHeight = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCapsuleShapeZ_getHalfHeight_0(self2);
      };
      btCapsuleShapeZ.prototype["setLocalScaling"] = btCapsuleShapeZ.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1(self2, scaling);
      };
      btCapsuleShapeZ.prototype["getLocalScaling"] = btCapsuleShapeZ.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCapsuleShapeZ_getLocalScaling_0(self2), btVector3);
      };
      btCapsuleShapeZ.prototype["calculateLocalInertia"] = btCapsuleShapeZ.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCapsuleShapeZ.prototype["__destroy__"] = btCapsuleShapeZ.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCapsuleShapeZ___destroy___0(self2);
      };
      function btCylinderShapeX(halfExtents) {
        if (halfExtents && typeof halfExtents === "object")
          halfExtents = halfExtents.ptr;
        this.ptr = _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1(halfExtents);
        getCache(btCylinderShapeX)[this.ptr] = this;
      }
      btCylinderShapeX.prototype = Object.create(btCylinderShape.prototype);
      btCylinderShapeX.prototype.constructor = btCylinderShapeX;
      btCylinderShapeX.prototype.__class__ = btCylinderShapeX;
      btCylinderShapeX.__cache__ = {};
      Module["btCylinderShapeX"] = btCylinderShapeX;
      btCylinderShapeX.prototype["setMargin"] = btCylinderShapeX.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCylinderShapeX_setMargin_1(self2, margin);
      };
      btCylinderShapeX.prototype["getMargin"] = btCylinderShapeX.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCylinderShapeX_getMargin_0(self2);
      };
      btCylinderShapeX.prototype["setLocalScaling"] = btCylinderShapeX.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCylinderShapeX_setLocalScaling_1(self2, scaling);
      };
      btCylinderShapeX.prototype["getLocalScaling"] = btCylinderShapeX.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCylinderShapeX_getLocalScaling_0(self2), btVector3);
      };
      btCylinderShapeX.prototype["calculateLocalInertia"] = btCylinderShapeX.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCylinderShapeX.prototype["__destroy__"] = btCylinderShapeX.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCylinderShapeX___destroy___0(self2);
      };
      function btCylinderShapeZ(halfExtents) {
        if (halfExtents && typeof halfExtents === "object")
          halfExtents = halfExtents.ptr;
        this.ptr = _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1(halfExtents);
        getCache(btCylinderShapeZ)[this.ptr] = this;
      }
      btCylinderShapeZ.prototype = Object.create(btCylinderShape.prototype);
      btCylinderShapeZ.prototype.constructor = btCylinderShapeZ;
      btCylinderShapeZ.prototype.__class__ = btCylinderShapeZ;
      btCylinderShapeZ.__cache__ = {};
      Module["btCylinderShapeZ"] = btCylinderShapeZ;
      btCylinderShapeZ.prototype["setMargin"] = btCylinderShapeZ.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCylinderShapeZ_setMargin_1(self2, margin);
      };
      btCylinderShapeZ.prototype["getMargin"] = btCylinderShapeZ.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCylinderShapeZ_getMargin_0(self2);
      };
      btCylinderShapeZ.prototype["setLocalScaling"] = btCylinderShapeZ.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCylinderShapeZ_setLocalScaling_1(self2, scaling);
      };
      btCylinderShapeZ.prototype["getLocalScaling"] = btCylinderShapeZ.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCylinderShapeZ_getLocalScaling_0(self2), btVector3);
      };
      btCylinderShapeZ.prototype["calculateLocalInertia"] = btCylinderShapeZ.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCylinderShapeZ.prototype["__destroy__"] = btCylinderShapeZ.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCylinderShapeZ___destroy___0(self2);
      };
      function btSphereShape(radius) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        this.ptr = _emscripten_bind_btSphereShape_btSphereShape_1(radius);
        getCache(btSphereShape)[this.ptr] = this;
      }
      btSphereShape.prototype = Object.create(btCollisionShape.prototype);
      btSphereShape.prototype.constructor = btSphereShape;
      btSphereShape.prototype.__class__ = btSphereShape;
      btSphereShape.__cache__ = {};
      Module["btSphereShape"] = btSphereShape;
      btSphereShape.prototype["setMargin"] = btSphereShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btSphereShape_setMargin_1(self2, margin);
      };
      btSphereShape.prototype["getMargin"] = btSphereShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btSphereShape_getMargin_0(self2);
      };
      btSphereShape.prototype["setLocalScaling"] = btSphereShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btSphereShape_setLocalScaling_1(self2, scaling);
      };
      btSphereShape.prototype["getLocalScaling"] = btSphereShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btSphereShape_getLocalScaling_0(self2), btVector3);
      };
      btSphereShape.prototype["calculateLocalInertia"] = btSphereShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btSphereShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btSphereShape.prototype["__destroy__"] = btSphereShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btSphereShape___destroy___0(self2);
      };
      function btConvexHullShape(points, numPoints) {
        ensureCache.prepare();
        if (typeof points == "object") {
          points = ensureFloat32(points);
        }
        if (numPoints && typeof numPoints === "object")
          numPoints = numPoints.ptr;
        if (points === undefined) {
          this.ptr = _emscripten_bind_btConvexHullShape_btConvexHullShape_0();
          getCache(btConvexHullShape)[this.ptr] = this;
          return;
        }
        if (numPoints === undefined) {
          this.ptr = _emscripten_bind_btConvexHullShape_btConvexHullShape_1(points);
          getCache(btConvexHullShape)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btConvexHullShape_btConvexHullShape_2(points, numPoints);
        getCache(btConvexHullShape)[this.ptr] = this;
      }
      btConvexHullShape.prototype = Object.create(btCollisionShape.prototype);
      btConvexHullShape.prototype.constructor = btConvexHullShape;
      btConvexHullShape.prototype.__class__ = btConvexHullShape;
      btConvexHullShape.__cache__ = {};
      Module["btConvexHullShape"] = btConvexHullShape;
      btConvexHullShape.prototype["addPoint"] = btConvexHullShape.prototype.addPoint = function(point, recalculateLocalAABB) {
        var self2 = this.ptr;
        if (point && typeof point === "object")
          point = point.ptr;
        if (recalculateLocalAABB && typeof recalculateLocalAABB === "object")
          recalculateLocalAABB = recalculateLocalAABB.ptr;
        if (recalculateLocalAABB === undefined) {
          _emscripten_bind_btConvexHullShape_addPoint_1(self2, point);
          return;
        }
        _emscripten_bind_btConvexHullShape_addPoint_2(self2, point, recalculateLocalAABB);
      };
      btConvexHullShape.prototype["setMargin"] = btConvexHullShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btConvexHullShape_setMargin_1(self2, margin);
      };
      btConvexHullShape.prototype["getMargin"] = btConvexHullShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConvexHullShape_getMargin_0(self2);
      };
      btConvexHullShape.prototype["getNumVertices"] = btConvexHullShape.prototype.getNumVertices = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConvexHullShape_getNumVertices_0(self2);
      };
      btConvexHullShape.prototype["initializePolyhedralFeatures"] = btConvexHullShape.prototype.initializePolyhedralFeatures = function(shiftVerticesByMargin) {
        var self2 = this.ptr;
        if (shiftVerticesByMargin && typeof shiftVerticesByMargin === "object")
          shiftVerticesByMargin = shiftVerticesByMargin.ptr;
        return !!_emscripten_bind_btConvexHullShape_initializePolyhedralFeatures_1(self2, shiftVerticesByMargin);
      };
      btConvexHullShape.prototype["setLocalScaling"] = btConvexHullShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConvexHullShape_setLocalScaling_1(self2, scaling);
      };
      btConvexHullShape.prototype["getLocalScaling"] = btConvexHullShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConvexHullShape_getLocalScaling_0(self2), btVector3);
      };
      btConvexHullShape.prototype["calculateLocalInertia"] = btConvexHullShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConvexHullShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConvexHullShape.prototype["__destroy__"] = btConvexHullShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConvexHullShape___destroy___0(self2);
      };
      function btShapeHull(shape) {
        if (shape && typeof shape === "object")
          shape = shape.ptr;
        this.ptr = _emscripten_bind_btShapeHull_btShapeHull_1(shape);
        getCache(btShapeHull)[this.ptr] = this;
      }
      btShapeHull.prototype = Object.create(WrapperObject.prototype);
      btShapeHull.prototype.constructor = btShapeHull;
      btShapeHull.prototype.__class__ = btShapeHull;
      btShapeHull.__cache__ = {};
      Module["btShapeHull"] = btShapeHull;
      btShapeHull.prototype["buildHull"] = btShapeHull.prototype.buildHull = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        return !!_emscripten_bind_btShapeHull_buildHull_1(self2, margin);
      };
      btShapeHull.prototype["numVertices"] = btShapeHull.prototype.numVertices = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btShapeHull_numVertices_0(self2);
      };
      btShapeHull.prototype["getVertexPointer"] = btShapeHull.prototype.getVertexPointer = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btShapeHull_getVertexPointer_0(self2), btVector3);
      };
      btShapeHull.prototype["__destroy__"] = btShapeHull.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btShapeHull___destroy___0(self2);
      };
      function btConeShapeX(radius, height) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        if (height && typeof height === "object")
          height = height.ptr;
        this.ptr = _emscripten_bind_btConeShapeX_btConeShapeX_2(radius, height);
        getCache(btConeShapeX)[this.ptr] = this;
      }
      btConeShapeX.prototype = Object.create(btConeShape.prototype);
      btConeShapeX.prototype.constructor = btConeShapeX;
      btConeShapeX.prototype.__class__ = btConeShapeX;
      btConeShapeX.__cache__ = {};
      Module["btConeShapeX"] = btConeShapeX;
      btConeShapeX.prototype["setLocalScaling"] = btConeShapeX.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConeShapeX_setLocalScaling_1(self2, scaling);
      };
      btConeShapeX.prototype["getLocalScaling"] = btConeShapeX.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConeShapeX_getLocalScaling_0(self2), btVector3);
      };
      btConeShapeX.prototype["calculateLocalInertia"] = btConeShapeX.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConeShapeX_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConeShapeX.prototype["__destroy__"] = btConeShapeX.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConeShapeX___destroy___0(self2);
      };
      function btConeShapeZ(radius, height) {
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        if (height && typeof height === "object")
          height = height.ptr;
        this.ptr = _emscripten_bind_btConeShapeZ_btConeShapeZ_2(radius, height);
        getCache(btConeShapeZ)[this.ptr] = this;
      }
      btConeShapeZ.prototype = Object.create(btConeShape.prototype);
      btConeShapeZ.prototype.constructor = btConeShapeZ;
      btConeShapeZ.prototype.__class__ = btConeShapeZ;
      btConeShapeZ.__cache__ = {};
      Module["btConeShapeZ"] = btConeShapeZ;
      btConeShapeZ.prototype["setLocalScaling"] = btConeShapeZ.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btConeShapeZ_setLocalScaling_1(self2, scaling);
      };
      btConeShapeZ.prototype["getLocalScaling"] = btConeShapeZ.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btConeShapeZ_getLocalScaling_0(self2), btVector3);
      };
      btConeShapeZ.prototype["calculateLocalInertia"] = btConeShapeZ.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btConeShapeZ_calculateLocalInertia_2(self2, mass, inertia);
      };
      btConeShapeZ.prototype["__destroy__"] = btConeShapeZ.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConeShapeZ___destroy___0(self2);
      };
      function btCompoundShape(enableDynamicAabbTree) {
        if (enableDynamicAabbTree && typeof enableDynamicAabbTree === "object")
          enableDynamicAabbTree = enableDynamicAabbTree.ptr;
        if (enableDynamicAabbTree === undefined) {
          this.ptr = _emscripten_bind_btCompoundShape_btCompoundShape_0();
          getCache(btCompoundShape)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btCompoundShape_btCompoundShape_1(enableDynamicAabbTree);
        getCache(btCompoundShape)[this.ptr] = this;
      }
      btCompoundShape.prototype = Object.create(btCollisionShape.prototype);
      btCompoundShape.prototype.constructor = btCompoundShape;
      btCompoundShape.prototype.__class__ = btCompoundShape;
      btCompoundShape.__cache__ = {};
      Module["btCompoundShape"] = btCompoundShape;
      btCompoundShape.prototype["addChildShape"] = btCompoundShape.prototype.addChildShape = function(localTransform, shape) {
        var self2 = this.ptr;
        if (localTransform && typeof localTransform === "object")
          localTransform = localTransform.ptr;
        if (shape && typeof shape === "object")
          shape = shape.ptr;
        _emscripten_bind_btCompoundShape_addChildShape_2(self2, localTransform, shape);
      };
      btCompoundShape.prototype["removeChildShapeByIndex"] = btCompoundShape.prototype.removeChildShapeByIndex = function(childShapeindex) {
        var self2 = this.ptr;
        if (childShapeindex && typeof childShapeindex === "object")
          childShapeindex = childShapeindex.ptr;
        _emscripten_bind_btCompoundShape_removeChildShapeByIndex_1(self2, childShapeindex);
      };
      btCompoundShape.prototype["getNumChildShapes"] = btCompoundShape.prototype.getNumChildShapes = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCompoundShape_getNumChildShapes_0(self2);
      };
      btCompoundShape.prototype["getChildShape"] = btCompoundShape.prototype.getChildShape = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btCompoundShape_getChildShape_1(self2, index), btCollisionShape);
      };
      btCompoundShape.prototype["setMargin"] = btCompoundShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btCompoundShape_setMargin_1(self2, margin);
      };
      btCompoundShape.prototype["getMargin"] = btCompoundShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCompoundShape_getMargin_0(self2);
      };
      btCompoundShape.prototype["setLocalScaling"] = btCompoundShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btCompoundShape_setLocalScaling_1(self2, scaling);
      };
      btCompoundShape.prototype["getLocalScaling"] = btCompoundShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btCompoundShape_getLocalScaling_0(self2), btVector3);
      };
      btCompoundShape.prototype["calculateLocalInertia"] = btCompoundShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btCompoundShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btCompoundShape.prototype["__destroy__"] = btCompoundShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCompoundShape___destroy___0(self2);
      };
      function btTriangleMesh(use32bitIndices, use4componentVertices) {
        if (use32bitIndices && typeof use32bitIndices === "object")
          use32bitIndices = use32bitIndices.ptr;
        if (use4componentVertices && typeof use4componentVertices === "object")
          use4componentVertices = use4componentVertices.ptr;
        if (use32bitIndices === undefined) {
          this.ptr = _emscripten_bind_btTriangleMesh_btTriangleMesh_0();
          getCache(btTriangleMesh)[this.ptr] = this;
          return;
        }
        if (use4componentVertices === undefined) {
          this.ptr = _emscripten_bind_btTriangleMesh_btTriangleMesh_1(use32bitIndices);
          getCache(btTriangleMesh)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btTriangleMesh_btTriangleMesh_2(use32bitIndices, use4componentVertices);
        getCache(btTriangleMesh)[this.ptr] = this;
      }
      btTriangleMesh.prototype = Object.create(btStridingMeshInterface.prototype);
      btTriangleMesh.prototype.constructor = btTriangleMesh;
      btTriangleMesh.prototype.__class__ = btTriangleMesh;
      btTriangleMesh.__cache__ = {};
      Module["btTriangleMesh"] = btTriangleMesh;
      btTriangleMesh.prototype["addTriangle"] = btTriangleMesh.prototype.addTriangle = function(vertex0, vertex1, vertex2, removeDuplicateVertices) {
        var self2 = this.ptr;
        if (vertex0 && typeof vertex0 === "object")
          vertex0 = vertex0.ptr;
        if (vertex1 && typeof vertex1 === "object")
          vertex1 = vertex1.ptr;
        if (vertex2 && typeof vertex2 === "object")
          vertex2 = vertex2.ptr;
        if (removeDuplicateVertices && typeof removeDuplicateVertices === "object")
          removeDuplicateVertices = removeDuplicateVertices.ptr;
        if (removeDuplicateVertices === undefined) {
          _emscripten_bind_btTriangleMesh_addTriangle_3(self2, vertex0, vertex1, vertex2);
          return;
        }
        _emscripten_bind_btTriangleMesh_addTriangle_4(self2, vertex0, vertex1, vertex2, removeDuplicateVertices);
      };
      btTriangleMesh.prototype["__destroy__"] = btTriangleMesh.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btTriangleMesh___destroy___0(self2);
      };
      function btStaticPlaneShape(planeNormal, planeConstant) {
        if (planeNormal && typeof planeNormal === "object")
          planeNormal = planeNormal.ptr;
        if (planeConstant && typeof planeConstant === "object")
          planeConstant = planeConstant.ptr;
        this.ptr = _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2(planeNormal, planeConstant);
        getCache(btStaticPlaneShape)[this.ptr] = this;
      }
      btStaticPlaneShape.prototype = Object.create(btConcaveShape.prototype);
      btStaticPlaneShape.prototype.constructor = btStaticPlaneShape;
      btStaticPlaneShape.prototype.__class__ = btStaticPlaneShape;
      btStaticPlaneShape.__cache__ = {};
      Module["btStaticPlaneShape"] = btStaticPlaneShape;
      btStaticPlaneShape.prototype["setLocalScaling"] = btStaticPlaneShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btStaticPlaneShape_setLocalScaling_1(self2, scaling);
      };
      btStaticPlaneShape.prototype["getLocalScaling"] = btStaticPlaneShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btStaticPlaneShape_getLocalScaling_0(self2), btVector3);
      };
      btStaticPlaneShape.prototype["calculateLocalInertia"] = btStaticPlaneShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btStaticPlaneShape.prototype["__destroy__"] = btStaticPlaneShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btStaticPlaneShape___destroy___0(self2);
      };
      function btBvhTriangleMeshShape(meshInterface, useQuantizedAabbCompression, buildBvh) {
        if (meshInterface && typeof meshInterface === "object")
          meshInterface = meshInterface.ptr;
        if (useQuantizedAabbCompression && typeof useQuantizedAabbCompression === "object")
          useQuantizedAabbCompression = useQuantizedAabbCompression.ptr;
        if (buildBvh && typeof buildBvh === "object")
          buildBvh = buildBvh.ptr;
        if (buildBvh === undefined) {
          this.ptr = _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2(meshInterface, useQuantizedAabbCompression);
          getCache(btBvhTriangleMeshShape)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3(meshInterface, useQuantizedAabbCompression, buildBvh);
        getCache(btBvhTriangleMeshShape)[this.ptr] = this;
      }
      btBvhTriangleMeshShape.prototype = Object.create(btTriangleMeshShape.prototype);
      btBvhTriangleMeshShape.prototype.constructor = btBvhTriangleMeshShape;
      btBvhTriangleMeshShape.prototype.__class__ = btBvhTriangleMeshShape;
      btBvhTriangleMeshShape.__cache__ = {};
      Module["btBvhTriangleMeshShape"] = btBvhTriangleMeshShape;
      btBvhTriangleMeshShape.prototype["setLocalScaling"] = btBvhTriangleMeshShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1(self2, scaling);
      };
      btBvhTriangleMeshShape.prototype["getLocalScaling"] = btBvhTriangleMeshShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0(self2), btVector3);
      };
      btBvhTriangleMeshShape.prototype["calculateLocalInertia"] = btBvhTriangleMeshShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btBvhTriangleMeshShape.prototype["__destroy__"] = btBvhTriangleMeshShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btBvhTriangleMeshShape___destroy___0(self2);
      };
      function btHeightfieldTerrainShape(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, hdt, flipQuadEdges) {
        if (heightStickWidth && typeof heightStickWidth === "object")
          heightStickWidth = heightStickWidth.ptr;
        if (heightStickLength && typeof heightStickLength === "object")
          heightStickLength = heightStickLength.ptr;
        if (heightfieldData && typeof heightfieldData === "object")
          heightfieldData = heightfieldData.ptr;
        if (heightScale && typeof heightScale === "object")
          heightScale = heightScale.ptr;
        if (minHeight && typeof minHeight === "object")
          minHeight = minHeight.ptr;
        if (maxHeight && typeof maxHeight === "object")
          maxHeight = maxHeight.ptr;
        if (upAxis && typeof upAxis === "object")
          upAxis = upAxis.ptr;
        if (hdt && typeof hdt === "object")
          hdt = hdt.ptr;
        if (flipQuadEdges && typeof flipQuadEdges === "object")
          flipQuadEdges = flipQuadEdges.ptr;
        this.ptr = _emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, hdt, flipQuadEdges);
        getCache(btHeightfieldTerrainShape)[this.ptr] = this;
      }
      btHeightfieldTerrainShape.prototype = Object.create(btConcaveShape.prototype);
      btHeightfieldTerrainShape.prototype.constructor = btHeightfieldTerrainShape;
      btHeightfieldTerrainShape.prototype.__class__ = btHeightfieldTerrainShape;
      btHeightfieldTerrainShape.__cache__ = {};
      Module["btHeightfieldTerrainShape"] = btHeightfieldTerrainShape;
      btHeightfieldTerrainShape.prototype["setMargin"] = btHeightfieldTerrainShape.prototype.setMargin = function(margin) {
        var self2 = this.ptr;
        if (margin && typeof margin === "object")
          margin = margin.ptr;
        _emscripten_bind_btHeightfieldTerrainShape_setMargin_1(self2, margin);
      };
      btHeightfieldTerrainShape.prototype["getMargin"] = btHeightfieldTerrainShape.prototype.getMargin = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btHeightfieldTerrainShape_getMargin_0(self2);
      };
      btHeightfieldTerrainShape.prototype["setLocalScaling"] = btHeightfieldTerrainShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1(self2, scaling);
      };
      btHeightfieldTerrainShape.prototype["getLocalScaling"] = btHeightfieldTerrainShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0(self2), btVector3);
      };
      btHeightfieldTerrainShape.prototype["calculateLocalInertia"] = btHeightfieldTerrainShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btHeightfieldTerrainShape.prototype["__destroy__"] = btHeightfieldTerrainShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btHeightfieldTerrainShape___destroy___0(self2);
      };
      function btDefaultCollisionConstructionInfo() {
        this.ptr = _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0();
        getCache(btDefaultCollisionConstructionInfo)[this.ptr] = this;
      }
      btDefaultCollisionConstructionInfo.prototype = Object.create(WrapperObject.prototype);
      btDefaultCollisionConstructionInfo.prototype.constructor = btDefaultCollisionConstructionInfo;
      btDefaultCollisionConstructionInfo.prototype.__class__ = btDefaultCollisionConstructionInfo;
      btDefaultCollisionConstructionInfo.__cache__ = {};
      Module["btDefaultCollisionConstructionInfo"] = btDefaultCollisionConstructionInfo;
      btDefaultCollisionConstructionInfo.prototype["__destroy__"] = btDefaultCollisionConstructionInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0(self2);
      };
      function btDefaultCollisionConfiguration(info) {
        if (info && typeof info === "object")
          info = info.ptr;
        if (info === undefined) {
          this.ptr = _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0();
          getCache(btDefaultCollisionConfiguration)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1(info);
        getCache(btDefaultCollisionConfiguration)[this.ptr] = this;
      }
      btDefaultCollisionConfiguration.prototype = Object.create(WrapperObject.prototype);
      btDefaultCollisionConfiguration.prototype.constructor = btDefaultCollisionConfiguration;
      btDefaultCollisionConfiguration.prototype.__class__ = btDefaultCollisionConfiguration;
      btDefaultCollisionConfiguration.__cache__ = {};
      Module["btDefaultCollisionConfiguration"] = btDefaultCollisionConfiguration;
      btDefaultCollisionConfiguration.prototype["__destroy__"] = btDefaultCollisionConfiguration.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDefaultCollisionConfiguration___destroy___0(self2);
      };
      function btPersistentManifold() {
        this.ptr = _emscripten_bind_btPersistentManifold_btPersistentManifold_0();
        getCache(btPersistentManifold)[this.ptr] = this;
      }
      btPersistentManifold.prototype = Object.create(WrapperObject.prototype);
      btPersistentManifold.prototype.constructor = btPersistentManifold;
      btPersistentManifold.prototype.__class__ = btPersistentManifold;
      btPersistentManifold.__cache__ = {};
      Module["btPersistentManifold"] = btPersistentManifold;
      btPersistentManifold.prototype["getBody0"] = btPersistentManifold.prototype.getBody0 = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPersistentManifold_getBody0_0(self2), btCollisionObject);
      };
      btPersistentManifold.prototype["getBody1"] = btPersistentManifold.prototype.getBody1 = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPersistentManifold_getBody1_0(self2), btCollisionObject);
      };
      btPersistentManifold.prototype["getNumContacts"] = btPersistentManifold.prototype.getNumContacts = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btPersistentManifold_getNumContacts_0(self2);
      };
      btPersistentManifold.prototype["getContactPoint"] = btPersistentManifold.prototype.getContactPoint = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btPersistentManifold_getContactPoint_1(self2, index), btManifoldPoint);
      };
      btPersistentManifold.prototype["__destroy__"] = btPersistentManifold.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btPersistentManifold___destroy___0(self2);
      };
      function btCollisionDispatcher(conf) {
        if (conf && typeof conf === "object")
          conf = conf.ptr;
        this.ptr = _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1(conf);
        getCache(btCollisionDispatcher)[this.ptr] = this;
      }
      btCollisionDispatcher.prototype = Object.create(btDispatcher.prototype);
      btCollisionDispatcher.prototype.constructor = btCollisionDispatcher;
      btCollisionDispatcher.prototype.__class__ = btCollisionDispatcher;
      btCollisionDispatcher.__cache__ = {};
      Module["btCollisionDispatcher"] = btCollisionDispatcher;
      btCollisionDispatcher.prototype["getNumManifolds"] = btCollisionDispatcher.prototype.getNumManifolds = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btCollisionDispatcher_getNumManifolds_0(self2);
      };
      btCollisionDispatcher.prototype["getManifoldByIndexInternal"] = btCollisionDispatcher.prototype.getManifoldByIndexInternal = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1(self2, index), btPersistentManifold);
      };
      btCollisionDispatcher.prototype["__destroy__"] = btCollisionDispatcher.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCollisionDispatcher___destroy___0(self2);
      };
      function btOverlappingPairCallback() {
        throw "cannot construct a btOverlappingPairCallback, no constructor in IDL";
      }
      btOverlappingPairCallback.prototype = Object.create(WrapperObject.prototype);
      btOverlappingPairCallback.prototype.constructor = btOverlappingPairCallback;
      btOverlappingPairCallback.prototype.__class__ = btOverlappingPairCallback;
      btOverlappingPairCallback.__cache__ = {};
      Module["btOverlappingPairCallback"] = btOverlappingPairCallback;
      btOverlappingPairCallback.prototype["__destroy__"] = btOverlappingPairCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btOverlappingPairCallback___destroy___0(self2);
      };
      function btOverlappingPairCache() {
        throw "cannot construct a btOverlappingPairCache, no constructor in IDL";
      }
      btOverlappingPairCache.prototype = Object.create(WrapperObject.prototype);
      btOverlappingPairCache.prototype.constructor = btOverlappingPairCache;
      btOverlappingPairCache.prototype.__class__ = btOverlappingPairCache;
      btOverlappingPairCache.__cache__ = {};
      Module["btOverlappingPairCache"] = btOverlappingPairCache;
      btOverlappingPairCache.prototype["setInternalGhostPairCallback"] = btOverlappingPairCache.prototype.setInternalGhostPairCallback = function(ghostPairCallback) {
        var self2 = this.ptr;
        if (ghostPairCallback && typeof ghostPairCallback === "object")
          ghostPairCallback = ghostPairCallback.ptr;
        _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1(self2, ghostPairCallback);
      };
      btOverlappingPairCache.prototype["__destroy__"] = btOverlappingPairCache.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btOverlappingPairCache___destroy___0(self2);
      };
      function btAxisSweep3(worldAabbMin, worldAabbMax, maxHandles, pairCache, disableRaycastAccelerator) {
        if (worldAabbMin && typeof worldAabbMin === "object")
          worldAabbMin = worldAabbMin.ptr;
        if (worldAabbMax && typeof worldAabbMax === "object")
          worldAabbMax = worldAabbMax.ptr;
        if (maxHandles && typeof maxHandles === "object")
          maxHandles = maxHandles.ptr;
        if (pairCache && typeof pairCache === "object")
          pairCache = pairCache.ptr;
        if (disableRaycastAccelerator && typeof disableRaycastAccelerator === "object")
          disableRaycastAccelerator = disableRaycastAccelerator.ptr;
        if (maxHandles === undefined) {
          this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_2(worldAabbMin, worldAabbMax);
          getCache(btAxisSweep3)[this.ptr] = this;
          return;
        }
        if (pairCache === undefined) {
          this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_3(worldAabbMin, worldAabbMax, maxHandles);
          getCache(btAxisSweep3)[this.ptr] = this;
          return;
        }
        if (disableRaycastAccelerator === undefined) {
          this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_4(worldAabbMin, worldAabbMax, maxHandles, pairCache);
          getCache(btAxisSweep3)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btAxisSweep3_btAxisSweep3_5(worldAabbMin, worldAabbMax, maxHandles, pairCache, disableRaycastAccelerator);
        getCache(btAxisSweep3)[this.ptr] = this;
      }
      btAxisSweep3.prototype = Object.create(WrapperObject.prototype);
      btAxisSweep3.prototype.constructor = btAxisSweep3;
      btAxisSweep3.prototype.__class__ = btAxisSweep3;
      btAxisSweep3.__cache__ = {};
      Module["btAxisSweep3"] = btAxisSweep3;
      btAxisSweep3.prototype["__destroy__"] = btAxisSweep3.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btAxisSweep3___destroy___0(self2);
      };
      function btBroadphaseInterface() {
        throw "cannot construct a btBroadphaseInterface, no constructor in IDL";
      }
      btBroadphaseInterface.prototype = Object.create(WrapperObject.prototype);
      btBroadphaseInterface.prototype.constructor = btBroadphaseInterface;
      btBroadphaseInterface.prototype.__class__ = btBroadphaseInterface;
      btBroadphaseInterface.__cache__ = {};
      Module["btBroadphaseInterface"] = btBroadphaseInterface;
      btBroadphaseInterface.prototype["__destroy__"] = btBroadphaseInterface.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btBroadphaseInterface___destroy___0(self2);
      };
      function btCollisionConfiguration() {
        throw "cannot construct a btCollisionConfiguration, no constructor in IDL";
      }
      btCollisionConfiguration.prototype = Object.create(WrapperObject.prototype);
      btCollisionConfiguration.prototype.constructor = btCollisionConfiguration;
      btCollisionConfiguration.prototype.__class__ = btCollisionConfiguration;
      btCollisionConfiguration.__cache__ = {};
      Module["btCollisionConfiguration"] = btCollisionConfiguration;
      btCollisionConfiguration.prototype["__destroy__"] = btCollisionConfiguration.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btCollisionConfiguration___destroy___0(self2);
      };
      function btDbvtBroadphase() {
        this.ptr = _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0();
        getCache(btDbvtBroadphase)[this.ptr] = this;
      }
      btDbvtBroadphase.prototype = Object.create(WrapperObject.prototype);
      btDbvtBroadphase.prototype.constructor = btDbvtBroadphase;
      btDbvtBroadphase.prototype.__class__ = btDbvtBroadphase;
      btDbvtBroadphase.__cache__ = {};
      Module["btDbvtBroadphase"] = btDbvtBroadphase;
      btDbvtBroadphase.prototype["__destroy__"] = btDbvtBroadphase.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDbvtBroadphase___destroy___0(self2);
      };
      function btRigidBodyConstructionInfo(mass, motionState, collisionShape, localInertia) {
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (motionState && typeof motionState === "object")
          motionState = motionState.ptr;
        if (collisionShape && typeof collisionShape === "object")
          collisionShape = collisionShape.ptr;
        if (localInertia && typeof localInertia === "object")
          localInertia = localInertia.ptr;
        if (localInertia === undefined) {
          this.ptr = _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3(mass, motionState, collisionShape);
          getCache(btRigidBodyConstructionInfo)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4(mass, motionState, collisionShape, localInertia);
        getCache(btRigidBodyConstructionInfo)[this.ptr] = this;
      }
      btRigidBodyConstructionInfo.prototype = Object.create(WrapperObject.prototype);
      btRigidBodyConstructionInfo.prototype.constructor = btRigidBodyConstructionInfo;
      btRigidBodyConstructionInfo.prototype.__class__ = btRigidBodyConstructionInfo;
      btRigidBodyConstructionInfo.__cache__ = {};
      Module["btRigidBodyConstructionInfo"] = btRigidBodyConstructionInfo;
      btRigidBodyConstructionInfo.prototype["get_m_linearDamping"] = btRigidBodyConstructionInfo.prototype.get_m_linearDamping = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_linearDamping"] = btRigidBodyConstructionInfo.prototype.set_m_linearDamping = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_linearDamping", { get: btRigidBodyConstructionInfo.prototype.get_m_linearDamping, set: btRigidBodyConstructionInfo.prototype.set_m_linearDamping });
      btRigidBodyConstructionInfo.prototype["get_m_angularDamping"] = btRigidBodyConstructionInfo.prototype.get_m_angularDamping = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_angularDamping"] = btRigidBodyConstructionInfo.prototype.set_m_angularDamping = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_angularDamping", { get: btRigidBodyConstructionInfo.prototype.get_m_angularDamping, set: btRigidBodyConstructionInfo.prototype.set_m_angularDamping });
      btRigidBodyConstructionInfo.prototype["get_m_friction"] = btRigidBodyConstructionInfo.prototype.get_m_friction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_friction"] = btRigidBodyConstructionInfo.prototype.set_m_friction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_friction", { get: btRigidBodyConstructionInfo.prototype.get_m_friction, set: btRigidBodyConstructionInfo.prototype.set_m_friction });
      btRigidBodyConstructionInfo.prototype["get_m_rollingFriction"] = btRigidBodyConstructionInfo.prototype.get_m_rollingFriction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_rollingFriction"] = btRigidBodyConstructionInfo.prototype.set_m_rollingFriction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_rollingFriction", { get: btRigidBodyConstructionInfo.prototype.get_m_rollingFriction, set: btRigidBodyConstructionInfo.prototype.set_m_rollingFriction });
      btRigidBodyConstructionInfo.prototype["get_m_restitution"] = btRigidBodyConstructionInfo.prototype.get_m_restitution = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_restitution"] = btRigidBodyConstructionInfo.prototype.set_m_restitution = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_restitution", { get: btRigidBodyConstructionInfo.prototype.get_m_restitution, set: btRigidBodyConstructionInfo.prototype.set_m_restitution });
      btRigidBodyConstructionInfo.prototype["get_m_linearSleepingThreshold"] = btRigidBodyConstructionInfo.prototype.get_m_linearSleepingThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_linearSleepingThreshold"] = btRigidBodyConstructionInfo.prototype.set_m_linearSleepingThreshold = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_linearSleepingThreshold", { get: btRigidBodyConstructionInfo.prototype.get_m_linearSleepingThreshold, set: btRigidBodyConstructionInfo.prototype.set_m_linearSleepingThreshold });
      btRigidBodyConstructionInfo.prototype["get_m_angularSleepingThreshold"] = btRigidBodyConstructionInfo.prototype.get_m_angularSleepingThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_angularSleepingThreshold"] = btRigidBodyConstructionInfo.prototype.set_m_angularSleepingThreshold = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_angularSleepingThreshold", { get: btRigidBodyConstructionInfo.prototype.get_m_angularSleepingThreshold, set: btRigidBodyConstructionInfo.prototype.set_m_angularSleepingThreshold });
      btRigidBodyConstructionInfo.prototype["get_m_additionalDamping"] = btRigidBodyConstructionInfo.prototype.get_m_additionalDamping = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_additionalDamping"] = btRigidBodyConstructionInfo.prototype.set_m_additionalDamping = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_additionalDamping", { get: btRigidBodyConstructionInfo.prototype.get_m_additionalDamping, set: btRigidBodyConstructionInfo.prototype.set_m_additionalDamping });
      btRigidBodyConstructionInfo.prototype["get_m_additionalDampingFactor"] = btRigidBodyConstructionInfo.prototype.get_m_additionalDampingFactor = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_additionalDampingFactor"] = btRigidBodyConstructionInfo.prototype.set_m_additionalDampingFactor = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_additionalDampingFactor", { get: btRigidBodyConstructionInfo.prototype.get_m_additionalDampingFactor, set: btRigidBodyConstructionInfo.prototype.set_m_additionalDampingFactor });
      btRigidBodyConstructionInfo.prototype["get_m_additionalLinearDampingThresholdSqr"] = btRigidBodyConstructionInfo.prototype.get_m_additionalLinearDampingThresholdSqr = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_additionalLinearDampingThresholdSqr"] = btRigidBodyConstructionInfo.prototype.set_m_additionalLinearDampingThresholdSqr = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_additionalLinearDampingThresholdSqr", { get: btRigidBodyConstructionInfo.prototype.get_m_additionalLinearDampingThresholdSqr, set: btRigidBodyConstructionInfo.prototype.set_m_additionalLinearDampingThresholdSqr });
      btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingThresholdSqr"] = btRigidBodyConstructionInfo.prototype.get_m_additionalAngularDampingThresholdSqr = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingThresholdSqr"] = btRigidBodyConstructionInfo.prototype.set_m_additionalAngularDampingThresholdSqr = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_additionalAngularDampingThresholdSqr", { get: btRigidBodyConstructionInfo.prototype.get_m_additionalAngularDampingThresholdSqr, set: btRigidBodyConstructionInfo.prototype.set_m_additionalAngularDampingThresholdSqr });
      btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingFactor"] = btRigidBodyConstructionInfo.prototype.get_m_additionalAngularDampingFactor = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0(self2);
      };
      btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingFactor"] = btRigidBodyConstructionInfo.prototype.set_m_additionalAngularDampingFactor = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1(self2, arg0);
      };
      Object.defineProperty(btRigidBodyConstructionInfo.prototype, "m_additionalAngularDampingFactor", { get: btRigidBodyConstructionInfo.prototype.get_m_additionalAngularDampingFactor, set: btRigidBodyConstructionInfo.prototype.set_m_additionalAngularDampingFactor });
      btRigidBodyConstructionInfo.prototype["__destroy__"] = btRigidBodyConstructionInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btRigidBodyConstructionInfo___destroy___0(self2);
      };
      function btRigidBody(constructionInfo) {
        if (constructionInfo && typeof constructionInfo === "object")
          constructionInfo = constructionInfo.ptr;
        this.ptr = _emscripten_bind_btRigidBody_btRigidBody_1(constructionInfo);
        getCache(btRigidBody)[this.ptr] = this;
      }
      btRigidBody.prototype = Object.create(btCollisionObject.prototype);
      btRigidBody.prototype.constructor = btRigidBody;
      btRigidBody.prototype.__class__ = btRigidBody;
      btRigidBody.__cache__ = {};
      Module["btRigidBody"] = btRigidBody;
      btRigidBody.prototype["getCenterOfMassTransform"] = btRigidBody.prototype.getCenterOfMassTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getCenterOfMassTransform_0(self2), btTransform);
      };
      btRigidBody.prototype["setCenterOfMassTransform"] = btRigidBody.prototype.setCenterOfMassTransform = function(xform) {
        var self2 = this.ptr;
        if (xform && typeof xform === "object")
          xform = xform.ptr;
        _emscripten_bind_btRigidBody_setCenterOfMassTransform_1(self2, xform);
      };
      btRigidBody.prototype["setSleepingThresholds"] = btRigidBody.prototype.setSleepingThresholds = function(linear, angular) {
        var self2 = this.ptr;
        if (linear && typeof linear === "object")
          linear = linear.ptr;
        if (angular && typeof angular === "object")
          angular = angular.ptr;
        _emscripten_bind_btRigidBody_setSleepingThresholds_2(self2, linear, angular);
      };
      btRigidBody.prototype["setDamping"] = btRigidBody.prototype.setDamping = function(lin_damping, ang_damping) {
        var self2 = this.ptr;
        if (lin_damping && typeof lin_damping === "object")
          lin_damping = lin_damping.ptr;
        if (ang_damping && typeof ang_damping === "object")
          ang_damping = ang_damping.ptr;
        _emscripten_bind_btRigidBody_setDamping_2(self2, lin_damping, ang_damping);
      };
      btRigidBody.prototype["setMassProps"] = btRigidBody.prototype.setMassProps = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btRigidBody_setMassProps_2(self2, mass, inertia);
      };
      btRigidBody.prototype["setLinearFactor"] = btRigidBody.prototype.setLinearFactor = function(linearFactor) {
        var self2 = this.ptr;
        if (linearFactor && typeof linearFactor === "object")
          linearFactor = linearFactor.ptr;
        _emscripten_bind_btRigidBody_setLinearFactor_1(self2, linearFactor);
      };
      btRigidBody.prototype["applyTorque"] = btRigidBody.prototype.applyTorque = function(torque) {
        var self2 = this.ptr;
        if (torque && typeof torque === "object")
          torque = torque.ptr;
        _emscripten_bind_btRigidBody_applyTorque_1(self2, torque);
      };
      btRigidBody.prototype["applyForce"] = btRigidBody.prototype.applyForce = function(force, rel_pos) {
        var self2 = this.ptr;
        if (force && typeof force === "object")
          force = force.ptr;
        if (rel_pos && typeof rel_pos === "object")
          rel_pos = rel_pos.ptr;
        _emscripten_bind_btRigidBody_applyForce_2(self2, force, rel_pos);
      };
      btRigidBody.prototype["applyCentralForce"] = btRigidBody.prototype.applyCentralForce = function(force) {
        var self2 = this.ptr;
        if (force && typeof force === "object")
          force = force.ptr;
        _emscripten_bind_btRigidBody_applyCentralForce_1(self2, force);
      };
      btRigidBody.prototype["applyTorqueImpulse"] = btRigidBody.prototype.applyTorqueImpulse = function(torque) {
        var self2 = this.ptr;
        if (torque && typeof torque === "object")
          torque = torque.ptr;
        _emscripten_bind_btRigidBody_applyTorqueImpulse_1(self2, torque);
      };
      btRigidBody.prototype["applyImpulse"] = btRigidBody.prototype.applyImpulse = function(impulse, rel_pos) {
        var self2 = this.ptr;
        if (impulse && typeof impulse === "object")
          impulse = impulse.ptr;
        if (rel_pos && typeof rel_pos === "object")
          rel_pos = rel_pos.ptr;
        _emscripten_bind_btRigidBody_applyImpulse_2(self2, impulse, rel_pos);
      };
      btRigidBody.prototype["applyCentralImpulse"] = btRigidBody.prototype.applyCentralImpulse = function(impulse) {
        var self2 = this.ptr;
        if (impulse && typeof impulse === "object")
          impulse = impulse.ptr;
        _emscripten_bind_btRigidBody_applyCentralImpulse_1(self2, impulse);
      };
      btRigidBody.prototype["updateInertiaTensor"] = btRigidBody.prototype.updateInertiaTensor = function() {
        var self2 = this.ptr;
        _emscripten_bind_btRigidBody_updateInertiaTensor_0(self2);
      };
      btRigidBody.prototype["getLinearVelocity"] = btRigidBody.prototype.getLinearVelocity = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getLinearVelocity_0(self2), btVector3);
      };
      btRigidBody.prototype["getAngularVelocity"] = btRigidBody.prototype.getAngularVelocity = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getAngularVelocity_0(self2), btVector3);
      };
      btRigidBody.prototype["setLinearVelocity"] = btRigidBody.prototype.setLinearVelocity = function(lin_vel) {
        var self2 = this.ptr;
        if (lin_vel && typeof lin_vel === "object")
          lin_vel = lin_vel.ptr;
        _emscripten_bind_btRigidBody_setLinearVelocity_1(self2, lin_vel);
      };
      btRigidBody.prototype["setAngularVelocity"] = btRigidBody.prototype.setAngularVelocity = function(ang_vel) {
        var self2 = this.ptr;
        if (ang_vel && typeof ang_vel === "object")
          ang_vel = ang_vel.ptr;
        _emscripten_bind_btRigidBody_setAngularVelocity_1(self2, ang_vel);
      };
      btRigidBody.prototype["getMotionState"] = btRigidBody.prototype.getMotionState = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getMotionState_0(self2), btMotionState);
      };
      btRigidBody.prototype["setMotionState"] = btRigidBody.prototype.setMotionState = function(motionState) {
        var self2 = this.ptr;
        if (motionState && typeof motionState === "object")
          motionState = motionState.ptr;
        _emscripten_bind_btRigidBody_setMotionState_1(self2, motionState);
      };
      btRigidBody.prototype["setAngularFactor"] = btRigidBody.prototype.setAngularFactor = function(angularFactor) {
        var self2 = this.ptr;
        if (angularFactor && typeof angularFactor === "object")
          angularFactor = angularFactor.ptr;
        _emscripten_bind_btRigidBody_setAngularFactor_1(self2, angularFactor);
      };
      btRigidBody.prototype["upcast"] = btRigidBody.prototype.upcast = function(colObj) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_upcast_1(self2, colObj), btRigidBody);
      };
      btRigidBody.prototype["getAabb"] = btRigidBody.prototype.getAabb = function(aabbMin, aabbMax) {
        var self2 = this.ptr;
        if (aabbMin && typeof aabbMin === "object")
          aabbMin = aabbMin.ptr;
        if (aabbMax && typeof aabbMax === "object")
          aabbMax = aabbMax.ptr;
        _emscripten_bind_btRigidBody_getAabb_2(self2, aabbMin, aabbMax);
      };
      btRigidBody.prototype["applyGravity"] = btRigidBody.prototype.applyGravity = function() {
        var self2 = this.ptr;
        _emscripten_bind_btRigidBody_applyGravity_0(self2);
      };
      btRigidBody.prototype["getGravity"] = btRigidBody.prototype.getGravity = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getGravity_0(self2), btVector3);
      };
      btRigidBody.prototype["setGravity"] = btRigidBody.prototype.setGravity = function(acceleration) {
        var self2 = this.ptr;
        if (acceleration && typeof acceleration === "object")
          acceleration = acceleration.ptr;
        _emscripten_bind_btRigidBody_setGravity_1(self2, acceleration);
      };
      btRigidBody.prototype["setAnisotropicFriction"] = btRigidBody.prototype.setAnisotropicFriction = function(anisotropicFriction, frictionMode) {
        var self2 = this.ptr;
        if (anisotropicFriction && typeof anisotropicFriction === "object")
          anisotropicFriction = anisotropicFriction.ptr;
        if (frictionMode && typeof frictionMode === "object")
          frictionMode = frictionMode.ptr;
        _emscripten_bind_btRigidBody_setAnisotropicFriction_2(self2, anisotropicFriction, frictionMode);
      };
      btRigidBody.prototype["getCollisionShape"] = btRigidBody.prototype.getCollisionShape = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getCollisionShape_0(self2), btCollisionShape);
      };
      btRigidBody.prototype["setContactProcessingThreshold"] = btRigidBody.prototype.setContactProcessingThreshold = function(contactProcessingThreshold) {
        var self2 = this.ptr;
        if (contactProcessingThreshold && typeof contactProcessingThreshold === "object")
          contactProcessingThreshold = contactProcessingThreshold.ptr;
        _emscripten_bind_btRigidBody_setContactProcessingThreshold_1(self2, contactProcessingThreshold);
      };
      btRigidBody.prototype["setActivationState"] = btRigidBody.prototype.setActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btRigidBody_setActivationState_1(self2, newState);
      };
      btRigidBody.prototype["forceActivationState"] = btRigidBody.prototype.forceActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btRigidBody_forceActivationState_1(self2, newState);
      };
      btRigidBody.prototype["activate"] = btRigidBody.prototype.activate = function(forceActivation) {
        var self2 = this.ptr;
        if (forceActivation && typeof forceActivation === "object")
          forceActivation = forceActivation.ptr;
        if (forceActivation === undefined) {
          _emscripten_bind_btRigidBody_activate_0(self2);
          return;
        }
        _emscripten_bind_btRigidBody_activate_1(self2, forceActivation);
      };
      btRigidBody.prototype["isActive"] = btRigidBody.prototype.isActive = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btRigidBody_isActive_0(self2);
      };
      btRigidBody.prototype["isKinematicObject"] = btRigidBody.prototype.isKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btRigidBody_isKinematicObject_0(self2);
      };
      btRigidBody.prototype["isStaticObject"] = btRigidBody.prototype.isStaticObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btRigidBody_isStaticObject_0(self2);
      };
      btRigidBody.prototype["isStaticOrKinematicObject"] = btRigidBody.prototype.isStaticOrKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btRigidBody_isStaticOrKinematicObject_0(self2);
      };
      btRigidBody.prototype["setRestitution"] = btRigidBody.prototype.setRestitution = function(rest) {
        var self2 = this.ptr;
        if (rest && typeof rest === "object")
          rest = rest.ptr;
        _emscripten_bind_btRigidBody_setRestitution_1(self2, rest);
      };
      btRigidBody.prototype["setFriction"] = btRigidBody.prototype.setFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btRigidBody_setFriction_1(self2, frict);
      };
      btRigidBody.prototype["setRollingFriction"] = btRigidBody.prototype.setRollingFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btRigidBody_setRollingFriction_1(self2, frict);
      };
      btRigidBody.prototype["getWorldTransform"] = btRigidBody.prototype.getWorldTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getWorldTransform_0(self2), btTransform);
      };
      btRigidBody.prototype["getCollisionFlags"] = btRigidBody.prototype.getCollisionFlags = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBody_getCollisionFlags_0(self2);
      };
      btRigidBody.prototype["setCollisionFlags"] = btRigidBody.prototype.setCollisionFlags = function(flags) {
        var self2 = this.ptr;
        if (flags && typeof flags === "object")
          flags = flags.ptr;
        _emscripten_bind_btRigidBody_setCollisionFlags_1(self2, flags);
      };
      btRigidBody.prototype["setWorldTransform"] = btRigidBody.prototype.setWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btRigidBody_setWorldTransform_1(self2, worldTrans);
      };
      btRigidBody.prototype["setCollisionShape"] = btRigidBody.prototype.setCollisionShape = function(collisionShape) {
        var self2 = this.ptr;
        if (collisionShape && typeof collisionShape === "object")
          collisionShape = collisionShape.ptr;
        _emscripten_bind_btRigidBody_setCollisionShape_1(self2, collisionShape);
      };
      btRigidBody.prototype["setCcdMotionThreshold"] = btRigidBody.prototype.setCcdMotionThreshold = function(ccdMotionThreshold) {
        var self2 = this.ptr;
        if (ccdMotionThreshold && typeof ccdMotionThreshold === "object")
          ccdMotionThreshold = ccdMotionThreshold.ptr;
        _emscripten_bind_btRigidBody_setCcdMotionThreshold_1(self2, ccdMotionThreshold);
      };
      btRigidBody.prototype["setCcdSweptSphereRadius"] = btRigidBody.prototype.setCcdSweptSphereRadius = function(radius) {
        var self2 = this.ptr;
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        _emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1(self2, radius);
      };
      btRigidBody.prototype["getUserIndex"] = btRigidBody.prototype.getUserIndex = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBody_getUserIndex_0(self2);
      };
      btRigidBody.prototype["setUserIndex"] = btRigidBody.prototype.setUserIndex = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        _emscripten_bind_btRigidBody_setUserIndex_1(self2, index);
      };
      btRigidBody.prototype["getUserPointer"] = btRigidBody.prototype.getUserPointer = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRigidBody_getUserPointer_0(self2), VoidPtr);
      };
      btRigidBody.prototype["setUserPointer"] = btRigidBody.prototype.setUserPointer = function(userPointer) {
        var self2 = this.ptr;
        if (userPointer && typeof userPointer === "object")
          userPointer = userPointer.ptr;
        _emscripten_bind_btRigidBody_setUserPointer_1(self2, userPointer);
      };
      btRigidBody.prototype["getActivationState"] = btRigidBody.prototype.getActivationState = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRigidBody_getActivationState_0(self2);
      };
      btRigidBody.prototype["__destroy__"] = btRigidBody.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btRigidBody___destroy___0(self2);
      };
      function btConstraintSetting() {
        this.ptr = _emscripten_bind_btConstraintSetting_btConstraintSetting_0();
        getCache(btConstraintSetting)[this.ptr] = this;
      }
      btConstraintSetting.prototype = Object.create(WrapperObject.prototype);
      btConstraintSetting.prototype.constructor = btConstraintSetting;
      btConstraintSetting.prototype.__class__ = btConstraintSetting;
      btConstraintSetting.__cache__ = {};
      Module["btConstraintSetting"] = btConstraintSetting;
      btConstraintSetting.prototype["get_m_tau"] = btConstraintSetting.prototype.get_m_tau = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConstraintSetting_get_m_tau_0(self2);
      };
      btConstraintSetting.prototype["set_m_tau"] = btConstraintSetting.prototype.set_m_tau = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btConstraintSetting_set_m_tau_1(self2, arg0);
      };
      Object.defineProperty(btConstraintSetting.prototype, "m_tau", { get: btConstraintSetting.prototype.get_m_tau, set: btConstraintSetting.prototype.set_m_tau });
      btConstraintSetting.prototype["get_m_damping"] = btConstraintSetting.prototype.get_m_damping = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConstraintSetting_get_m_damping_0(self2);
      };
      btConstraintSetting.prototype["set_m_damping"] = btConstraintSetting.prototype.set_m_damping = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btConstraintSetting_set_m_damping_1(self2, arg0);
      };
      Object.defineProperty(btConstraintSetting.prototype, "m_damping", { get: btConstraintSetting.prototype.get_m_damping, set: btConstraintSetting.prototype.set_m_damping });
      btConstraintSetting.prototype["get_m_impulseClamp"] = btConstraintSetting.prototype.get_m_impulseClamp = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0(self2);
      };
      btConstraintSetting.prototype["set_m_impulseClamp"] = btConstraintSetting.prototype.set_m_impulseClamp = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1(self2, arg0);
      };
      Object.defineProperty(btConstraintSetting.prototype, "m_impulseClamp", { get: btConstraintSetting.prototype.get_m_impulseClamp, set: btConstraintSetting.prototype.set_m_impulseClamp });
      btConstraintSetting.prototype["__destroy__"] = btConstraintSetting.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConstraintSetting___destroy___0(self2);
      };
      function btPoint2PointConstraint(rbA, rbB, pivotInA, pivotInB) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (pivotInA && typeof pivotInA === "object")
          pivotInA = pivotInA.ptr;
        if (pivotInB && typeof pivotInB === "object")
          pivotInB = pivotInB.ptr;
        if (pivotInA === undefined) {
          this.ptr = _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2(rbA, rbB);
          getCache(btPoint2PointConstraint)[this.ptr] = this;
          return;
        }
        if (pivotInB === undefined) {
          this.ptr = _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(rbA, rbB, pivotInA);
          getCache(btPoint2PointConstraint)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4(rbA, rbB, pivotInA, pivotInB);
        getCache(btPoint2PointConstraint)[this.ptr] = this;
      }
      btPoint2PointConstraint.prototype = Object.create(btTypedConstraint.prototype);
      btPoint2PointConstraint.prototype.constructor = btPoint2PointConstraint;
      btPoint2PointConstraint.prototype.__class__ = btPoint2PointConstraint;
      btPoint2PointConstraint.__cache__ = {};
      Module["btPoint2PointConstraint"] = btPoint2PointConstraint;
      btPoint2PointConstraint.prototype["setPivotA"] = btPoint2PointConstraint.prototype.setPivotA = function(pivotA) {
        var self2 = this.ptr;
        if (pivotA && typeof pivotA === "object")
          pivotA = pivotA.ptr;
        _emscripten_bind_btPoint2PointConstraint_setPivotA_1(self2, pivotA);
      };
      btPoint2PointConstraint.prototype["setPivotB"] = btPoint2PointConstraint.prototype.setPivotB = function(pivotB) {
        var self2 = this.ptr;
        if (pivotB && typeof pivotB === "object")
          pivotB = pivotB.ptr;
        _emscripten_bind_btPoint2PointConstraint_setPivotB_1(self2, pivotB);
      };
      btPoint2PointConstraint.prototype["getPivotInA"] = btPoint2PointConstraint.prototype.getPivotInA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInA_0(self2), btVector3);
      };
      btPoint2PointConstraint.prototype["getPivotInB"] = btPoint2PointConstraint.prototype.getPivotInB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInB_0(self2), btVector3);
      };
      btPoint2PointConstraint.prototype["enableFeedback"] = btPoint2PointConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btPoint2PointConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btPoint2PointConstraint.prototype["getBreakingImpulseThreshold"] = btPoint2PointConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btPoint2PointConstraint.prototype["setBreakingImpulseThreshold"] = btPoint2PointConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btPoint2PointConstraint.prototype["getParam"] = btPoint2PointConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btPoint2PointConstraint_getParam_2(self2, num, axis);
      };
      btPoint2PointConstraint.prototype["setParam"] = btPoint2PointConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btPoint2PointConstraint_setParam_3(self2, num, value, axis);
      };
      btPoint2PointConstraint.prototype["get_m_setting"] = btPoint2PointConstraint.prototype.get_m_setting = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPoint2PointConstraint_get_m_setting_0(self2), btConstraintSetting);
      };
      btPoint2PointConstraint.prototype["set_m_setting"] = btPoint2PointConstraint.prototype.set_m_setting = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btPoint2PointConstraint_set_m_setting_1(self2, arg0);
      };
      Object.defineProperty(btPoint2PointConstraint.prototype, "m_setting", { get: btPoint2PointConstraint.prototype.get_m_setting, set: btPoint2PointConstraint.prototype.set_m_setting });
      btPoint2PointConstraint.prototype["__destroy__"] = btPoint2PointConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btPoint2PointConstraint___destroy___0(self2);
      };
      function btGeneric6DofSpringConstraint(rbA, rbB, frameInA, frameInB, useLinearFrameReferenceFrameA) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (frameInA && typeof frameInA === "object")
          frameInA = frameInA.ptr;
        if (frameInB && typeof frameInB === "object")
          frameInB = frameInB.ptr;
        if (useLinearFrameReferenceFrameA && typeof useLinearFrameReferenceFrameA === "object")
          useLinearFrameReferenceFrameA = useLinearFrameReferenceFrameA.ptr;
        if (frameInB === undefined) {
          this.ptr = _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3(rbA, rbB, frameInA);
          getCache(btGeneric6DofSpringConstraint)[this.ptr] = this;
          return;
        }
        if (useLinearFrameReferenceFrameA === undefined) {
          this.ptr = _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_4(rbA, rbB, frameInA, frameInB);
          getCache(btGeneric6DofSpringConstraint)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5(rbA, rbB, frameInA, frameInB, useLinearFrameReferenceFrameA);
        getCache(btGeneric6DofSpringConstraint)[this.ptr] = this;
      }
      btGeneric6DofSpringConstraint.prototype = Object.create(btGeneric6DofConstraint.prototype);
      btGeneric6DofSpringConstraint.prototype.constructor = btGeneric6DofSpringConstraint;
      btGeneric6DofSpringConstraint.prototype.__class__ = btGeneric6DofSpringConstraint;
      btGeneric6DofSpringConstraint.__cache__ = {};
      Module["btGeneric6DofSpringConstraint"] = btGeneric6DofSpringConstraint;
      btGeneric6DofSpringConstraint.prototype["enableSpring"] = btGeneric6DofSpringConstraint.prototype.enableSpring = function(index, onOff) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        if (onOff && typeof onOff === "object")
          onOff = onOff.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2(self2, index, onOff);
      };
      btGeneric6DofSpringConstraint.prototype["setStiffness"] = btGeneric6DofSpringConstraint.prototype.setStiffness = function(index, stiffness) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        if (stiffness && typeof stiffness === "object")
          stiffness = stiffness.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2(self2, index, stiffness);
      };
      btGeneric6DofSpringConstraint.prototype["setDamping"] = btGeneric6DofSpringConstraint.prototype.setDamping = function(index, damping) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        if (damping && typeof damping === "object")
          damping = damping.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2(self2, index, damping);
      };
      btGeneric6DofSpringConstraint.prototype["setLinearLowerLimit"] = btGeneric6DofSpringConstraint.prototype.setLinearLowerLimit = function(linearLower) {
        var self2 = this.ptr;
        if (linearLower && typeof linearLower === "object")
          linearLower = linearLower.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1(self2, linearLower);
      };
      btGeneric6DofSpringConstraint.prototype["setLinearUpperLimit"] = btGeneric6DofSpringConstraint.prototype.setLinearUpperLimit = function(linearUpper) {
        var self2 = this.ptr;
        if (linearUpper && typeof linearUpper === "object")
          linearUpper = linearUpper.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1(self2, linearUpper);
      };
      btGeneric6DofSpringConstraint.prototype["setAngularLowerLimit"] = btGeneric6DofSpringConstraint.prototype.setAngularLowerLimit = function(angularLower) {
        var self2 = this.ptr;
        if (angularLower && typeof angularLower === "object")
          angularLower = angularLower.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1(self2, angularLower);
      };
      btGeneric6DofSpringConstraint.prototype["setAngularUpperLimit"] = btGeneric6DofSpringConstraint.prototype.setAngularUpperLimit = function(angularUpper) {
        var self2 = this.ptr;
        if (angularUpper && typeof angularUpper === "object")
          angularUpper = angularUpper.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1(self2, angularUpper);
      };
      btGeneric6DofSpringConstraint.prototype["getFrameOffsetA"] = btGeneric6DofSpringConstraint.prototype.getFrameOffsetA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0(self2), btTransform);
      };
      btGeneric6DofSpringConstraint.prototype["enableFeedback"] = btGeneric6DofSpringConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btGeneric6DofSpringConstraint.prototype["getBreakingImpulseThreshold"] = btGeneric6DofSpringConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btGeneric6DofSpringConstraint.prototype["setBreakingImpulseThreshold"] = btGeneric6DofSpringConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btGeneric6DofSpringConstraint.prototype["getParam"] = btGeneric6DofSpringConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btGeneric6DofSpringConstraint_getParam_2(self2, num, axis);
      };
      btGeneric6DofSpringConstraint.prototype["setParam"] = btGeneric6DofSpringConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint_setParam_3(self2, num, value, axis);
      };
      btGeneric6DofSpringConstraint.prototype["__destroy__"] = btGeneric6DofSpringConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGeneric6DofSpringConstraint___destroy___0(self2);
      };
      function btSequentialImpulseConstraintSolver() {
        this.ptr = _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0();
        getCache(btSequentialImpulseConstraintSolver)[this.ptr] = this;
      }
      btSequentialImpulseConstraintSolver.prototype = Object.create(WrapperObject.prototype);
      btSequentialImpulseConstraintSolver.prototype.constructor = btSequentialImpulseConstraintSolver;
      btSequentialImpulseConstraintSolver.prototype.__class__ = btSequentialImpulseConstraintSolver;
      btSequentialImpulseConstraintSolver.__cache__ = {};
      Module["btSequentialImpulseConstraintSolver"] = btSequentialImpulseConstraintSolver;
      btSequentialImpulseConstraintSolver.prototype["__destroy__"] = btSequentialImpulseConstraintSolver.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0(self2);
      };
      function btConeTwistConstraint(rbA, rbB, rbAFrame, rbBFrame) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (rbAFrame && typeof rbAFrame === "object")
          rbAFrame = rbAFrame.ptr;
        if (rbBFrame && typeof rbBFrame === "object")
          rbBFrame = rbBFrame.ptr;
        if (rbAFrame === undefined) {
          this.ptr = _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2(rbA, rbB);
          getCache(btConeTwistConstraint)[this.ptr] = this;
          return;
        }
        if (rbBFrame === undefined) {
          this.ptr = _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(rbA, rbB, rbAFrame);
          getCache(btConeTwistConstraint)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4(rbA, rbB, rbAFrame, rbBFrame);
        getCache(btConeTwistConstraint)[this.ptr] = this;
      }
      btConeTwistConstraint.prototype = Object.create(btTypedConstraint.prototype);
      btConeTwistConstraint.prototype.constructor = btConeTwistConstraint;
      btConeTwistConstraint.prototype.__class__ = btConeTwistConstraint;
      btConeTwistConstraint.__cache__ = {};
      Module["btConeTwistConstraint"] = btConeTwistConstraint;
      btConeTwistConstraint.prototype["setLimit"] = btConeTwistConstraint.prototype.setLimit = function(limitIndex, limitValue) {
        var self2 = this.ptr;
        if (limitIndex && typeof limitIndex === "object")
          limitIndex = limitIndex.ptr;
        if (limitValue && typeof limitValue === "object")
          limitValue = limitValue.ptr;
        _emscripten_bind_btConeTwistConstraint_setLimit_2(self2, limitIndex, limitValue);
      };
      btConeTwistConstraint.prototype["setAngularOnly"] = btConeTwistConstraint.prototype.setAngularOnly = function(angularOnly) {
        var self2 = this.ptr;
        if (angularOnly && typeof angularOnly === "object")
          angularOnly = angularOnly.ptr;
        _emscripten_bind_btConeTwistConstraint_setAngularOnly_1(self2, angularOnly);
      };
      btConeTwistConstraint.prototype["setDamping"] = btConeTwistConstraint.prototype.setDamping = function(damping) {
        var self2 = this.ptr;
        if (damping && typeof damping === "object")
          damping = damping.ptr;
        _emscripten_bind_btConeTwistConstraint_setDamping_1(self2, damping);
      };
      btConeTwistConstraint.prototype["enableMotor"] = btConeTwistConstraint.prototype.enableMotor = function(b) {
        var self2 = this.ptr;
        if (b && typeof b === "object")
          b = b.ptr;
        _emscripten_bind_btConeTwistConstraint_enableMotor_1(self2, b);
      };
      btConeTwistConstraint.prototype["setMaxMotorImpulse"] = btConeTwistConstraint.prototype.setMaxMotorImpulse = function(maxMotorImpulse) {
        var self2 = this.ptr;
        if (maxMotorImpulse && typeof maxMotorImpulse === "object")
          maxMotorImpulse = maxMotorImpulse.ptr;
        _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1(self2, maxMotorImpulse);
      };
      btConeTwistConstraint.prototype["setMaxMotorImpulseNormalized"] = btConeTwistConstraint.prototype.setMaxMotorImpulseNormalized = function(maxMotorImpulse) {
        var self2 = this.ptr;
        if (maxMotorImpulse && typeof maxMotorImpulse === "object")
          maxMotorImpulse = maxMotorImpulse.ptr;
        _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1(self2, maxMotorImpulse);
      };
      btConeTwistConstraint.prototype["setMotorTarget"] = btConeTwistConstraint.prototype.setMotorTarget = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        _emscripten_bind_btConeTwistConstraint_setMotorTarget_1(self2, q);
      };
      btConeTwistConstraint.prototype["setMotorTargetInConstraintSpace"] = btConeTwistConstraint.prototype.setMotorTargetInConstraintSpace = function(q) {
        var self2 = this.ptr;
        if (q && typeof q === "object")
          q = q.ptr;
        _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1(self2, q);
      };
      btConeTwistConstraint.prototype["enableFeedback"] = btConeTwistConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btConeTwistConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btConeTwistConstraint.prototype["getBreakingImpulseThreshold"] = btConeTwistConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btConeTwistConstraint.prototype["setBreakingImpulseThreshold"] = btConeTwistConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btConeTwistConstraint.prototype["getParam"] = btConeTwistConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btConeTwistConstraint_getParam_2(self2, num, axis);
      };
      btConeTwistConstraint.prototype["setParam"] = btConeTwistConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btConeTwistConstraint_setParam_3(self2, num, value, axis);
      };
      btConeTwistConstraint.prototype["__destroy__"] = btConeTwistConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConeTwistConstraint___destroy___0(self2);
      };
      function btHingeConstraint(rbA, rbB, pivotInA, pivotInB, axisInA, axisInB, useReferenceFrameA) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (pivotInA && typeof pivotInA === "object")
          pivotInA = pivotInA.ptr;
        if (pivotInB && typeof pivotInB === "object")
          pivotInB = pivotInB.ptr;
        if (axisInA && typeof axisInA === "object")
          axisInA = axisInA.ptr;
        if (axisInB && typeof axisInB === "object")
          axisInB = axisInB.ptr;
        if (useReferenceFrameA && typeof useReferenceFrameA === "object")
          useReferenceFrameA = useReferenceFrameA.ptr;
        if (pivotInA === undefined) {
          this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_2(rbA, rbB);
          getCache(btHingeConstraint)[this.ptr] = this;
          return;
        }
        if (pivotInB === undefined) {
          this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_3(rbA, rbB, pivotInA);
          getCache(btHingeConstraint)[this.ptr] = this;
          return;
        }
        if (axisInA === undefined) {
          this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_4(rbA, rbB, pivotInA, pivotInB);
          getCache(btHingeConstraint)[this.ptr] = this;
          return;
        }
        if (axisInB === undefined) {
          this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_5(rbA, rbB, pivotInA, pivotInB, axisInA);
          getCache(btHingeConstraint)[this.ptr] = this;
          return;
        }
        if (useReferenceFrameA === undefined) {
          this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_6(rbA, rbB, pivotInA, pivotInB, axisInA, axisInB);
          getCache(btHingeConstraint)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btHingeConstraint_btHingeConstraint_7(rbA, rbB, pivotInA, pivotInB, axisInA, axisInB, useReferenceFrameA);
        getCache(btHingeConstraint)[this.ptr] = this;
      }
      btHingeConstraint.prototype = Object.create(btTypedConstraint.prototype);
      btHingeConstraint.prototype.constructor = btHingeConstraint;
      btHingeConstraint.prototype.__class__ = btHingeConstraint;
      btHingeConstraint.__cache__ = {};
      Module["btHingeConstraint"] = btHingeConstraint;
      btHingeConstraint.prototype["setLimit"] = btHingeConstraint.prototype.setLimit = function(low, high, softness, biasFactor, relaxationFactor) {
        var self2 = this.ptr;
        if (low && typeof low === "object")
          low = low.ptr;
        if (high && typeof high === "object")
          high = high.ptr;
        if (softness && typeof softness === "object")
          softness = softness.ptr;
        if (biasFactor && typeof biasFactor === "object")
          biasFactor = biasFactor.ptr;
        if (relaxationFactor && typeof relaxationFactor === "object")
          relaxationFactor = relaxationFactor.ptr;
        if (relaxationFactor === undefined) {
          _emscripten_bind_btHingeConstraint_setLimit_4(self2, low, high, softness, biasFactor);
          return;
        }
        _emscripten_bind_btHingeConstraint_setLimit_5(self2, low, high, softness, biasFactor, relaxationFactor);
      };
      btHingeConstraint.prototype["enableAngularMotor"] = btHingeConstraint.prototype.enableAngularMotor = function(enableMotor, targetVelocity, maxMotorImpulse) {
        var self2 = this.ptr;
        if (enableMotor && typeof enableMotor === "object")
          enableMotor = enableMotor.ptr;
        if (targetVelocity && typeof targetVelocity === "object")
          targetVelocity = targetVelocity.ptr;
        if (maxMotorImpulse && typeof maxMotorImpulse === "object")
          maxMotorImpulse = maxMotorImpulse.ptr;
        _emscripten_bind_btHingeConstraint_enableAngularMotor_3(self2, enableMotor, targetVelocity, maxMotorImpulse);
      };
      btHingeConstraint.prototype["setAngularOnly"] = btHingeConstraint.prototype.setAngularOnly = function(angularOnly) {
        var self2 = this.ptr;
        if (angularOnly && typeof angularOnly === "object")
          angularOnly = angularOnly.ptr;
        _emscripten_bind_btHingeConstraint_setAngularOnly_1(self2, angularOnly);
      };
      btHingeConstraint.prototype["enableMotor"] = btHingeConstraint.prototype.enableMotor = function(enableMotor) {
        var self2 = this.ptr;
        if (enableMotor && typeof enableMotor === "object")
          enableMotor = enableMotor.ptr;
        _emscripten_bind_btHingeConstraint_enableMotor_1(self2, enableMotor);
      };
      btHingeConstraint.prototype["setMaxMotorImpulse"] = btHingeConstraint.prototype.setMaxMotorImpulse = function(maxMotorImpulse) {
        var self2 = this.ptr;
        if (maxMotorImpulse && typeof maxMotorImpulse === "object")
          maxMotorImpulse = maxMotorImpulse.ptr;
        _emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1(self2, maxMotorImpulse);
      };
      btHingeConstraint.prototype["setMotorTarget"] = btHingeConstraint.prototype.setMotorTarget = function(targetAngle, dt) {
        var self2 = this.ptr;
        if (targetAngle && typeof targetAngle === "object")
          targetAngle = targetAngle.ptr;
        if (dt && typeof dt === "object")
          dt = dt.ptr;
        _emscripten_bind_btHingeConstraint_setMotorTarget_2(self2, targetAngle, dt);
      };
      btHingeConstraint.prototype["enableFeedback"] = btHingeConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btHingeConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btHingeConstraint.prototype["getBreakingImpulseThreshold"] = btHingeConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btHingeConstraint.prototype["setBreakingImpulseThreshold"] = btHingeConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btHingeConstraint.prototype["getParam"] = btHingeConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btHingeConstraint_getParam_2(self2, num, axis);
      };
      btHingeConstraint.prototype["setParam"] = btHingeConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btHingeConstraint_setParam_3(self2, num, value, axis);
      };
      btHingeConstraint.prototype["__destroy__"] = btHingeConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btHingeConstraint___destroy___0(self2);
      };
      function btSliderConstraint(rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (frameInA && typeof frameInA === "object")
          frameInA = frameInA.ptr;
        if (frameInB && typeof frameInB === "object")
          frameInB = frameInB.ptr;
        if (useLinearReferenceFrameA && typeof useLinearReferenceFrameA === "object")
          useLinearReferenceFrameA = useLinearReferenceFrameA.ptr;
        if (frameInB === undefined) {
          this.ptr = _emscripten_bind_btSliderConstraint_btSliderConstraint_3(rbA, rbB, frameInA);
          getCache(btSliderConstraint)[this.ptr] = this;
          return;
        }
        if (useLinearReferenceFrameA === undefined) {
          this.ptr = _emscripten_bind_btSliderConstraint_btSliderConstraint_4(rbA, rbB, frameInA, frameInB);
          getCache(btSliderConstraint)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btSliderConstraint_btSliderConstraint_5(rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA);
        getCache(btSliderConstraint)[this.ptr] = this;
      }
      btSliderConstraint.prototype = Object.create(btTypedConstraint.prototype);
      btSliderConstraint.prototype.constructor = btSliderConstraint;
      btSliderConstraint.prototype.__class__ = btSliderConstraint;
      btSliderConstraint.__cache__ = {};
      Module["btSliderConstraint"] = btSliderConstraint;
      btSliderConstraint.prototype["setLowerLinLimit"] = btSliderConstraint.prototype.setLowerLinLimit = function(lowerLimit) {
        var self2 = this.ptr;
        if (lowerLimit && typeof lowerLimit === "object")
          lowerLimit = lowerLimit.ptr;
        _emscripten_bind_btSliderConstraint_setLowerLinLimit_1(self2, lowerLimit);
      };
      btSliderConstraint.prototype["setUpperLinLimit"] = btSliderConstraint.prototype.setUpperLinLimit = function(upperLimit) {
        var self2 = this.ptr;
        if (upperLimit && typeof upperLimit === "object")
          upperLimit = upperLimit.ptr;
        _emscripten_bind_btSliderConstraint_setUpperLinLimit_1(self2, upperLimit);
      };
      btSliderConstraint.prototype["setLowerAngLimit"] = btSliderConstraint.prototype.setLowerAngLimit = function(lowerAngLimit) {
        var self2 = this.ptr;
        if (lowerAngLimit && typeof lowerAngLimit === "object")
          lowerAngLimit = lowerAngLimit.ptr;
        _emscripten_bind_btSliderConstraint_setLowerAngLimit_1(self2, lowerAngLimit);
      };
      btSliderConstraint.prototype["setUpperAngLimit"] = btSliderConstraint.prototype.setUpperAngLimit = function(upperAngLimit) {
        var self2 = this.ptr;
        if (upperAngLimit && typeof upperAngLimit === "object")
          upperAngLimit = upperAngLimit.ptr;
        _emscripten_bind_btSliderConstraint_setUpperAngLimit_1(self2, upperAngLimit);
      };
      btSliderConstraint.prototype["enableFeedback"] = btSliderConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btSliderConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btSliderConstraint.prototype["getBreakingImpulseThreshold"] = btSliderConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btSliderConstraint.prototype["setBreakingImpulseThreshold"] = btSliderConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btSliderConstraint.prototype["getParam"] = btSliderConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btSliderConstraint_getParam_2(self2, num, axis);
      };
      btSliderConstraint.prototype["setParam"] = btSliderConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btSliderConstraint_setParam_3(self2, num, value, axis);
      };
      btSliderConstraint.prototype["__destroy__"] = btSliderConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btSliderConstraint___destroy___0(self2);
      };
      function btFixedConstraint(rbA, rbB, frameInA, frameInB) {
        if (rbA && typeof rbA === "object")
          rbA = rbA.ptr;
        if (rbB && typeof rbB === "object")
          rbB = rbB.ptr;
        if (frameInA && typeof frameInA === "object")
          frameInA = frameInA.ptr;
        if (frameInB && typeof frameInB === "object")
          frameInB = frameInB.ptr;
        this.ptr = _emscripten_bind_btFixedConstraint_btFixedConstraint_4(rbA, rbB, frameInA, frameInB);
        getCache(btFixedConstraint)[this.ptr] = this;
      }
      btFixedConstraint.prototype = Object.create(btTypedConstraint.prototype);
      btFixedConstraint.prototype.constructor = btFixedConstraint;
      btFixedConstraint.prototype.__class__ = btFixedConstraint;
      btFixedConstraint.__cache__ = {};
      Module["btFixedConstraint"] = btFixedConstraint;
      btFixedConstraint.prototype["enableFeedback"] = btFixedConstraint.prototype.enableFeedback = function(needsFeedback) {
        var self2 = this.ptr;
        if (needsFeedback && typeof needsFeedback === "object")
          needsFeedback = needsFeedback.ptr;
        _emscripten_bind_btFixedConstraint_enableFeedback_1(self2, needsFeedback);
      };
      btFixedConstraint.prototype["getBreakingImpulseThreshold"] = btFixedConstraint.prototype.getBreakingImpulseThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0(self2);
      };
      btFixedConstraint.prototype["setBreakingImpulseThreshold"] = btFixedConstraint.prototype.setBreakingImpulseThreshold = function(threshold) {
        var self2 = this.ptr;
        if (threshold && typeof threshold === "object")
          threshold = threshold.ptr;
        _emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1(self2, threshold);
      };
      btFixedConstraint.prototype["getParam"] = btFixedConstraint.prototype.getParam = function(num, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        return _emscripten_bind_btFixedConstraint_getParam_2(self2, num, axis);
      };
      btFixedConstraint.prototype["setParam"] = btFixedConstraint.prototype.setParam = function(num, value, axis) {
        var self2 = this.ptr;
        if (num && typeof num === "object")
          num = num.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        if (axis && typeof axis === "object")
          axis = axis.ptr;
        _emscripten_bind_btFixedConstraint_setParam_3(self2, num, value, axis);
      };
      btFixedConstraint.prototype["__destroy__"] = btFixedConstraint.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btFixedConstraint___destroy___0(self2);
      };
      function btConstraintSolver() {
        throw "cannot construct a btConstraintSolver, no constructor in IDL";
      }
      btConstraintSolver.prototype = Object.create(WrapperObject.prototype);
      btConstraintSolver.prototype.constructor = btConstraintSolver;
      btConstraintSolver.prototype.__class__ = btConstraintSolver;
      btConstraintSolver.__cache__ = {};
      Module["btConstraintSolver"] = btConstraintSolver;
      btConstraintSolver.prototype["__destroy__"] = btConstraintSolver.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btConstraintSolver___destroy___0(self2);
      };
      function btDispatcherInfo() {
        throw "cannot construct a btDispatcherInfo, no constructor in IDL";
      }
      btDispatcherInfo.prototype = Object.create(WrapperObject.prototype);
      btDispatcherInfo.prototype.constructor = btDispatcherInfo;
      btDispatcherInfo.prototype.__class__ = btDispatcherInfo;
      btDispatcherInfo.__cache__ = {};
      Module["btDispatcherInfo"] = btDispatcherInfo;
      btDispatcherInfo.prototype["get_m_timeStep"] = btDispatcherInfo.prototype.get_m_timeStep = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcherInfo_get_m_timeStep_0(self2);
      };
      btDispatcherInfo.prototype["set_m_timeStep"] = btDispatcherInfo.prototype.set_m_timeStep = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_timeStep_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_timeStep", { get: btDispatcherInfo.prototype.get_m_timeStep, set: btDispatcherInfo.prototype.set_m_timeStep });
      btDispatcherInfo.prototype["get_m_stepCount"] = btDispatcherInfo.prototype.get_m_stepCount = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcherInfo_get_m_stepCount_0(self2);
      };
      btDispatcherInfo.prototype["set_m_stepCount"] = btDispatcherInfo.prototype.set_m_stepCount = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_stepCount_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_stepCount", { get: btDispatcherInfo.prototype.get_m_stepCount, set: btDispatcherInfo.prototype.set_m_stepCount });
      btDispatcherInfo.prototype["get_m_dispatchFunc"] = btDispatcherInfo.prototype.get_m_dispatchFunc = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0(self2);
      };
      btDispatcherInfo.prototype["set_m_dispatchFunc"] = btDispatcherInfo.prototype.set_m_dispatchFunc = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_dispatchFunc", { get: btDispatcherInfo.prototype.get_m_dispatchFunc, set: btDispatcherInfo.prototype.set_m_dispatchFunc });
      btDispatcherInfo.prototype["get_m_timeOfImpact"] = btDispatcherInfo.prototype.get_m_timeOfImpact = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0(self2);
      };
      btDispatcherInfo.prototype["set_m_timeOfImpact"] = btDispatcherInfo.prototype.set_m_timeOfImpact = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_timeOfImpact", { get: btDispatcherInfo.prototype.get_m_timeOfImpact, set: btDispatcherInfo.prototype.set_m_timeOfImpact });
      btDispatcherInfo.prototype["get_m_useContinuous"] = btDispatcherInfo.prototype.get_m_useContinuous = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0(self2);
      };
      btDispatcherInfo.prototype["set_m_useContinuous"] = btDispatcherInfo.prototype.set_m_useContinuous = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_useContinuous", { get: btDispatcherInfo.prototype.get_m_useContinuous, set: btDispatcherInfo.prototype.set_m_useContinuous });
      btDispatcherInfo.prototype["get_m_enableSatConvex"] = btDispatcherInfo.prototype.get_m_enableSatConvex = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0(self2);
      };
      btDispatcherInfo.prototype["set_m_enableSatConvex"] = btDispatcherInfo.prototype.set_m_enableSatConvex = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_enableSatConvex", { get: btDispatcherInfo.prototype.get_m_enableSatConvex, set: btDispatcherInfo.prototype.set_m_enableSatConvex });
      btDispatcherInfo.prototype["get_m_enableSPU"] = btDispatcherInfo.prototype.get_m_enableSPU = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0(self2);
      };
      btDispatcherInfo.prototype["set_m_enableSPU"] = btDispatcherInfo.prototype.set_m_enableSPU = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_enableSPU", { get: btDispatcherInfo.prototype.get_m_enableSPU, set: btDispatcherInfo.prototype.set_m_enableSPU });
      btDispatcherInfo.prototype["get_m_useEpa"] = btDispatcherInfo.prototype.get_m_useEpa = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btDispatcherInfo_get_m_useEpa_0(self2);
      };
      btDispatcherInfo.prototype["set_m_useEpa"] = btDispatcherInfo.prototype.set_m_useEpa = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_useEpa_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_useEpa", { get: btDispatcherInfo.prototype.get_m_useEpa, set: btDispatcherInfo.prototype.set_m_useEpa });
      btDispatcherInfo.prototype["get_m_allowedCcdPenetration"] = btDispatcherInfo.prototype.get_m_allowedCcdPenetration = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0(self2);
      };
      btDispatcherInfo.prototype["set_m_allowedCcdPenetration"] = btDispatcherInfo.prototype.set_m_allowedCcdPenetration = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_allowedCcdPenetration", { get: btDispatcherInfo.prototype.get_m_allowedCcdPenetration, set: btDispatcherInfo.prototype.set_m_allowedCcdPenetration });
      btDispatcherInfo.prototype["get_m_useConvexConservativeDistanceUtil"] = btDispatcherInfo.prototype.get_m_useConvexConservativeDistanceUtil = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0(self2);
      };
      btDispatcherInfo.prototype["set_m_useConvexConservativeDistanceUtil"] = btDispatcherInfo.prototype.set_m_useConvexConservativeDistanceUtil = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_useConvexConservativeDistanceUtil", { get: btDispatcherInfo.prototype.get_m_useConvexConservativeDistanceUtil, set: btDispatcherInfo.prototype.set_m_useConvexConservativeDistanceUtil });
      btDispatcherInfo.prototype["get_m_convexConservativeDistanceThreshold"] = btDispatcherInfo.prototype.get_m_convexConservativeDistanceThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0(self2);
      };
      btDispatcherInfo.prototype["set_m_convexConservativeDistanceThreshold"] = btDispatcherInfo.prototype.set_m_convexConservativeDistanceThreshold = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1(self2, arg0);
      };
      Object.defineProperty(btDispatcherInfo.prototype, "m_convexConservativeDistanceThreshold", { get: btDispatcherInfo.prototype.get_m_convexConservativeDistanceThreshold, set: btDispatcherInfo.prototype.set_m_convexConservativeDistanceThreshold });
      btDispatcherInfo.prototype["__destroy__"] = btDispatcherInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDispatcherInfo___destroy___0(self2);
      };
      function btContactSolverInfo() {
        throw "cannot construct a btContactSolverInfo, no constructor in IDL";
      }
      btContactSolverInfo.prototype = Object.create(WrapperObject.prototype);
      btContactSolverInfo.prototype.constructor = btContactSolverInfo;
      btContactSolverInfo.prototype.__class__ = btContactSolverInfo;
      btContactSolverInfo.__cache__ = {};
      Module["btContactSolverInfo"] = btContactSolverInfo;
      btContactSolverInfo.prototype["get_m_splitImpulse"] = btContactSolverInfo.prototype.get_m_splitImpulse = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0(self2);
      };
      btContactSolverInfo.prototype["set_m_splitImpulse"] = btContactSolverInfo.prototype.set_m_splitImpulse = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1(self2, arg0);
      };
      Object.defineProperty(btContactSolverInfo.prototype, "m_splitImpulse", { get: btContactSolverInfo.prototype.get_m_splitImpulse, set: btContactSolverInfo.prototype.set_m_splitImpulse });
      btContactSolverInfo.prototype["get_m_splitImpulsePenetrationThreshold"] = btContactSolverInfo.prototype.get_m_splitImpulsePenetrationThreshold = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0(self2);
      };
      btContactSolverInfo.prototype["set_m_splitImpulsePenetrationThreshold"] = btContactSolverInfo.prototype.set_m_splitImpulsePenetrationThreshold = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1(self2, arg0);
      };
      Object.defineProperty(btContactSolverInfo.prototype, "m_splitImpulsePenetrationThreshold", { get: btContactSolverInfo.prototype.get_m_splitImpulsePenetrationThreshold, set: btContactSolverInfo.prototype.set_m_splitImpulsePenetrationThreshold });
      btContactSolverInfo.prototype["get_m_numIterations"] = btContactSolverInfo.prototype.get_m_numIterations = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btContactSolverInfo_get_m_numIterations_0(self2);
      };
      btContactSolverInfo.prototype["set_m_numIterations"] = btContactSolverInfo.prototype.set_m_numIterations = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btContactSolverInfo_set_m_numIterations_1(self2, arg0);
      };
      Object.defineProperty(btContactSolverInfo.prototype, "m_numIterations", { get: btContactSolverInfo.prototype.get_m_numIterations, set: btContactSolverInfo.prototype.set_m_numIterations });
      btContactSolverInfo.prototype["__destroy__"] = btContactSolverInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btContactSolverInfo___destroy___0(self2);
      };
      function btVehicleTuning() {
        this.ptr = _emscripten_bind_btVehicleTuning_btVehicleTuning_0();
        getCache(btVehicleTuning)[this.ptr] = this;
      }
      btVehicleTuning.prototype = Object.create(WrapperObject.prototype);
      btVehicleTuning.prototype.constructor = btVehicleTuning;
      btVehicleTuning.prototype.__class__ = btVehicleTuning;
      btVehicleTuning.__cache__ = {};
      Module["btVehicleTuning"] = btVehicleTuning;
      btVehicleTuning.prototype["get_m_suspensionStiffness"] = btVehicleTuning.prototype.get_m_suspensionStiffness = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0(self2);
      };
      btVehicleTuning.prototype["set_m_suspensionStiffness"] = btVehicleTuning.prototype.set_m_suspensionStiffness = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1(self2, arg0);
      };
      Object.defineProperty(btVehicleTuning.prototype, "m_suspensionStiffness", { get: btVehicleTuning.prototype.get_m_suspensionStiffness, set: btVehicleTuning.prototype.set_m_suspensionStiffness });
      btVehicleTuning.prototype["get_m_suspensionCompression"] = btVehicleTuning.prototype.get_m_suspensionCompression = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0(self2);
      };
      btVehicleTuning.prototype["set_m_suspensionCompression"] = btVehicleTuning.prototype.set_m_suspensionCompression = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1(self2, arg0);
      };
      Object.defineProperty(btVehicleTuning.prototype, "m_suspensionCompression", { get: btVehicleTuning.prototype.get_m_suspensionCompression, set: btVehicleTuning.prototype.set_m_suspensionCompression });
      btVehicleTuning.prototype["get_m_suspensionDamping"] = btVehicleTuning.prototype.get_m_suspensionDamping = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0(self2);
      };
      btVehicleTuning.prototype["set_m_suspensionDamping"] = btVehicleTuning.prototype.set_m_suspensionDamping = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1(self2, arg0);
      };
      Object.defineProperty(btVehicleTuning.prototype, "m_suspensionDamping", { get: btVehicleTuning.prototype.get_m_suspensionDamping, set: btVehicleTuning.prototype.set_m_suspensionDamping });
      btVehicleTuning.prototype["get_m_maxSuspensionTravelCm"] = btVehicleTuning.prototype.get_m_maxSuspensionTravelCm = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0(self2);
      };
      btVehicleTuning.prototype["set_m_maxSuspensionTravelCm"] = btVehicleTuning.prototype.set_m_maxSuspensionTravelCm = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1(self2, arg0);
      };
      Object.defineProperty(btVehicleTuning.prototype, "m_maxSuspensionTravelCm", { get: btVehicleTuning.prototype.get_m_maxSuspensionTravelCm, set: btVehicleTuning.prototype.set_m_maxSuspensionTravelCm });
      btVehicleTuning.prototype["get_m_frictionSlip"] = btVehicleTuning.prototype.get_m_frictionSlip = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0(self2);
      };
      btVehicleTuning.prototype["set_m_frictionSlip"] = btVehicleTuning.prototype.set_m_frictionSlip = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1(self2, arg0);
      };
      Object.defineProperty(btVehicleTuning.prototype, "m_frictionSlip", { get: btVehicleTuning.prototype.get_m_frictionSlip, set: btVehicleTuning.prototype.set_m_frictionSlip });
      btVehicleTuning.prototype["get_m_maxSuspensionForce"] = btVehicleTuning.prototype.get_m_maxSuspensionForce = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0(self2);
      };
      btVehicleTuning.prototype["set_m_maxSuspensionForce"] = btVehicleTuning.prototype.set_m_maxSuspensionForce = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1(self2, arg0);
      };
      Object.defineProperty(btVehicleTuning.prototype, "m_maxSuspensionForce", { get: btVehicleTuning.prototype.get_m_maxSuspensionForce, set: btVehicleTuning.prototype.set_m_maxSuspensionForce });
      function btVehicleRaycasterResult() {
        throw "cannot construct a btVehicleRaycasterResult, no constructor in IDL";
      }
      btVehicleRaycasterResult.prototype = Object.create(WrapperObject.prototype);
      btVehicleRaycasterResult.prototype.constructor = btVehicleRaycasterResult;
      btVehicleRaycasterResult.prototype.__class__ = btVehicleRaycasterResult;
      btVehicleRaycasterResult.__cache__ = {};
      Module["btVehicleRaycasterResult"] = btVehicleRaycasterResult;
      btVehicleRaycasterResult.prototype["get_m_hitPointInWorld"] = btVehicleRaycasterResult.prototype.get_m_hitPointInWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btVehicleRaycasterResult_get_m_hitPointInWorld_0(self2), btVector3);
      };
      btVehicleRaycasterResult.prototype["set_m_hitPointInWorld"] = btVehicleRaycasterResult.prototype.set_m_hitPointInWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleRaycasterResult_set_m_hitPointInWorld_1(self2, arg0);
      };
      Object.defineProperty(btVehicleRaycasterResult.prototype, "m_hitPointInWorld", { get: btVehicleRaycasterResult.prototype.get_m_hitPointInWorld, set: btVehicleRaycasterResult.prototype.set_m_hitPointInWorld });
      btVehicleRaycasterResult.prototype["get_m_hitNormalInWorld"] = btVehicleRaycasterResult.prototype.get_m_hitNormalInWorld = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btVehicleRaycasterResult_get_m_hitNormalInWorld_0(self2), btVector3);
      };
      btVehicleRaycasterResult.prototype["set_m_hitNormalInWorld"] = btVehicleRaycasterResult.prototype.set_m_hitNormalInWorld = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleRaycasterResult_set_m_hitNormalInWorld_1(self2, arg0);
      };
      Object.defineProperty(btVehicleRaycasterResult.prototype, "m_hitNormalInWorld", { get: btVehicleRaycasterResult.prototype.get_m_hitNormalInWorld, set: btVehicleRaycasterResult.prototype.set_m_hitNormalInWorld });
      btVehicleRaycasterResult.prototype["get_m_distFraction"] = btVehicleRaycasterResult.prototype.get_m_distFraction = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btVehicleRaycasterResult_get_m_distFraction_0(self2);
      };
      btVehicleRaycasterResult.prototype["set_m_distFraction"] = btVehicleRaycasterResult.prototype.set_m_distFraction = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btVehicleRaycasterResult_set_m_distFraction_1(self2, arg0);
      };
      Object.defineProperty(btVehicleRaycasterResult.prototype, "m_distFraction", { get: btVehicleRaycasterResult.prototype.get_m_distFraction, set: btVehicleRaycasterResult.prototype.set_m_distFraction });
      btVehicleRaycasterResult.prototype["__destroy__"] = btVehicleRaycasterResult.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btVehicleRaycasterResult___destroy___0(self2);
      };
      function btDefaultVehicleRaycaster(world) {
        if (world && typeof world === "object")
          world = world.ptr;
        this.ptr = _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1(world);
        getCache(btDefaultVehicleRaycaster)[this.ptr] = this;
      }
      btDefaultVehicleRaycaster.prototype = Object.create(btVehicleRaycaster.prototype);
      btDefaultVehicleRaycaster.prototype.constructor = btDefaultVehicleRaycaster;
      btDefaultVehicleRaycaster.prototype.__class__ = btDefaultVehicleRaycaster;
      btDefaultVehicleRaycaster.__cache__ = {};
      Module["btDefaultVehicleRaycaster"] = btDefaultVehicleRaycaster;
      btDefaultVehicleRaycaster.prototype["castRay"] = btDefaultVehicleRaycaster.prototype.castRay = function(from, to, result) {
        var self2 = this.ptr;
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        if (result && typeof result === "object")
          result = result.ptr;
        _emscripten_bind_btDefaultVehicleRaycaster_castRay_3(self2, from, to, result);
      };
      btDefaultVehicleRaycaster.prototype["__destroy__"] = btDefaultVehicleRaycaster.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btDefaultVehicleRaycaster___destroy___0(self2);
      };
      function RaycastInfo() {
        throw "cannot construct a RaycastInfo, no constructor in IDL";
      }
      RaycastInfo.prototype = Object.create(WrapperObject.prototype);
      RaycastInfo.prototype.constructor = RaycastInfo;
      RaycastInfo.prototype.__class__ = RaycastInfo;
      RaycastInfo.__cache__ = {};
      Module["RaycastInfo"] = RaycastInfo;
      RaycastInfo.prototype["get_m_contactNormalWS"] = RaycastInfo.prototype.get_m_contactNormalWS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_RaycastInfo_get_m_contactNormalWS_0(self2), btVector3);
      };
      RaycastInfo.prototype["set_m_contactNormalWS"] = RaycastInfo.prototype.set_m_contactNormalWS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_contactNormalWS_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_contactNormalWS", { get: RaycastInfo.prototype.get_m_contactNormalWS, set: RaycastInfo.prototype.set_m_contactNormalWS });
      RaycastInfo.prototype["get_m_contactPointWS"] = RaycastInfo.prototype.get_m_contactPointWS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_RaycastInfo_get_m_contactPointWS_0(self2), btVector3);
      };
      RaycastInfo.prototype["set_m_contactPointWS"] = RaycastInfo.prototype.set_m_contactPointWS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_contactPointWS_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_contactPointWS", { get: RaycastInfo.prototype.get_m_contactPointWS, set: RaycastInfo.prototype.set_m_contactPointWS });
      RaycastInfo.prototype["get_m_suspensionLength"] = RaycastInfo.prototype.get_m_suspensionLength = function() {
        var self2 = this.ptr;
        return _emscripten_bind_RaycastInfo_get_m_suspensionLength_0(self2);
      };
      RaycastInfo.prototype["set_m_suspensionLength"] = RaycastInfo.prototype.set_m_suspensionLength = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_suspensionLength_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_suspensionLength", { get: RaycastInfo.prototype.get_m_suspensionLength, set: RaycastInfo.prototype.set_m_suspensionLength });
      RaycastInfo.prototype["get_m_hardPointWS"] = RaycastInfo.prototype.get_m_hardPointWS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_RaycastInfo_get_m_hardPointWS_0(self2), btVector3);
      };
      RaycastInfo.prototype["set_m_hardPointWS"] = RaycastInfo.prototype.set_m_hardPointWS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_hardPointWS_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_hardPointWS", { get: RaycastInfo.prototype.get_m_hardPointWS, set: RaycastInfo.prototype.set_m_hardPointWS });
      RaycastInfo.prototype["get_m_wheelDirectionWS"] = RaycastInfo.prototype.get_m_wheelDirectionWS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_RaycastInfo_get_m_wheelDirectionWS_0(self2), btVector3);
      };
      RaycastInfo.prototype["set_m_wheelDirectionWS"] = RaycastInfo.prototype.set_m_wheelDirectionWS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_wheelDirectionWS_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_wheelDirectionWS", { get: RaycastInfo.prototype.get_m_wheelDirectionWS, set: RaycastInfo.prototype.set_m_wheelDirectionWS });
      RaycastInfo.prototype["get_m_wheelAxleWS"] = RaycastInfo.prototype.get_m_wheelAxleWS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_RaycastInfo_get_m_wheelAxleWS_0(self2), btVector3);
      };
      RaycastInfo.prototype["set_m_wheelAxleWS"] = RaycastInfo.prototype.set_m_wheelAxleWS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_wheelAxleWS_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_wheelAxleWS", { get: RaycastInfo.prototype.get_m_wheelAxleWS, set: RaycastInfo.prototype.set_m_wheelAxleWS });
      RaycastInfo.prototype["get_m_isInContact"] = RaycastInfo.prototype.get_m_isInContact = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_RaycastInfo_get_m_isInContact_0(self2);
      };
      RaycastInfo.prototype["set_m_isInContact"] = RaycastInfo.prototype.set_m_isInContact = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_isInContact_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_isInContact", { get: RaycastInfo.prototype.get_m_isInContact, set: RaycastInfo.prototype.set_m_isInContact });
      RaycastInfo.prototype["get_m_groundObject"] = RaycastInfo.prototype.get_m_groundObject = function() {
        var self2 = this.ptr;
        return _emscripten_bind_RaycastInfo_get_m_groundObject_0(self2);
      };
      RaycastInfo.prototype["set_m_groundObject"] = RaycastInfo.prototype.set_m_groundObject = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_RaycastInfo_set_m_groundObject_1(self2, arg0);
      };
      Object.defineProperty(RaycastInfo.prototype, "m_groundObject", { get: RaycastInfo.prototype.get_m_groundObject, set: RaycastInfo.prototype.set_m_groundObject });
      RaycastInfo.prototype["__destroy__"] = RaycastInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_RaycastInfo___destroy___0(self2);
      };
      function btWheelInfoConstructionInfo() {
        throw "cannot construct a btWheelInfoConstructionInfo, no constructor in IDL";
      }
      btWheelInfoConstructionInfo.prototype = Object.create(WrapperObject.prototype);
      btWheelInfoConstructionInfo.prototype.constructor = btWheelInfoConstructionInfo;
      btWheelInfoConstructionInfo.prototype.__class__ = btWheelInfoConstructionInfo;
      btWheelInfoConstructionInfo.__cache__ = {};
      Module["btWheelInfoConstructionInfo"] = btWheelInfoConstructionInfo;
      btWheelInfoConstructionInfo.prototype["get_m_chassisConnectionCS"] = btWheelInfoConstructionInfo.prototype.get_m_chassisConnectionCS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfoConstructionInfo_get_m_chassisConnectionCS_0(self2), btVector3);
      };
      btWheelInfoConstructionInfo.prototype["set_m_chassisConnectionCS"] = btWheelInfoConstructionInfo.prototype.set_m_chassisConnectionCS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_chassisConnectionCS_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_chassisConnectionCS", { get: btWheelInfoConstructionInfo.prototype.get_m_chassisConnectionCS, set: btWheelInfoConstructionInfo.prototype.set_m_chassisConnectionCS });
      btWheelInfoConstructionInfo.prototype["get_m_wheelDirectionCS"] = btWheelInfoConstructionInfo.prototype.get_m_wheelDirectionCS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelDirectionCS_0(self2), btVector3);
      };
      btWheelInfoConstructionInfo.prototype["set_m_wheelDirectionCS"] = btWheelInfoConstructionInfo.prototype.set_m_wheelDirectionCS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelDirectionCS_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_wheelDirectionCS", { get: btWheelInfoConstructionInfo.prototype.get_m_wheelDirectionCS, set: btWheelInfoConstructionInfo.prototype.set_m_wheelDirectionCS });
      btWheelInfoConstructionInfo.prototype["get_m_wheelAxleCS"] = btWheelInfoConstructionInfo.prototype.get_m_wheelAxleCS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelAxleCS_0(self2), btVector3);
      };
      btWheelInfoConstructionInfo.prototype["set_m_wheelAxleCS"] = btWheelInfoConstructionInfo.prototype.set_m_wheelAxleCS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelAxleCS_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_wheelAxleCS", { get: btWheelInfoConstructionInfo.prototype.get_m_wheelAxleCS, set: btWheelInfoConstructionInfo.prototype.set_m_wheelAxleCS });
      btWheelInfoConstructionInfo.prototype["get_m_suspensionRestLength"] = btWheelInfoConstructionInfo.prototype.get_m_suspensionRestLength = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionRestLength_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_suspensionRestLength"] = btWheelInfoConstructionInfo.prototype.set_m_suspensionRestLength = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionRestLength_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_suspensionRestLength", { get: btWheelInfoConstructionInfo.prototype.get_m_suspensionRestLength, set: btWheelInfoConstructionInfo.prototype.set_m_suspensionRestLength });
      btWheelInfoConstructionInfo.prototype["get_m_maxSuspensionTravelCm"] = btWheelInfoConstructionInfo.prototype.get_m_maxSuspensionTravelCm = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionTravelCm_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_maxSuspensionTravelCm"] = btWheelInfoConstructionInfo.prototype.set_m_maxSuspensionTravelCm = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionTravelCm_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_maxSuspensionTravelCm", { get: btWheelInfoConstructionInfo.prototype.get_m_maxSuspensionTravelCm, set: btWheelInfoConstructionInfo.prototype.set_m_maxSuspensionTravelCm });
      btWheelInfoConstructionInfo.prototype["get_m_wheelRadius"] = btWheelInfoConstructionInfo.prototype.get_m_wheelRadius = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelRadius_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_wheelRadius"] = btWheelInfoConstructionInfo.prototype.set_m_wheelRadius = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelRadius_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_wheelRadius", { get: btWheelInfoConstructionInfo.prototype.get_m_wheelRadius, set: btWheelInfoConstructionInfo.prototype.set_m_wheelRadius });
      btWheelInfoConstructionInfo.prototype["get_m_suspensionStiffness"] = btWheelInfoConstructionInfo.prototype.get_m_suspensionStiffness = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_suspensionStiffness_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_suspensionStiffness"] = btWheelInfoConstructionInfo.prototype.set_m_suspensionStiffness = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_suspensionStiffness_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_suspensionStiffness", { get: btWheelInfoConstructionInfo.prototype.get_m_suspensionStiffness, set: btWheelInfoConstructionInfo.prototype.set_m_suspensionStiffness });
      btWheelInfoConstructionInfo.prototype["get_m_wheelsDampingCompression"] = btWheelInfoConstructionInfo.prototype.get_m_wheelsDampingCompression = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingCompression_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_wheelsDampingCompression"] = btWheelInfoConstructionInfo.prototype.set_m_wheelsDampingCompression = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingCompression_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_wheelsDampingCompression", { get: btWheelInfoConstructionInfo.prototype.get_m_wheelsDampingCompression, set: btWheelInfoConstructionInfo.prototype.set_m_wheelsDampingCompression });
      btWheelInfoConstructionInfo.prototype["get_m_wheelsDampingRelaxation"] = btWheelInfoConstructionInfo.prototype.get_m_wheelsDampingRelaxation = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_wheelsDampingRelaxation_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_wheelsDampingRelaxation"] = btWheelInfoConstructionInfo.prototype.set_m_wheelsDampingRelaxation = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_wheelsDampingRelaxation_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_wheelsDampingRelaxation", { get: btWheelInfoConstructionInfo.prototype.get_m_wheelsDampingRelaxation, set: btWheelInfoConstructionInfo.prototype.set_m_wheelsDampingRelaxation });
      btWheelInfoConstructionInfo.prototype["get_m_frictionSlip"] = btWheelInfoConstructionInfo.prototype.get_m_frictionSlip = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_frictionSlip_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_frictionSlip"] = btWheelInfoConstructionInfo.prototype.set_m_frictionSlip = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_frictionSlip_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_frictionSlip", { get: btWheelInfoConstructionInfo.prototype.get_m_frictionSlip, set: btWheelInfoConstructionInfo.prototype.set_m_frictionSlip });
      btWheelInfoConstructionInfo.prototype["get_m_maxSuspensionForce"] = btWheelInfoConstructionInfo.prototype.get_m_maxSuspensionForce = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfoConstructionInfo_get_m_maxSuspensionForce_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_maxSuspensionForce"] = btWheelInfoConstructionInfo.prototype.set_m_maxSuspensionForce = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_maxSuspensionForce_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_maxSuspensionForce", { get: btWheelInfoConstructionInfo.prototype.get_m_maxSuspensionForce, set: btWheelInfoConstructionInfo.prototype.set_m_maxSuspensionForce });
      btWheelInfoConstructionInfo.prototype["get_m_bIsFrontWheel"] = btWheelInfoConstructionInfo.prototype.get_m_bIsFrontWheel = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btWheelInfoConstructionInfo_get_m_bIsFrontWheel_0(self2);
      };
      btWheelInfoConstructionInfo.prototype["set_m_bIsFrontWheel"] = btWheelInfoConstructionInfo.prototype.set_m_bIsFrontWheel = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo_set_m_bIsFrontWheel_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfoConstructionInfo.prototype, "m_bIsFrontWheel", { get: btWheelInfoConstructionInfo.prototype.get_m_bIsFrontWheel, set: btWheelInfoConstructionInfo.prototype.set_m_bIsFrontWheel });
      btWheelInfoConstructionInfo.prototype["__destroy__"] = btWheelInfoConstructionInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btWheelInfoConstructionInfo___destroy___0(self2);
      };
      function btWheelInfo(ci) {
        if (ci && typeof ci === "object")
          ci = ci.ptr;
        this.ptr = _emscripten_bind_btWheelInfo_btWheelInfo_1(ci);
        getCache(btWheelInfo)[this.ptr] = this;
      }
      btWheelInfo.prototype = Object.create(WrapperObject.prototype);
      btWheelInfo.prototype.constructor = btWheelInfo;
      btWheelInfo.prototype.__class__ = btWheelInfo;
      btWheelInfo.__cache__ = {};
      Module["btWheelInfo"] = btWheelInfo;
      btWheelInfo.prototype["getSuspensionRestLength"] = btWheelInfo.prototype.getSuspensionRestLength = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_getSuspensionRestLength_0(self2);
      };
      btWheelInfo.prototype["updateWheel"] = btWheelInfo.prototype.updateWheel = function(chassis, raycastInfo) {
        var self2 = this.ptr;
        if (chassis && typeof chassis === "object")
          chassis = chassis.ptr;
        if (raycastInfo && typeof raycastInfo === "object")
          raycastInfo = raycastInfo.ptr;
        _emscripten_bind_btWheelInfo_updateWheel_2(self2, chassis, raycastInfo);
      };
      btWheelInfo.prototype["get_m_suspensionStiffness"] = btWheelInfo.prototype.get_m_suspensionStiffness = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0(self2);
      };
      btWheelInfo.prototype["set_m_suspensionStiffness"] = btWheelInfo.prototype.set_m_suspensionStiffness = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_suspensionStiffness", { get: btWheelInfo.prototype.get_m_suspensionStiffness, set: btWheelInfo.prototype.set_m_suspensionStiffness });
      btWheelInfo.prototype["get_m_frictionSlip"] = btWheelInfo.prototype.get_m_frictionSlip = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_frictionSlip_0(self2);
      };
      btWheelInfo.prototype["set_m_frictionSlip"] = btWheelInfo.prototype.set_m_frictionSlip = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_frictionSlip_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_frictionSlip", { get: btWheelInfo.prototype.get_m_frictionSlip, set: btWheelInfo.prototype.set_m_frictionSlip });
      btWheelInfo.prototype["get_m_engineForce"] = btWheelInfo.prototype.get_m_engineForce = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_engineForce_0(self2);
      };
      btWheelInfo.prototype["set_m_engineForce"] = btWheelInfo.prototype.set_m_engineForce = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_engineForce_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_engineForce", { get: btWheelInfo.prototype.get_m_engineForce, set: btWheelInfo.prototype.set_m_engineForce });
      btWheelInfo.prototype["get_m_rollInfluence"] = btWheelInfo.prototype.get_m_rollInfluence = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_rollInfluence_0(self2);
      };
      btWheelInfo.prototype["set_m_rollInfluence"] = btWheelInfo.prototype.set_m_rollInfluence = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_rollInfluence_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_rollInfluence", { get: btWheelInfo.prototype.get_m_rollInfluence, set: btWheelInfo.prototype.set_m_rollInfluence });
      btWheelInfo.prototype["get_m_suspensionRestLength1"] = btWheelInfo.prototype.get_m_suspensionRestLength1 = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0(self2);
      };
      btWheelInfo.prototype["set_m_suspensionRestLength1"] = btWheelInfo.prototype.set_m_suspensionRestLength1 = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_suspensionRestLength1", { get: btWheelInfo.prototype.get_m_suspensionRestLength1, set: btWheelInfo.prototype.set_m_suspensionRestLength1 });
      btWheelInfo.prototype["get_m_wheelsRadius"] = btWheelInfo.prototype.get_m_wheelsRadius = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0(self2);
      };
      btWheelInfo.prototype["set_m_wheelsRadius"] = btWheelInfo.prototype.set_m_wheelsRadius = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_wheelsRadius", { get: btWheelInfo.prototype.get_m_wheelsRadius, set: btWheelInfo.prototype.set_m_wheelsRadius });
      btWheelInfo.prototype["get_m_wheelsDampingCompression"] = btWheelInfo.prototype.get_m_wheelsDampingCompression = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0(self2);
      };
      btWheelInfo.prototype["set_m_wheelsDampingCompression"] = btWheelInfo.prototype.set_m_wheelsDampingCompression = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_wheelsDampingCompression", { get: btWheelInfo.prototype.get_m_wheelsDampingCompression, set: btWheelInfo.prototype.set_m_wheelsDampingCompression });
      btWheelInfo.prototype["get_m_wheelsDampingRelaxation"] = btWheelInfo.prototype.get_m_wheelsDampingRelaxation = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0(self2);
      };
      btWheelInfo.prototype["set_m_wheelsDampingRelaxation"] = btWheelInfo.prototype.set_m_wheelsDampingRelaxation = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_wheelsDampingRelaxation", { get: btWheelInfo.prototype.get_m_wheelsDampingRelaxation, set: btWheelInfo.prototype.set_m_wheelsDampingRelaxation });
      btWheelInfo.prototype["get_m_steering"] = btWheelInfo.prototype.get_m_steering = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_steering_0(self2);
      };
      btWheelInfo.prototype["set_m_steering"] = btWheelInfo.prototype.set_m_steering = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_steering_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_steering", { get: btWheelInfo.prototype.get_m_steering, set: btWheelInfo.prototype.set_m_steering });
      btWheelInfo.prototype["get_m_maxSuspensionForce"] = btWheelInfo.prototype.get_m_maxSuspensionForce = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0(self2);
      };
      btWheelInfo.prototype["set_m_maxSuspensionForce"] = btWheelInfo.prototype.set_m_maxSuspensionForce = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_maxSuspensionForce", { get: btWheelInfo.prototype.get_m_maxSuspensionForce, set: btWheelInfo.prototype.set_m_maxSuspensionForce });
      btWheelInfo.prototype["get_m_maxSuspensionTravelCm"] = btWheelInfo.prototype.get_m_maxSuspensionTravelCm = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0(self2);
      };
      btWheelInfo.prototype["set_m_maxSuspensionTravelCm"] = btWheelInfo.prototype.set_m_maxSuspensionTravelCm = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_maxSuspensionTravelCm", { get: btWheelInfo.prototype.get_m_maxSuspensionTravelCm, set: btWheelInfo.prototype.set_m_maxSuspensionTravelCm });
      btWheelInfo.prototype["get_m_wheelsSuspensionForce"] = btWheelInfo.prototype.get_m_wheelsSuspensionForce = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_wheelsSuspensionForce_0(self2);
      };
      btWheelInfo.prototype["set_m_wheelsSuspensionForce"] = btWheelInfo.prototype.set_m_wheelsSuspensionForce = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_wheelsSuspensionForce_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_wheelsSuspensionForce", { get: btWheelInfo.prototype.get_m_wheelsSuspensionForce, set: btWheelInfo.prototype.set_m_wheelsSuspensionForce });
      btWheelInfo.prototype["get_m_bIsFrontWheel"] = btWheelInfo.prototype.get_m_bIsFrontWheel = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0(self2);
      };
      btWheelInfo.prototype["set_m_bIsFrontWheel"] = btWheelInfo.prototype.set_m_bIsFrontWheel = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_bIsFrontWheel", { get: btWheelInfo.prototype.get_m_bIsFrontWheel, set: btWheelInfo.prototype.set_m_bIsFrontWheel });
      btWheelInfo.prototype["get_m_raycastInfo"] = btWheelInfo.prototype.get_m_raycastInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfo_get_m_raycastInfo_0(self2), RaycastInfo);
      };
      btWheelInfo.prototype["set_m_raycastInfo"] = btWheelInfo.prototype.set_m_raycastInfo = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_raycastInfo_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_raycastInfo", { get: btWheelInfo.prototype.get_m_raycastInfo, set: btWheelInfo.prototype.set_m_raycastInfo });
      btWheelInfo.prototype["get_m_chassisConnectionPointCS"] = btWheelInfo.prototype.get_m_chassisConnectionPointCS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfo_get_m_chassisConnectionPointCS_0(self2), btVector3);
      };
      btWheelInfo.prototype["set_m_chassisConnectionPointCS"] = btWheelInfo.prototype.set_m_chassisConnectionPointCS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_chassisConnectionPointCS_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_chassisConnectionPointCS", { get: btWheelInfo.prototype.get_m_chassisConnectionPointCS, set: btWheelInfo.prototype.set_m_chassisConnectionPointCS });
      btWheelInfo.prototype["get_m_worldTransform"] = btWheelInfo.prototype.get_m_worldTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfo_get_m_worldTransform_0(self2), btTransform);
      };
      btWheelInfo.prototype["set_m_worldTransform"] = btWheelInfo.prototype.set_m_worldTransform = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_worldTransform_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_worldTransform", { get: btWheelInfo.prototype.get_m_worldTransform, set: btWheelInfo.prototype.set_m_worldTransform });
      btWheelInfo.prototype["get_m_wheelDirectionCS"] = btWheelInfo.prototype.get_m_wheelDirectionCS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfo_get_m_wheelDirectionCS_0(self2), btVector3);
      };
      btWheelInfo.prototype["set_m_wheelDirectionCS"] = btWheelInfo.prototype.set_m_wheelDirectionCS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_wheelDirectionCS_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_wheelDirectionCS", { get: btWheelInfo.prototype.get_m_wheelDirectionCS, set: btWheelInfo.prototype.set_m_wheelDirectionCS });
      btWheelInfo.prototype["get_m_wheelAxleCS"] = btWheelInfo.prototype.get_m_wheelAxleCS = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btWheelInfo_get_m_wheelAxleCS_0(self2), btVector3);
      };
      btWheelInfo.prototype["set_m_wheelAxleCS"] = btWheelInfo.prototype.set_m_wheelAxleCS = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_wheelAxleCS_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_wheelAxleCS", { get: btWheelInfo.prototype.get_m_wheelAxleCS, set: btWheelInfo.prototype.set_m_wheelAxleCS });
      btWheelInfo.prototype["get_m_rotation"] = btWheelInfo.prototype.get_m_rotation = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_rotation_0(self2);
      };
      btWheelInfo.prototype["set_m_rotation"] = btWheelInfo.prototype.set_m_rotation = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_rotation_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_rotation", { get: btWheelInfo.prototype.get_m_rotation, set: btWheelInfo.prototype.set_m_rotation });
      btWheelInfo.prototype["get_m_deltaRotation"] = btWheelInfo.prototype.get_m_deltaRotation = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_deltaRotation_0(self2);
      };
      btWheelInfo.prototype["set_m_deltaRotation"] = btWheelInfo.prototype.set_m_deltaRotation = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_deltaRotation_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_deltaRotation", { get: btWheelInfo.prototype.get_m_deltaRotation, set: btWheelInfo.prototype.set_m_deltaRotation });
      btWheelInfo.prototype["get_m_brake"] = btWheelInfo.prototype.get_m_brake = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_brake_0(self2);
      };
      btWheelInfo.prototype["set_m_brake"] = btWheelInfo.prototype.set_m_brake = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_brake_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_brake", { get: btWheelInfo.prototype.get_m_brake, set: btWheelInfo.prototype.set_m_brake });
      btWheelInfo.prototype["get_m_clippedInvContactDotSuspension"] = btWheelInfo.prototype.get_m_clippedInvContactDotSuspension = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_clippedInvContactDotSuspension_0(self2);
      };
      btWheelInfo.prototype["set_m_clippedInvContactDotSuspension"] = btWheelInfo.prototype.set_m_clippedInvContactDotSuspension = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_clippedInvContactDotSuspension_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_clippedInvContactDotSuspension", { get: btWheelInfo.prototype.get_m_clippedInvContactDotSuspension, set: btWheelInfo.prototype.set_m_clippedInvContactDotSuspension });
      btWheelInfo.prototype["get_m_suspensionRelativeVelocity"] = btWheelInfo.prototype.get_m_suspensionRelativeVelocity = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_suspensionRelativeVelocity_0(self2);
      };
      btWheelInfo.prototype["set_m_suspensionRelativeVelocity"] = btWheelInfo.prototype.set_m_suspensionRelativeVelocity = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_suspensionRelativeVelocity_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_suspensionRelativeVelocity", { get: btWheelInfo.prototype.get_m_suspensionRelativeVelocity, set: btWheelInfo.prototype.set_m_suspensionRelativeVelocity });
      btWheelInfo.prototype["get_m_skidInfo"] = btWheelInfo.prototype.get_m_skidInfo = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btWheelInfo_get_m_skidInfo_0(self2);
      };
      btWheelInfo.prototype["set_m_skidInfo"] = btWheelInfo.prototype.set_m_skidInfo = function(arg0) {
        var self2 = this.ptr;
        if (arg0 && typeof arg0 === "object")
          arg0 = arg0.ptr;
        _emscripten_bind_btWheelInfo_set_m_skidInfo_1(self2, arg0);
      };
      Object.defineProperty(btWheelInfo.prototype, "m_skidInfo", { get: btWheelInfo.prototype.get_m_skidInfo, set: btWheelInfo.prototype.set_m_skidInfo });
      btWheelInfo.prototype["__destroy__"] = btWheelInfo.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btWheelInfo___destroy___0(self2);
      };
      function btKinematicCharacterController(ghostObject, convexShape, stepHeight, upAxis) {
        if (ghostObject && typeof ghostObject === "object")
          ghostObject = ghostObject.ptr;
        if (convexShape && typeof convexShape === "object")
          convexShape = convexShape.ptr;
        if (stepHeight && typeof stepHeight === "object")
          stepHeight = stepHeight.ptr;
        if (upAxis && typeof upAxis === "object")
          upAxis = upAxis.ptr;
        if (upAxis === undefined) {
          this.ptr = _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3(ghostObject, convexShape, stepHeight);
          getCache(btKinematicCharacterController)[this.ptr] = this;
          return;
        }
        this.ptr = _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4(ghostObject, convexShape, stepHeight, upAxis);
        getCache(btKinematicCharacterController)[this.ptr] = this;
      }
      btKinematicCharacterController.prototype = Object.create(btActionInterface.prototype);
      btKinematicCharacterController.prototype.constructor = btKinematicCharacterController;
      btKinematicCharacterController.prototype.__class__ = btKinematicCharacterController;
      btKinematicCharacterController.__cache__ = {};
      Module["btKinematicCharacterController"] = btKinematicCharacterController;
      btKinematicCharacterController.prototype["setWalkDirection"] = btKinematicCharacterController.prototype.setWalkDirection = function(walkDirection) {
        var self2 = this.ptr;
        if (walkDirection && typeof walkDirection === "object")
          walkDirection = walkDirection.ptr;
        _emscripten_bind_btKinematicCharacterController_setWalkDirection_1(self2, walkDirection);
      };
      btKinematicCharacterController.prototype["setVelocityForTimeInterval"] = btKinematicCharacterController.prototype.setVelocityForTimeInterval = function(velocity, timeInterval) {
        var self2 = this.ptr;
        if (velocity && typeof velocity === "object")
          velocity = velocity.ptr;
        if (timeInterval && typeof timeInterval === "object")
          timeInterval = timeInterval.ptr;
        _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2(self2, velocity, timeInterval);
      };
      btKinematicCharacterController.prototype["warp"] = btKinematicCharacterController.prototype.warp = function(origin) {
        var self2 = this.ptr;
        if (origin && typeof origin === "object")
          origin = origin.ptr;
        _emscripten_bind_btKinematicCharacterController_warp_1(self2, origin);
      };
      btKinematicCharacterController.prototype["preStep"] = btKinematicCharacterController.prototype.preStep = function(collisionWorld) {
        var self2 = this.ptr;
        if (collisionWorld && typeof collisionWorld === "object")
          collisionWorld = collisionWorld.ptr;
        _emscripten_bind_btKinematicCharacterController_preStep_1(self2, collisionWorld);
      };
      btKinematicCharacterController.prototype["playerStep"] = btKinematicCharacterController.prototype.playerStep = function(collisionWorld, dt) {
        var self2 = this.ptr;
        if (collisionWorld && typeof collisionWorld === "object")
          collisionWorld = collisionWorld.ptr;
        if (dt && typeof dt === "object")
          dt = dt.ptr;
        _emscripten_bind_btKinematicCharacterController_playerStep_2(self2, collisionWorld, dt);
      };
      btKinematicCharacterController.prototype["setFallSpeed"] = btKinematicCharacterController.prototype.setFallSpeed = function(fallSpeed) {
        var self2 = this.ptr;
        if (fallSpeed && typeof fallSpeed === "object")
          fallSpeed = fallSpeed.ptr;
        _emscripten_bind_btKinematicCharacterController_setFallSpeed_1(self2, fallSpeed);
      };
      btKinematicCharacterController.prototype["setJumpSpeed"] = btKinematicCharacterController.prototype.setJumpSpeed = function(jumpSpeed) {
        var self2 = this.ptr;
        if (jumpSpeed && typeof jumpSpeed === "object")
          jumpSpeed = jumpSpeed.ptr;
        _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1(self2, jumpSpeed);
      };
      btKinematicCharacterController.prototype["setMaxJumpHeight"] = btKinematicCharacterController.prototype.setMaxJumpHeight = function(maxJumpHeight) {
        var self2 = this.ptr;
        if (maxJumpHeight && typeof maxJumpHeight === "object")
          maxJumpHeight = maxJumpHeight.ptr;
        _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1(self2, maxJumpHeight);
      };
      btKinematicCharacterController.prototype["canJump"] = btKinematicCharacterController.prototype.canJump = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btKinematicCharacterController_canJump_0(self2);
      };
      btKinematicCharacterController.prototype["jump"] = btKinematicCharacterController.prototype.jump = function() {
        var self2 = this.ptr;
        _emscripten_bind_btKinematicCharacterController_jump_0(self2);
      };
      btKinematicCharacterController.prototype["setGravity"] = btKinematicCharacterController.prototype.setGravity = function(acceleration) {
        var self2 = this.ptr;
        if (acceleration && typeof acceleration === "object")
          acceleration = acceleration.ptr;
        _emscripten_bind_btKinematicCharacterController_setGravity_1(self2, acceleration);
      };
      btKinematicCharacterController.prototype["getGravity"] = btKinematicCharacterController.prototype.getGravity = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btKinematicCharacterController_getGravity_0(self2), btVector3);
      };
      btKinematicCharacterController.prototype["setMaxSlope"] = btKinematicCharacterController.prototype.setMaxSlope = function(slopeRadians) {
        var self2 = this.ptr;
        if (slopeRadians && typeof slopeRadians === "object")
          slopeRadians = slopeRadians.ptr;
        _emscripten_bind_btKinematicCharacterController_setMaxSlope_1(self2, slopeRadians);
      };
      btKinematicCharacterController.prototype["getMaxSlope"] = btKinematicCharacterController.prototype.getMaxSlope = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btKinematicCharacterController_getMaxSlope_0(self2);
      };
      btKinematicCharacterController.prototype["getGhostObject"] = btKinematicCharacterController.prototype.getGhostObject = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btKinematicCharacterController_getGhostObject_0(self2), btPairCachingGhostObject);
      };
      btKinematicCharacterController.prototype["setUseGhostSweepTest"] = btKinematicCharacterController.prototype.setUseGhostSweepTest = function(useGhostObjectSweepTest) {
        var self2 = this.ptr;
        if (useGhostObjectSweepTest && typeof useGhostObjectSweepTest === "object")
          useGhostObjectSweepTest = useGhostObjectSweepTest.ptr;
        _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1(self2, useGhostObjectSweepTest);
      };
      btKinematicCharacterController.prototype["onGround"] = btKinematicCharacterController.prototype.onGround = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btKinematicCharacterController_onGround_0(self2);
      };
      btKinematicCharacterController.prototype["setUpInterpolate"] = btKinematicCharacterController.prototype.setUpInterpolate = function(value) {
        var self2 = this.ptr;
        if (value && typeof value === "object")
          value = value.ptr;
        _emscripten_bind_btKinematicCharacterController_setUpInterpolate_1(self2, value);
      };
      btKinematicCharacterController.prototype["updateAction"] = btKinematicCharacterController.prototype.updateAction = function(collisionWorld, deltaTimeStep) {
        var self2 = this.ptr;
        if (collisionWorld && typeof collisionWorld === "object")
          collisionWorld = collisionWorld.ptr;
        if (deltaTimeStep && typeof deltaTimeStep === "object")
          deltaTimeStep = deltaTimeStep.ptr;
        _emscripten_bind_btKinematicCharacterController_updateAction_2(self2, collisionWorld, deltaTimeStep);
      };
      btKinematicCharacterController.prototype["__destroy__"] = btKinematicCharacterController.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btKinematicCharacterController___destroy___0(self2);
      };
      function btRaycastVehicle(tuning, chassis, raycaster) {
        if (tuning && typeof tuning === "object")
          tuning = tuning.ptr;
        if (chassis && typeof chassis === "object")
          chassis = chassis.ptr;
        if (raycaster && typeof raycaster === "object")
          raycaster = raycaster.ptr;
        this.ptr = _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3(tuning, chassis, raycaster);
        getCache(btRaycastVehicle)[this.ptr] = this;
      }
      btRaycastVehicle.prototype = Object.create(btActionInterface.prototype);
      btRaycastVehicle.prototype.constructor = btRaycastVehicle;
      btRaycastVehicle.prototype.__class__ = btRaycastVehicle;
      btRaycastVehicle.__cache__ = {};
      Module["btRaycastVehicle"] = btRaycastVehicle;
      btRaycastVehicle.prototype["applyEngineForce"] = btRaycastVehicle.prototype.applyEngineForce = function(force, wheel) {
        var self2 = this.ptr;
        if (force && typeof force === "object")
          force = force.ptr;
        if (wheel && typeof wheel === "object")
          wheel = wheel.ptr;
        _emscripten_bind_btRaycastVehicle_applyEngineForce_2(self2, force, wheel);
      };
      btRaycastVehicle.prototype["setSteeringValue"] = btRaycastVehicle.prototype.setSteeringValue = function(steering, wheel) {
        var self2 = this.ptr;
        if (steering && typeof steering === "object")
          steering = steering.ptr;
        if (wheel && typeof wheel === "object")
          wheel = wheel.ptr;
        _emscripten_bind_btRaycastVehicle_setSteeringValue_2(self2, steering, wheel);
      };
      btRaycastVehicle.prototype["getWheelTransformWS"] = btRaycastVehicle.prototype.getWheelTransformWS = function(wheelIndex) {
        var self2 = this.ptr;
        if (wheelIndex && typeof wheelIndex === "object")
          wheelIndex = wheelIndex.ptr;
        return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1(self2, wheelIndex), btTransform);
      };
      btRaycastVehicle.prototype["updateWheelTransform"] = btRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex, interpolatedTransform) {
        var self2 = this.ptr;
        if (wheelIndex && typeof wheelIndex === "object")
          wheelIndex = wheelIndex.ptr;
        if (interpolatedTransform && typeof interpolatedTransform === "object")
          interpolatedTransform = interpolatedTransform.ptr;
        _emscripten_bind_btRaycastVehicle_updateWheelTransform_2(self2, wheelIndex, interpolatedTransform);
      };
      btRaycastVehicle.prototype["addWheel"] = btRaycastVehicle.prototype.addWheel = function(connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, tuning, isFrontWheel) {
        var self2 = this.ptr;
        if (connectionPointCS0 && typeof connectionPointCS0 === "object")
          connectionPointCS0 = connectionPointCS0.ptr;
        if (wheelDirectionCS0 && typeof wheelDirectionCS0 === "object")
          wheelDirectionCS0 = wheelDirectionCS0.ptr;
        if (wheelAxleCS && typeof wheelAxleCS === "object")
          wheelAxleCS = wheelAxleCS.ptr;
        if (suspensionRestLength && typeof suspensionRestLength === "object")
          suspensionRestLength = suspensionRestLength.ptr;
        if (wheelRadius && typeof wheelRadius === "object")
          wheelRadius = wheelRadius.ptr;
        if (tuning && typeof tuning === "object")
          tuning = tuning.ptr;
        if (isFrontWheel && typeof isFrontWheel === "object")
          isFrontWheel = isFrontWheel.ptr;
        return wrapPointer(_emscripten_bind_btRaycastVehicle_addWheel_7(self2, connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, tuning, isFrontWheel), btWheelInfo);
      };
      btRaycastVehicle.prototype["getNumWheels"] = btRaycastVehicle.prototype.getNumWheels = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getNumWheels_0(self2);
      };
      btRaycastVehicle.prototype["getRigidBody"] = btRaycastVehicle.prototype.getRigidBody = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRaycastVehicle_getRigidBody_0(self2), btRigidBody);
      };
      btRaycastVehicle.prototype["getWheelInfo"] = btRaycastVehicle.prototype.getWheelInfo = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelInfo_1(self2, index), btWheelInfo);
      };
      btRaycastVehicle.prototype["setBrake"] = btRaycastVehicle.prototype.setBrake = function(brake, wheelIndex) {
        var self2 = this.ptr;
        if (brake && typeof brake === "object")
          brake = brake.ptr;
        if (wheelIndex && typeof wheelIndex === "object")
          wheelIndex = wheelIndex.ptr;
        _emscripten_bind_btRaycastVehicle_setBrake_2(self2, brake, wheelIndex);
      };
      btRaycastVehicle.prototype["setCoordinateSystem"] = btRaycastVehicle.prototype.setCoordinateSystem = function(rightIndex, upIndex, forwardIndex) {
        var self2 = this.ptr;
        if (rightIndex && typeof rightIndex === "object")
          rightIndex = rightIndex.ptr;
        if (upIndex && typeof upIndex === "object")
          upIndex = upIndex.ptr;
        if (forwardIndex && typeof forwardIndex === "object")
          forwardIndex = forwardIndex.ptr;
        _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3(self2, rightIndex, upIndex, forwardIndex);
      };
      btRaycastVehicle.prototype["getCurrentSpeedKmHour"] = btRaycastVehicle.prototype.getCurrentSpeedKmHour = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getCurrentSpeedKmHour_0(self2);
      };
      btRaycastVehicle.prototype["getChassisWorldTransform"] = btRaycastVehicle.prototype.getChassisWorldTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRaycastVehicle_getChassisWorldTransform_0(self2), btTransform);
      };
      btRaycastVehicle.prototype["rayCast"] = btRaycastVehicle.prototype.rayCast = function(wheel) {
        var self2 = this.ptr;
        if (wheel && typeof wheel === "object")
          wheel = wheel.ptr;
        return _emscripten_bind_btRaycastVehicle_rayCast_1(self2, wheel);
      };
      btRaycastVehicle.prototype["updateVehicle"] = btRaycastVehicle.prototype.updateVehicle = function(step) {
        var self2 = this.ptr;
        if (step && typeof step === "object")
          step = step.ptr;
        _emscripten_bind_btRaycastVehicle_updateVehicle_1(self2, step);
      };
      btRaycastVehicle.prototype["resetSuspension"] = btRaycastVehicle.prototype.resetSuspension = function() {
        var self2 = this.ptr;
        _emscripten_bind_btRaycastVehicle_resetSuspension_0(self2);
      };
      btRaycastVehicle.prototype["getSteeringValue"] = btRaycastVehicle.prototype.getSteeringValue = function(wheel) {
        var self2 = this.ptr;
        if (wheel && typeof wheel === "object")
          wheel = wheel.ptr;
        return _emscripten_bind_btRaycastVehicle_getSteeringValue_1(self2, wheel);
      };
      btRaycastVehicle.prototype["updateWheelTransformsWS"] = btRaycastVehicle.prototype.updateWheelTransformsWS = function(wheel, interpolatedTransform) {
        var self2 = this.ptr;
        if (wheel && typeof wheel === "object")
          wheel = wheel.ptr;
        if (interpolatedTransform && typeof interpolatedTransform === "object")
          interpolatedTransform = interpolatedTransform.ptr;
        if (interpolatedTransform === undefined) {
          _emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_1(self2, wheel);
          return;
        }
        _emscripten_bind_btRaycastVehicle_updateWheelTransformsWS_2(self2, wheel, interpolatedTransform);
      };
      btRaycastVehicle.prototype["setPitchControl"] = btRaycastVehicle.prototype.setPitchControl = function(pitch) {
        var self2 = this.ptr;
        if (pitch && typeof pitch === "object")
          pitch = pitch.ptr;
        _emscripten_bind_btRaycastVehicle_setPitchControl_1(self2, pitch);
      };
      btRaycastVehicle.prototype["updateSuspension"] = btRaycastVehicle.prototype.updateSuspension = function(deltaTime) {
        var self2 = this.ptr;
        if (deltaTime && typeof deltaTime === "object")
          deltaTime = deltaTime.ptr;
        _emscripten_bind_btRaycastVehicle_updateSuspension_1(self2, deltaTime);
      };
      btRaycastVehicle.prototype["updateFriction"] = btRaycastVehicle.prototype.updateFriction = function(timeStep) {
        var self2 = this.ptr;
        if (timeStep && typeof timeStep === "object")
          timeStep = timeStep.ptr;
        _emscripten_bind_btRaycastVehicle_updateFriction_1(self2, timeStep);
      };
      btRaycastVehicle.prototype["getRightAxis"] = btRaycastVehicle.prototype.getRightAxis = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getRightAxis_0(self2);
      };
      btRaycastVehicle.prototype["getUpAxis"] = btRaycastVehicle.prototype.getUpAxis = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getUpAxis_0(self2);
      };
      btRaycastVehicle.prototype["getForwardAxis"] = btRaycastVehicle.prototype.getForwardAxis = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getForwardAxis_0(self2);
      };
      btRaycastVehicle.prototype["getForwardVector"] = btRaycastVehicle.prototype.getForwardVector = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btRaycastVehicle_getForwardVector_0(self2), btVector3);
      };
      btRaycastVehicle.prototype["getUserConstraintType"] = btRaycastVehicle.prototype.getUserConstraintType = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getUserConstraintType_0(self2);
      };
      btRaycastVehicle.prototype["setUserConstraintType"] = btRaycastVehicle.prototype.setUserConstraintType = function(userConstraintType) {
        var self2 = this.ptr;
        if (userConstraintType && typeof userConstraintType === "object")
          userConstraintType = userConstraintType.ptr;
        _emscripten_bind_btRaycastVehicle_setUserConstraintType_1(self2, userConstraintType);
      };
      btRaycastVehicle.prototype["setUserConstraintId"] = btRaycastVehicle.prototype.setUserConstraintId = function(uid) {
        var self2 = this.ptr;
        if (uid && typeof uid === "object")
          uid = uid.ptr;
        _emscripten_bind_btRaycastVehicle_setUserConstraintId_1(self2, uid);
      };
      btRaycastVehicle.prototype["getUserConstraintId"] = btRaycastVehicle.prototype.getUserConstraintId = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btRaycastVehicle_getUserConstraintId_0(self2);
      };
      btRaycastVehicle.prototype["updateAction"] = btRaycastVehicle.prototype.updateAction = function(collisionWorld, deltaTimeStep) {
        var self2 = this.ptr;
        if (collisionWorld && typeof collisionWorld === "object")
          collisionWorld = collisionWorld.ptr;
        if (deltaTimeStep && typeof deltaTimeStep === "object")
          deltaTimeStep = deltaTimeStep.ptr;
        _emscripten_bind_btRaycastVehicle_updateAction_2(self2, collisionWorld, deltaTimeStep);
      };
      btRaycastVehicle.prototype["__destroy__"] = btRaycastVehicle.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btRaycastVehicle___destroy___0(self2);
      };
      function btPairCachingGhostObject() {
        this.ptr = _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0();
        getCache(btPairCachingGhostObject)[this.ptr] = this;
      }
      btPairCachingGhostObject.prototype = Object.create(btGhostObject.prototype);
      btPairCachingGhostObject.prototype.constructor = btPairCachingGhostObject;
      btPairCachingGhostObject.prototype.__class__ = btPairCachingGhostObject;
      btPairCachingGhostObject.__cache__ = {};
      Module["btPairCachingGhostObject"] = btPairCachingGhostObject;
      btPairCachingGhostObject.prototype["setAnisotropicFriction"] = btPairCachingGhostObject.prototype.setAnisotropicFriction = function(anisotropicFriction, frictionMode) {
        var self2 = this.ptr;
        if (anisotropicFriction && typeof anisotropicFriction === "object")
          anisotropicFriction = anisotropicFriction.ptr;
        if (frictionMode && typeof frictionMode === "object")
          frictionMode = frictionMode.ptr;
        _emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2(self2, anisotropicFriction, frictionMode);
      };
      btPairCachingGhostObject.prototype["getCollisionShape"] = btPairCachingGhostObject.prototype.getCollisionShape = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0(self2), btCollisionShape);
      };
      btPairCachingGhostObject.prototype["setContactProcessingThreshold"] = btPairCachingGhostObject.prototype.setContactProcessingThreshold = function(contactProcessingThreshold) {
        var self2 = this.ptr;
        if (contactProcessingThreshold && typeof contactProcessingThreshold === "object")
          contactProcessingThreshold = contactProcessingThreshold.ptr;
        _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1(self2, contactProcessingThreshold);
      };
      btPairCachingGhostObject.prototype["setActivationState"] = btPairCachingGhostObject.prototype.setActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btPairCachingGhostObject_setActivationState_1(self2, newState);
      };
      btPairCachingGhostObject.prototype["forceActivationState"] = btPairCachingGhostObject.prototype.forceActivationState = function(newState) {
        var self2 = this.ptr;
        if (newState && typeof newState === "object")
          newState = newState.ptr;
        _emscripten_bind_btPairCachingGhostObject_forceActivationState_1(self2, newState);
      };
      btPairCachingGhostObject.prototype["activate"] = btPairCachingGhostObject.prototype.activate = function(forceActivation) {
        var self2 = this.ptr;
        if (forceActivation && typeof forceActivation === "object")
          forceActivation = forceActivation.ptr;
        if (forceActivation === undefined) {
          _emscripten_bind_btPairCachingGhostObject_activate_0(self2);
          return;
        }
        _emscripten_bind_btPairCachingGhostObject_activate_1(self2, forceActivation);
      };
      btPairCachingGhostObject.prototype["isActive"] = btPairCachingGhostObject.prototype.isActive = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btPairCachingGhostObject_isActive_0(self2);
      };
      btPairCachingGhostObject.prototype["isKinematicObject"] = btPairCachingGhostObject.prototype.isKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0(self2);
      };
      btPairCachingGhostObject.prototype["isStaticObject"] = btPairCachingGhostObject.prototype.isStaticObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btPairCachingGhostObject_isStaticObject_0(self2);
      };
      btPairCachingGhostObject.prototype["isStaticOrKinematicObject"] = btPairCachingGhostObject.prototype.isStaticOrKinematicObject = function() {
        var self2 = this.ptr;
        return !!_emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0(self2);
      };
      btPairCachingGhostObject.prototype["setRestitution"] = btPairCachingGhostObject.prototype.setRestitution = function(rest) {
        var self2 = this.ptr;
        if (rest && typeof rest === "object")
          rest = rest.ptr;
        _emscripten_bind_btPairCachingGhostObject_setRestitution_1(self2, rest);
      };
      btPairCachingGhostObject.prototype["setFriction"] = btPairCachingGhostObject.prototype.setFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btPairCachingGhostObject_setFriction_1(self2, frict);
      };
      btPairCachingGhostObject.prototype["setRollingFriction"] = btPairCachingGhostObject.prototype.setRollingFriction = function(frict) {
        var self2 = this.ptr;
        if (frict && typeof frict === "object")
          frict = frict.ptr;
        _emscripten_bind_btPairCachingGhostObject_setRollingFriction_1(self2, frict);
      };
      btPairCachingGhostObject.prototype["getWorldTransform"] = btPairCachingGhostObject.prototype.getWorldTransform = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0(self2), btTransform);
      };
      btPairCachingGhostObject.prototype["getCollisionFlags"] = btPairCachingGhostObject.prototype.getCollisionFlags = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0(self2);
      };
      btPairCachingGhostObject.prototype["setCollisionFlags"] = btPairCachingGhostObject.prototype.setCollisionFlags = function(flags) {
        var self2 = this.ptr;
        if (flags && typeof flags === "object")
          flags = flags.ptr;
        _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1(self2, flags);
      };
      btPairCachingGhostObject.prototype["setWorldTransform"] = btPairCachingGhostObject.prototype.setWorldTransform = function(worldTrans) {
        var self2 = this.ptr;
        if (worldTrans && typeof worldTrans === "object")
          worldTrans = worldTrans.ptr;
        _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1(self2, worldTrans);
      };
      btPairCachingGhostObject.prototype["setCollisionShape"] = btPairCachingGhostObject.prototype.setCollisionShape = function(collisionShape) {
        var self2 = this.ptr;
        if (collisionShape && typeof collisionShape === "object")
          collisionShape = collisionShape.ptr;
        _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1(self2, collisionShape);
      };
      btPairCachingGhostObject.prototype["setCcdMotionThreshold"] = btPairCachingGhostObject.prototype.setCcdMotionThreshold = function(ccdMotionThreshold) {
        var self2 = this.ptr;
        if (ccdMotionThreshold && typeof ccdMotionThreshold === "object")
          ccdMotionThreshold = ccdMotionThreshold.ptr;
        _emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1(self2, ccdMotionThreshold);
      };
      btPairCachingGhostObject.prototype["setCcdSweptSphereRadius"] = btPairCachingGhostObject.prototype.setCcdSweptSphereRadius = function(radius) {
        var self2 = this.ptr;
        if (radius && typeof radius === "object")
          radius = radius.ptr;
        _emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1(self2, radius);
      };
      btPairCachingGhostObject.prototype["getUserIndex"] = btPairCachingGhostObject.prototype.getUserIndex = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btPairCachingGhostObject_getUserIndex_0(self2);
      };
      btPairCachingGhostObject.prototype["setUserIndex"] = btPairCachingGhostObject.prototype.setUserIndex = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        _emscripten_bind_btPairCachingGhostObject_setUserIndex_1(self2, index);
      };
      btPairCachingGhostObject.prototype["getUserPointer"] = btPairCachingGhostObject.prototype.getUserPointer = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getUserPointer_0(self2), VoidPtr);
      };
      btPairCachingGhostObject.prototype["setUserPointer"] = btPairCachingGhostObject.prototype.setUserPointer = function(userPointer) {
        var self2 = this.ptr;
        if (userPointer && typeof userPointer === "object")
          userPointer = userPointer.ptr;
        _emscripten_bind_btPairCachingGhostObject_setUserPointer_1(self2, userPointer);
      };
      btPairCachingGhostObject.prototype["getActivationState"] = btPairCachingGhostObject.prototype.getActivationState = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btPairCachingGhostObject_getActivationState_0(self2);
      };
      btPairCachingGhostObject.prototype["getNumOverlappingObjects"] = btPairCachingGhostObject.prototype.getNumOverlappingObjects = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0(self2);
      };
      btPairCachingGhostObject.prototype["getOverlappingObject"] = btPairCachingGhostObject.prototype.getOverlappingObject = function(index) {
        var self2 = this.ptr;
        if (index && typeof index === "object")
          index = index.ptr;
        return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1(self2, index), btCollisionObject);
      };
      btPairCachingGhostObject.prototype["__destroy__"] = btPairCachingGhostObject.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btPairCachingGhostObject___destroy___0(self2);
      };
      function btGhostPairCallback() {
        this.ptr = _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0();
        getCache(btGhostPairCallback)[this.ptr] = this;
      }
      btGhostPairCallback.prototype = Object.create(WrapperObject.prototype);
      btGhostPairCallback.prototype.constructor = btGhostPairCallback;
      btGhostPairCallback.prototype.__class__ = btGhostPairCallback;
      btGhostPairCallback.__cache__ = {};
      Module["btGhostPairCallback"] = btGhostPairCallback;
      btGhostPairCallback.prototype["__destroy__"] = btGhostPairCallback.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGhostPairCallback___destroy___0(self2);
      };
      function btjsContactData() {
        throw "cannot construct a btjsContactData, no constructor in IDL";
      }
      btjsContactData.prototype = Object.create(WrapperObject.prototype);
      btjsContactData.prototype.constructor = btjsContactData;
      btjsContactData.prototype.__class__ = btjsContactData;
      btjsContactData.__cache__ = {};
      Module["btjsContactData"] = btjsContactData;
      btjsContactData.prototype["getId"] = btjsContactData.prototype.getId = function() {
        var self2 = this.ptr;
        return _emscripten_bind_btjsContactData_getId_0(self2);
      };
      btjsContactData.prototype["getBodyA"] = btjsContactData.prototype.getBodyA = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsContactData_getBodyA_0(self2), btRigidBody);
      };
      btjsContactData.prototype["getBodyB"] = btjsContactData.prototype.getBodyB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsContactData_getBodyB_0(self2), btRigidBody);
      };
      btjsContactData.prototype["getPosition"] = btjsContactData.prototype.getPosition = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsContactData_getPosition_0(self2), btVector3);
      };
      btjsContactData.prototype["getNormalB"] = btjsContactData.prototype.getNormalB = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsContactData_getNormalB_0(self2), btVector3);
      };
      btjsContactData.prototype["__destroy__"] = btjsContactData.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btjsContactData___destroy___0(self2);
      };
      function btjsDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration) {
        if (dispatcher && typeof dispatcher === "object")
          dispatcher = dispatcher.ptr;
        if (pairCache && typeof pairCache === "object")
          pairCache = pairCache.ptr;
        if (constraintSolver && typeof constraintSolver === "object")
          constraintSolver = constraintSolver.ptr;
        if (collisionConfiguration && typeof collisionConfiguration === "object")
          collisionConfiguration = collisionConfiguration.ptr;
        this.ptr = _emscripten_bind_btjsDynamicsWorld_btjsDynamicsWorld_4(dispatcher, pairCache, constraintSolver, collisionConfiguration);
        getCache(btjsDynamicsWorld)[this.ptr] = this;
      }
      btjsDynamicsWorld.prototype = Object.create(btDiscreteDynamicsWorld.prototype);
      btjsDynamicsWorld.prototype.constructor = btjsDynamicsWorld;
      btjsDynamicsWorld.prototype.__class__ = btjsDynamicsWorld;
      btjsDynamicsWorld.__cache__ = {};
      Module["btjsDynamicsWorld"] = btjsDynamicsWorld;
      btjsDynamicsWorld.prototype["createCompoundFromGimpactShape"] = btjsDynamicsWorld.prototype.createCompoundFromGimpactShape = function(gimpactMesh, depth) {
        var self2 = this.ptr;
        if (gimpactMesh && typeof gimpactMesh === "object")
          gimpactMesh = gimpactMesh.ptr;
        if (depth && typeof depth === "object")
          depth = depth.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_createCompoundFromGimpactShape_2(self2, gimpactMesh, depth), btCompoundShape);
      };
      btjsDynamicsWorld.prototype["getDispatcher"] = btjsDynamicsWorld.prototype.getDispatcher = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_getDispatcher_0(self2), btDispatcher);
      };
      btjsDynamicsWorld.prototype["rayTest"] = btjsDynamicsWorld.prototype.rayTest = function(rayFromWorld, rayToWorld, resultCallback) {
        var self2 = this.ptr;
        if (rayFromWorld && typeof rayFromWorld === "object")
          rayFromWorld = rayFromWorld.ptr;
        if (rayToWorld && typeof rayToWorld === "object")
          rayToWorld = rayToWorld.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btjsDynamicsWorld_rayTest_3(self2, rayFromWorld, rayToWorld, resultCallback);
      };
      btjsDynamicsWorld.prototype["getPairCache"] = btjsDynamicsWorld.prototype.getPairCache = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_getPairCache_0(self2), btOverlappingPairCache);
      };
      btjsDynamicsWorld.prototype["getDispatchInfo"] = btjsDynamicsWorld.prototype.getDispatchInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_getDispatchInfo_0(self2), btDispatcherInfo);
      };
      btjsDynamicsWorld.prototype["addCollisionObject"] = btjsDynamicsWorld.prototype.addCollisionObject = function(collisionObject, collisionFilterGroup, collisionFilterMask) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        if (collisionFilterGroup && typeof collisionFilterGroup === "object")
          collisionFilterGroup = collisionFilterGroup.ptr;
        if (collisionFilterMask && typeof collisionFilterMask === "object")
          collisionFilterMask = collisionFilterMask.ptr;
        if (collisionFilterGroup === undefined) {
          _emscripten_bind_btjsDynamicsWorld_addCollisionObject_1(self2, collisionObject);
          return;
        }
        if (collisionFilterMask === undefined) {
          _emscripten_bind_btjsDynamicsWorld_addCollisionObject_2(self2, collisionObject, collisionFilterGroup);
          return;
        }
        _emscripten_bind_btjsDynamicsWorld_addCollisionObject_3(self2, collisionObject, collisionFilterGroup, collisionFilterMask);
      };
      btjsDynamicsWorld.prototype["removeCollisionObject"] = btjsDynamicsWorld.prototype.removeCollisionObject = function(collisionObject) {
        var self2 = this.ptr;
        if (collisionObject && typeof collisionObject === "object")
          collisionObject = collisionObject.ptr;
        _emscripten_bind_btjsDynamicsWorld_removeCollisionObject_1(self2, collisionObject);
      };
      btjsDynamicsWorld.prototype["getBroadphase"] = btjsDynamicsWorld.prototype.getBroadphase = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_getBroadphase_0(self2), btBroadphaseInterface);
      };
      btjsDynamicsWorld.prototype["convexSweepTest"] = btjsDynamicsWorld.prototype.convexSweepTest = function(castShape, from, to, resultCallback, allowedCcdPenetration) {
        var self2 = this.ptr;
        if (castShape && typeof castShape === "object")
          castShape = castShape.ptr;
        if (from && typeof from === "object")
          from = from.ptr;
        if (to && typeof to === "object")
          to = to.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        if (allowedCcdPenetration && typeof allowedCcdPenetration === "object")
          allowedCcdPenetration = allowedCcdPenetration.ptr;
        _emscripten_bind_btjsDynamicsWorld_convexSweepTest_5(self2, castShape, from, to, resultCallback, allowedCcdPenetration);
      };
      btjsDynamicsWorld.prototype["contactPairTest"] = btjsDynamicsWorld.prototype.contactPairTest = function(colObjA, colObjB, resultCallback) {
        var self2 = this.ptr;
        if (colObjA && typeof colObjA === "object")
          colObjA = colObjA.ptr;
        if (colObjB && typeof colObjB === "object")
          colObjB = colObjB.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btjsDynamicsWorld_contactPairTest_3(self2, colObjA, colObjB, resultCallback);
      };
      btjsDynamicsWorld.prototype["contactTest"] = btjsDynamicsWorld.prototype.contactTest = function(colObj, resultCallback) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        if (resultCallback && typeof resultCallback === "object")
          resultCallback = resultCallback.ptr;
        _emscripten_bind_btjsDynamicsWorld_contactTest_2(self2, colObj, resultCallback);
      };
      btjsDynamicsWorld.prototype["updateSingleAabb"] = btjsDynamicsWorld.prototype.updateSingleAabb = function(colObj) {
        var self2 = this.ptr;
        if (colObj && typeof colObj === "object")
          colObj = colObj.ptr;
        _emscripten_bind_btjsDynamicsWorld_updateSingleAabb_1(self2, colObj);
      };
      btjsDynamicsWorld.prototype["setGravity"] = btjsDynamicsWorld.prototype.setGravity = function(gravity) {
        var self2 = this.ptr;
        if (gravity && typeof gravity === "object")
          gravity = gravity.ptr;
        _emscripten_bind_btjsDynamicsWorld_setGravity_1(self2, gravity);
      };
      btjsDynamicsWorld.prototype["getGravity"] = btjsDynamicsWorld.prototype.getGravity = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_getGravity_0(self2), btVector3);
      };
      btjsDynamicsWorld.prototype["addRigidBody"] = btjsDynamicsWorld.prototype.addRigidBody = function(body, group, mask) {
        var self2 = this.ptr;
        if (body && typeof body === "object")
          body = body.ptr;
        if (group && typeof group === "object")
          group = group.ptr;
        if (mask && typeof mask === "object")
          mask = mask.ptr;
        if (group === undefined) {
          _emscripten_bind_btjsDynamicsWorld_addRigidBody_1(self2, body);
          return;
        }
        if (mask === undefined) {
          _emscripten_bind_btjsDynamicsWorld_addRigidBody_2(self2, body, group);
          return;
        }
        _emscripten_bind_btjsDynamicsWorld_addRigidBody_3(self2, body, group, mask);
      };
      btjsDynamicsWorld.prototype["removeRigidBody"] = btjsDynamicsWorld.prototype.removeRigidBody = function(body) {
        var self2 = this.ptr;
        if (body && typeof body === "object")
          body = body.ptr;
        _emscripten_bind_btjsDynamicsWorld_removeRigidBody_1(self2, body);
      };
      btjsDynamicsWorld.prototype["addConstraint"] = btjsDynamicsWorld.prototype.addConstraint = function(constraint, disableCollisionsBetweenLinkedBodies) {
        var self2 = this.ptr;
        if (constraint && typeof constraint === "object")
          constraint = constraint.ptr;
        if (disableCollisionsBetweenLinkedBodies && typeof disableCollisionsBetweenLinkedBodies === "object")
          disableCollisionsBetweenLinkedBodies = disableCollisionsBetweenLinkedBodies.ptr;
        if (disableCollisionsBetweenLinkedBodies === undefined) {
          _emscripten_bind_btjsDynamicsWorld_addConstraint_1(self2, constraint);
          return;
        }
        _emscripten_bind_btjsDynamicsWorld_addConstraint_2(self2, constraint, disableCollisionsBetweenLinkedBodies);
      };
      btjsDynamicsWorld.prototype["removeConstraint"] = btjsDynamicsWorld.prototype.removeConstraint = function(constraint) {
        var self2 = this.ptr;
        if (constraint && typeof constraint === "object")
          constraint = constraint.ptr;
        _emscripten_bind_btjsDynamicsWorld_removeConstraint_1(self2, constraint);
      };
      btjsDynamicsWorld.prototype["stepSimulation"] = btjsDynamicsWorld.prototype.stepSimulation = function(timeStep, maxSubSteps, fixedTimeStep) {
        var self2 = this.ptr;
        if (timeStep && typeof timeStep === "object")
          timeStep = timeStep.ptr;
        if (maxSubSteps && typeof maxSubSteps === "object")
          maxSubSteps = maxSubSteps.ptr;
        if (fixedTimeStep && typeof fixedTimeStep === "object")
          fixedTimeStep = fixedTimeStep.ptr;
        if (maxSubSteps === undefined) {
          return _emscripten_bind_btjsDynamicsWorld_stepSimulation_1(self2, timeStep);
        }
        if (fixedTimeStep === undefined) {
          return _emscripten_bind_btjsDynamicsWorld_stepSimulation_2(self2, timeStep, maxSubSteps);
        }
        return _emscripten_bind_btjsDynamicsWorld_stepSimulation_3(self2, timeStep, maxSubSteps, fixedTimeStep);
      };
      btjsDynamicsWorld.prototype["addAction"] = btjsDynamicsWorld.prototype.addAction = function(action) {
        var self2 = this.ptr;
        if (action && typeof action === "object")
          action = action.ptr;
        _emscripten_bind_btjsDynamicsWorld_addAction_1(self2, action);
      };
      btjsDynamicsWorld.prototype["removeAction"] = btjsDynamicsWorld.prototype.removeAction = function(action) {
        var self2 = this.ptr;
        if (action && typeof action === "object")
          action = action.ptr;
        _emscripten_bind_btjsDynamicsWorld_removeAction_1(self2, action);
      };
      btjsDynamicsWorld.prototype["getSolverInfo"] = btjsDynamicsWorld.prototype.getSolverInfo = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btjsDynamicsWorld_getSolverInfo_0(self2), btContactSolverInfo);
      };
      btjsDynamicsWorld.prototype["__destroy__"] = btjsDynamicsWorld.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btjsDynamicsWorld___destroy___0(self2);
      };
      function btGImpactMeshShape(meshInterface) {
        if (meshInterface && typeof meshInterface === "object")
          meshInterface = meshInterface.ptr;
        this.ptr = _emscripten_bind_btGImpactMeshShape_btGImpactMeshShape_1(meshInterface);
        getCache(btGImpactMeshShape)[this.ptr] = this;
      }
      btGImpactMeshShape.prototype = Object.create(btGImpactShapeInterface.prototype);
      btGImpactMeshShape.prototype.constructor = btGImpactMeshShape;
      btGImpactMeshShape.prototype.__class__ = btGImpactMeshShape;
      btGImpactMeshShape.__cache__ = {};
      Module["btGImpactMeshShape"] = btGImpactMeshShape;
      btGImpactMeshShape.prototype["updateBound"] = btGImpactMeshShape.prototype.updateBound = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGImpactMeshShape_updateBound_0(self2);
      };
      btGImpactMeshShape.prototype["setLocalScaling"] = btGImpactMeshShape.prototype.setLocalScaling = function(scaling) {
        var self2 = this.ptr;
        if (scaling && typeof scaling === "object")
          scaling = scaling.ptr;
        _emscripten_bind_btGImpactMeshShape_setLocalScaling_1(self2, scaling);
      };
      btGImpactMeshShape.prototype["getLocalScaling"] = btGImpactMeshShape.prototype.getLocalScaling = function() {
        var self2 = this.ptr;
        return wrapPointer(_emscripten_bind_btGImpactMeshShape_getLocalScaling_0(self2), btVector3);
      };
      btGImpactMeshShape.prototype["calculateLocalInertia"] = btGImpactMeshShape.prototype.calculateLocalInertia = function(mass, inertia) {
        var self2 = this.ptr;
        if (mass && typeof mass === "object")
          mass = mass.ptr;
        if (inertia && typeof inertia === "object")
          inertia = inertia.ptr;
        _emscripten_bind_btGImpactMeshShape_calculateLocalInertia_2(self2, mass, inertia);
      };
      btGImpactMeshShape.prototype["__destroy__"] = btGImpactMeshShape.prototype.__destroy__ = function() {
        var self2 = this.ptr;
        _emscripten_bind_btGImpactMeshShape___destroy___0(self2);
      };
      (function() {
        function setupEnums() {
          Module["PHY_FLOAT"] = _emscripten_enum_PHY_ScalarType_PHY_FLOAT();
          Module["PHY_DOUBLE"] = _emscripten_enum_PHY_ScalarType_PHY_DOUBLE();
          Module["PHY_INTEGER"] = _emscripten_enum_PHY_ScalarType_PHY_INTEGER();
          Module["PHY_SHORT"] = _emscripten_enum_PHY_ScalarType_PHY_SHORT();
          Module["PHY_FIXEDPOINT88"] = _emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88();
          Module["PHY_UCHAR"] = _emscripten_enum_PHY_ScalarType_PHY_UCHAR();
          Module["BT_CONSTRAINT_ERP"] = _emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP();
          Module["BT_CONSTRAINT_STOP_ERP"] = _emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP();
          Module["BT_CONSTRAINT_CFM"] = _emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM();
          Module["BT_CONSTRAINT_STOP_CFM"] = _emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM();
        }
        if (runtimeInitialized)
          setupEnums();
        else
          addOnInit(setupEnums);
      })();
      var _supportedEvents = ["beginContact", "updateContact", "endContact", "ccdContact"];
      var _listenersMap = {};
      Module.addEventListener = function(eventType, listener) {
        if (_supportedEvents.indexOf(eventType) === -1) {
          throw new Error("unknown event, type=" + eventType + ", supported=" + _supportedEvents);
        }
        var currentListeners = _listenersMap[eventType];
        if (currentListeners === undefined) {
          currentListeners = [];
          _listenersMap[eventType] = currentListeners;
        }
        if (currentListeners.indexOf(listener) !== -1) {
          throw new Error("duplicate event listener, type=" + eventType);
        }
        currentListeners.push(listener);
      };
      Module.on = Module.addEventListener;
      Module.isListened = function(eventType) {
        var currentListeners = _listenersMap[eventType];
        return currentListeners !== undefined && currentListeners.length > 0;
      };
      Module.containListener = function(eventType, listener) {
        var currentListeners = _listenersMap[eventType];
        return currentListeners !== undefined && currentListeners.indexOf(listener) !== -1;
      };
      Module.hasEventListener = Module.containListener;
      Module.removeEventListener = function(eventType, listener) {
        var currentListeners = _listenersMap[eventType];
        if (currentListeners === undefined) {
          return;
        }
        var index = currentListeners.indexOf(listener);
        if (index === -1) {
          throw new Error("unknown event listener, type=" + type);
        }
        currentListeners.splice(index, 1);
      };
      function dispatchEvent(event) {
        if (_supportedEvents.indexOf(event.type) === -1) {
          throw new Error("unknown event, type=" + event.type + ", supported=" + _supportedEvents);
        }
        var currentListeners = _listenersMap[event.type];
        if (currentListeners === undefined) {
          return;
        }
        var listenersCopy = currentListeners.slice(0);
        listenersCopy.forEach(function(callback) {
          callback(event);
        });
      }
      function contactCallback(eventId, pContactData) {
        var eventType = _supportedEvents[eventId];
        if (!Module.isListened(eventType)) {
          return;
        }
        var data = Module.wrapPointer(pContactData, Module.btjsContactData);
        dispatchEvent({ type: eventType, data });
      }
      var listenToContactCallbacksCalled = false;
      Module.listenToContactCallbacks = function() {
        if (listenToContactCallbacksCalled) {
          return;
        }
        listenToContactCallbacksCalled = true;
        var contactCallbackPtr = Module.addFunction(contactCallback, "vii");
        var setContactCallback = Module.cwrap("setContactCallback", null, ["number"]);
        setContactCallback(contactCallbackPtr);
      };
      Module.DISABLE_DEACTIVATION = 4;
      Module.CF_STATIC_OBJECT = 1;
      Module.CF_KINEMATIC_OBJECT = 2;
      Module.CF_NO_CONTACT_RESPONSE = 4;
      Module.CF_CUSTOM_MATERIAL_CALLBACK = 8;
      return moduleArg.ready;
    };
  })();
  if (typeof exports === "object" && typeof module === "object")
    module.exports = bulletJsLoader;
  else if (typeof define === "function" && define["amd"])
    define([], () => bulletJsLoader);
});

// node_modules/gl-matrix/cjs/common.js
var require_common = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setMatrixArrayType = setMatrixArrayType;
  exports.toRadian = toRadian;
  exports.equals = equals;
  exports.RANDOM = exports.ARRAY_TYPE = exports.EPSILON = undefined;
  var EPSILON = 0.000001;
  exports.EPSILON = EPSILON;
  var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
  exports.ARRAY_TYPE = ARRAY_TYPE;
  var RANDOM = Math.random;
  exports.RANDOM = RANDOM;
  function setMatrixArrayType(type2) {
    exports.ARRAY_TYPE = ARRAY_TYPE = type2;
  }
  var degree = Math.PI / 180;
  function toRadian(a) {
    return a * degree;
  }
  function equals(a, b) {
    return Math.abs(a - b) <= EPSILON * Math.max(1, Math.abs(a), Math.abs(b));
  }
  if (!Math.hypot)
    Math.hypot = function() {
      var y = 0, i = arguments.length;
      while (i--) {
        y += arguments[i] * arguments[i];
      }
      return Math.sqrt(y);
    };
});

// node_modules/gl-matrix/cjs/mat2.js
var require_mat2 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.copy = copy;
  exports.identity = identity;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.transpose = transpose;
  exports.invert = invert;
  exports.adjoint = adjoint;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.fromRotation = fromRotation;
  exports.fromScaling = fromScaling;
  exports.str = str;
  exports.frob = frob;
  exports.LDU = LDU;
  exports.add = add;
  exports.subtract = subtract;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.sub = exports.mul = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(4);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function fromValues(m00, m01, m10, m11) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
  }
  function set(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a1 = a[1];
      out[1] = a[2];
      out[2] = a1;
    } else {
      out[0] = a[0];
      out[1] = a[2];
      out[2] = a[1];
      out[3] = a[3];
    }
    return out;
  }
  function invert(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var det = a0 * a3 - a2 * a1;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] = a0 * det;
    return out;
  }
  function adjoint(out, a) {
    var a0 = a[0];
    out[0] = a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a0;
    return out;
  }
  function determinant(a) {
    return a[0] * a[3] - a[2] * a[1];
  }
  function multiply(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
  }
  function rotate(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
  }
  function scale(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
  }
  function fromRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
  }
  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
  }
  function str(a) {
    return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3]);
  }
  function LDU(L, D, U, a) {
    L[2] = a[2] / a[0];
    U[0] = a[0];
    U[1] = a[1];
    U[3] = a[3] - L[2] * U[1];
    return [L, D, U];
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    return out;
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/mat2d.js
var require_mat2d = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.copy = copy;
  exports.identity = identity;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.invert = invert;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.translate = translate;
  exports.fromRotation = fromRotation;
  exports.fromScaling = fromScaling;
  exports.fromTranslation = fromTranslation;
  exports.str = str;
  exports.frob = frob;
  exports.add = add;
  exports.subtract = subtract;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sub = exports.mul = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(6);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[4] = 0;
      out[5] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  function fromValues(a, b, c, d, tx, ty) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
  }
  function set(out, a, b, c, d, tx, ty) {
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
  }
  function invert(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3];
    var atx = a[4], aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  }
  function determinant(a) {
    return a[0] * a[3] - a[1] * a[2];
  }
  function multiply(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
  }
  function rotate(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
  }
  function scale(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
  }
  function translate(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
  }
  function fromRotation(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
  }
  function str(a) {
    return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    out[4] = a[4] + b[4] * scale2;
    out[5] = a[5] + b[5] * scale2;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5));
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/mat3.js
var require_mat3 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.fromMat4 = fromMat4;
  exports.clone = clone;
  exports.copy = copy;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.identity = identity;
  exports.transpose = transpose;
  exports.invert = invert;
  exports.adjoint = adjoint;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.translate = translate;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.fromTranslation = fromTranslation;
  exports.fromRotation = fromRotation;
  exports.fromScaling = fromScaling;
  exports.fromMat2d = fromMat2d;
  exports.fromQuat = fromQuat;
  exports.normalFromMat4 = normalFromMat4;
  exports.projection = projection;
  exports.str = str;
  exports.frob = frob;
  exports.add = add;
  exports.subtract = subtract;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sub = exports.mul = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(9);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  function fromMat4(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
  }
  function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a01 = a[1], a02 = a[2], a12 = a[5];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a01;
      out[5] = a[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a[0];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a[1];
      out[4] = a[4];
      out[5] = a[7];
      out[6] = a[2];
      out[7] = a[5];
      out[8] = a[8];
    }
    return out;
  }
  function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    var b01 = a22 * a11 - a12 * a21;
    var b11 = -a22 * a10 + a12 * a20;
    var b21 = a21 * a10 - a11 * a20;
    var det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    out[0] = a11 * a22 - a12 * a21;
    out[1] = a02 * a21 - a01 * a22;
    out[2] = a01 * a12 - a02 * a11;
    out[3] = a12 * a20 - a10 * a22;
    out[4] = a00 * a22 - a02 * a20;
    out[5] = a02 * a10 - a00 * a12;
    out[6] = a10 * a21 - a11 * a20;
    out[7] = a01 * a20 - a00 * a21;
    out[8] = a00 * a11 - a01 * a10;
    return out;
  }
  function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    var b00 = b[0], b01 = b[1], b02 = b[2];
    var b10 = b[3], b11 = b[4], b12 = b[5];
    var b20 = b[6], b21 = b[7], b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
  }
  function rotate(out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale(out, a, v) {
    var x = v[0], y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
  }
  function fromRotation(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  function fromMat2d(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
  }
  function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }
  function normalFromMat4(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
  }
  function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
  }
  function str(a) {
    return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    out[4] = a[4] + b[4] * scale2;
    out[5] = a[5] + b[5] * scale2;
    out[6] = a[6] + b[6] * scale2;
    out[7] = a[7] + b[7] * scale2;
    out[8] = a[8] + b[8] * scale2;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/mat4.js
var require_mat4 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.copy = copy;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.identity = identity;
  exports.transpose = transpose;
  exports.invert = invert;
  exports.adjoint = adjoint;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.translate = translate;
  exports.scale = scale;
  exports.rotate = rotate;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.fromTranslation = fromTranslation;
  exports.fromScaling = fromScaling;
  exports.fromRotation = fromRotation;
  exports.fromXRotation = fromXRotation;
  exports.fromYRotation = fromYRotation;
  exports.fromZRotation = fromZRotation;
  exports.fromRotationTranslation = fromRotationTranslation;
  exports.fromQuat2 = fromQuat2;
  exports.getTranslation = getTranslation;
  exports.getScaling = getScaling;
  exports.getRotation = getRotation;
  exports.fromRotationTranslationScale = fromRotationTranslationScale;
  exports.fromRotationTranslationScaleOrigin = fromRotationTranslationScaleOrigin;
  exports.fromQuat = fromQuat;
  exports.frustum = frustum;
  exports.perspectiveNO = perspectiveNO;
  exports.perspectiveZO = perspectiveZO;
  exports.perspectiveFromFieldOfView = perspectiveFromFieldOfView;
  exports.orthoNO = orthoNO;
  exports.orthoZO = orthoZO;
  exports.lookAt = lookAt;
  exports.targetTo = targetTo;
  exports.str = str;
  exports.frob = frob;
  exports.add = add;
  exports.subtract = subtract;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sub = exports.mul = exports.ortho = exports.perspective = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(16);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a01 = a[1], a02 = a[2], a03 = a[3];
      var a12 = a[6], a13 = a[7];
      var a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }
    return out;
  }
  function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
  }
  function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  }
  function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
  }
  function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;
    if (len < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    return out;
  }
  function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  }
  function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  }
  function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    if (a !== out) {
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  }
  function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotation(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    if (len < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotationTranslation(out, q, v) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromQuat2(out, a) {
    var translation = new glMatrix.ARRAY_TYPE(3);
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw;
    if (magnitude > 0) {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
  }
  function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  function getRotation(out, mat) {
    var scaling = new glMatrix.ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;
    if (trace > 0) {
      S = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }
    return out;
  }
  function fromRotationTranslationScale(out, q, v, s) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO(out, fovy, aspect, near, far) {
    var f = 1 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective = perspectiveNO;
  exports.perspective = perspective;
  function perspectiveZO(out, fovy, aspect, near, far) {
    var f = 1 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = far * nf;
      out[14] = far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -near;
    }
    return out;
  }
  function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    var xScale = 2 / (leftTan + rightTan);
    var yScale = 2 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = yScale;
    out[6] = 0;
    out[7] = 0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near / (near - far);
    out[15] = 0;
    return out;
  }
  function orthoNO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho = orthoNO;
  exports.ortho = ortho;
  function orthoZO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
  }
  function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];
    if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {
      return identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.hypot(z0, z1, z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.hypot(x0, x1, x2);
    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.hypot(y0, y1, y2);
    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  }
  function targetTo(out, eye, target, up) {
    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
    var len = z0 * z0 + z1 * z1 + z2 * z2;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      z0 *= len;
      z1 *= len;
      z2 *= len;
    }
    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
    len = x0 * x0 + x1 * x1 + x2 * x2;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    out[4] = a[4] + b[4] * scale2;
    out[5] = a[5] + b[5] * scale2;
    out[6] = a[6] + b[6] * scale2;
    out[7] = a[7] + b[7] * scale2;
    out[8] = a[8] + b[8] * scale2;
    out[9] = a[9] + b[9] * scale2;
    out[10] = a[10] + b[10] * scale2;
    out[11] = a[11] + b[11] * scale2;
    out[12] = a[12] + b[12] * scale2;
    out[13] = a[13] + b[13] * scale2;
    out[14] = a[14] + b[14] * scale2;
    out[15] = a[15] + b[15] * scale2;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/vec3.js
var require_vec3 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.length = length;
  exports.fromValues = fromValues;
  exports.copy = copy;
  exports.set = set;
  exports.add = add;
  exports.subtract = subtract;
  exports.multiply = multiply;
  exports.divide = divide;
  exports.ceil = ceil;
  exports.floor = floor;
  exports.min = min;
  exports.max = max;
  exports.round = round;
  exports.scale = scale;
  exports.scaleAndAdd = scaleAndAdd;
  exports.distance = distance;
  exports.squaredDistance = squaredDistance;
  exports.squaredLength = squaredLength;
  exports.negate = negate;
  exports.inverse = inverse;
  exports.normalize = normalize;
  exports.dot = dot;
  exports.cross = cross;
  exports.lerp = lerp;
  exports.hermite = hermite;
  exports.bezier = bezier;
  exports.random = random;
  exports.transformMat4 = transformMat4;
  exports.transformMat3 = transformMat3;
  exports.transformQuat = transformQuat;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.angle = angle;
  exports.zero = zero;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(3);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
  }
  function fromValues(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
  }
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return Math.hypot(x, y, z);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return x * x + y * y + z * z;
  }
  function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return x * x + y * y + z * z;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    out[2] = 1 / a[2];
    return out;
  }
  function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len2 = x * x + y * y + z * z;
    if (len2 > 0) {
      len2 = 1 / Math.sqrt(len2);
    }
    out[0] = a[0] * len2;
    out[1] = a[1] * len2;
    out[2] = a[2] * len2;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2];
    var bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  }
  function hermite(out, a, b, c, d, t) {
    var factorTimes2 = t * t;
    var factor1 = factorTimes2 * (2 * t - 3) + 1;
    var factor2 = factorTimes2 * (t - 2) + t;
    var factor3 = factorTimes2 * (t - 1);
    var factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function bezier(out, a, b, c, d, t) {
    var inverseFactor = 1 - t;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t * t;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function random(out, scale2) {
    scale2 = scale2 || 1;
    var r = glMatrix.RANDOM() * 2 * Math.PI;
    var z = glMatrix.RANDOM() * 2 - 1;
    var zScale = Math.sqrt(1 - z * z) * scale2;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale2;
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
  }
  function transformQuat(out, a, q) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
    var x = a[0], y = a[1], z = a[2];
    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
    var w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
  }
  function rotateX(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateY(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateZ(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2];
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function angle(a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str(a) {
    return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
  }
  var sub = subtract;
  exports.sub = sub;
  var mul = multiply;
  exports.mul = mul;
  var div = divide;
  exports.div = div;
  var dist = distance;
  exports.dist = dist;
  var sqrDist = squaredDistance;
  exports.sqrDist = sqrDist;
  var len = length;
  exports.len = len;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
      var i, l;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset;i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }
      return a;
    };
  }();
  exports.forEach = forEach;
});

// node_modules/gl-matrix/cjs/vec4.js
var require_vec4 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.fromValues = fromValues;
  exports.copy = copy;
  exports.set = set;
  exports.add = add;
  exports.subtract = subtract;
  exports.multiply = multiply;
  exports.divide = divide;
  exports.ceil = ceil;
  exports.floor = floor;
  exports.min = min;
  exports.max = max;
  exports.round = round;
  exports.scale = scale;
  exports.scaleAndAdd = scaleAndAdd;
  exports.distance = distance;
  exports.squaredDistance = squaredDistance;
  exports.length = length;
  exports.squaredLength = squaredLength;
  exports.negate = negate;
  exports.inverse = inverse;
  exports.normalize = normalize;
  exports.dot = dot;
  exports.cross = cross;
  exports.lerp = lerp;
  exports.random = random;
  exports.transformMat4 = transformMat4;
  exports.transformQuat = transformQuat;
  exports.zero = zero;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(4);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function fromValues(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function set(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
  }
  function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
  }
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return Math.hypot(x, y, z, w);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
  }
  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return Math.hypot(x, y, z, w);
  }
  function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return x * x + y * y + z * z + w * w;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    out[2] = 1 / a[2];
    out[3] = 1 / a[3];
    return out;
  }
  function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len2 = x * x + y * y + z * z + w * w;
    if (len2 > 0) {
      len2 = 1 / Math.sqrt(len2);
    }
    out[0] = x * len2;
    out[1] = y * len2;
    out[2] = z * len2;
    out[3] = w * len2;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  function cross(out, u, v, w) {
    var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
    var G = u[0];
    var H = u[1];
    var I = u[2];
    var J = u[3];
    out[0] = H * F - I * E + J * D;
    out[1] = -(G * F) + I * C - J * B;
    out[2] = G * E - H * C + J * A;
    out[3] = -(G * D) + H * B - I * A;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
  }
  function random(out, scale2) {
    scale2 = scale2 || 1;
    var v1, v2, v3, v4;
    var s1, s2;
    do {
      v1 = glMatrix.RANDOM() * 2 - 1;
      v2 = glMatrix.RANDOM() * 2 - 1;
      s1 = v1 * v1 + v2 * v2;
    } while (s1 >= 1);
    do {
      v3 = glMatrix.RANDOM() * 2 - 1;
      v4 = glMatrix.RANDOM() * 2 - 1;
      s2 = v3 * v3 + v4 * v4;
    } while (s2 >= 1);
    var d = Math.sqrt((1 - s1) / s2);
    out[0] = scale2 * v1;
    out[1] = scale2 * v2;
    out[2] = scale2 * v3 * d;
    out[3] = scale2 * v4 * d;
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
  }
  function transformQuat(out, a, q) {
    var x = a[0], y = a[1], z = a[2];
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
  }
  function zero(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
  }
  function str(a) {
    return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
  }
  var sub = subtract;
  exports.sub = sub;
  var mul = multiply;
  exports.mul = mul;
  var div = divide;
  exports.div = div;
  var dist = distance;
  exports.dist = dist;
  var sqrDist = squaredDistance;
  exports.sqrDist = sqrDist;
  var len = length;
  exports.len = len;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
      var i, l;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset;i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }
      return a;
    };
  }();
  exports.forEach = forEach;
});

// node_modules/gl-matrix/cjs/quat.js
var require_quat = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.identity = identity;
  exports.setAxisAngle = setAxisAngle;
  exports.getAxisAngle = getAxisAngle;
  exports.getAngle = getAngle;
  exports.multiply = multiply;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.calculateW = calculateW;
  exports.exp = exp;
  exports.ln = ln;
  exports.pow = pow;
  exports.slerp = slerp;
  exports.random = random;
  exports.invert = invert;
  exports.conjugate = conjugate;
  exports.fromMat3 = fromMat3;
  exports.fromEuler = fromEuler;
  exports.str = str;
  exports.setAxes = exports.sqlerp = exports.rotationTo = exports.equals = exports.exactEquals = exports.normalize = exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.lerp = exports.dot = exports.scale = exports.mul = exports.add = exports.set = exports.copy = exports.fromValues = exports.clone = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  var mat3 = _interopRequireWildcard(require_mat3());
  var vec3 = _interopRequireWildcard(require_vec3());
  var vec4 = _interopRequireWildcard(require_vec4());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(4);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function getAxisAngle(out_axis, q) {
    var rad = Math.acos(q[3]) * 2;
    var s = Math.sin(rad / 2);
    if (s > glMatrix.EPSILON) {
      out_axis[0] = q[0] / s;
      out_axis[1] = q[1] / s;
      out_axis[2] = q[2] / s;
    } else {
      out_axis[0] = 1;
      out_axis[1] = 0;
      out_axis[2] = 0;
    }
    return rad;
  }
  function getAngle(a, b) {
    var dotproduct = dot(a, b);
    return Math.acos(2 * dotproduct * dotproduct - 1);
  }
  function multiply(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW(out, a) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
    return out;
  }
  function exp(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var et = Math.exp(w);
    var s = r > 0 ? et * Math.sin(r) / r : 0;
    out[0] = x * s;
    out[1] = y * s;
    out[2] = z * s;
    out[3] = et * Math.cos(r);
    return out;
  }
  function ln(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var t = r > 0 ? Math.atan2(r, w) / r : 0;
    out[0] = x * t;
    out[1] = y * t;
    out[2] = z * t;
    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
    return out;
  }
  function pow(out, a, b) {
    ln(out, a);
    scale(out, out, b);
    exp(out, out);
    return out;
  }
  function slerp(out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    var omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > glMatrix.EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function random(out) {
    var u1 = glMatrix.RANDOM();
    var u2 = glMatrix.RANDOM();
    var u3 = glMatrix.RANDOM();
    var sqrt1MinusU1 = Math.sqrt(1 - u1);
    var sqrtU1 = Math.sqrt(u1);
    out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u2);
    out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u2);
    out[2] = sqrtU1 * Math.sin(2 * Math.PI * u3);
    out[3] = sqrtU1 * Math.cos(2 * Math.PI * u3);
    return out;
  }
  function invert(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var dot2 = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
    var invDot = dot2 ? 1 / dot2 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
  }
  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  }
  function fromMat3(out, m) {
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      var i = 0;
      if (m[4] > m[0])
        i = 1;
      if (m[8] > m[i * 3 + i])
        i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
  }
  function fromEuler(out, x, y, z) {
    var halfToRad = 0.5 * Math.PI / 180;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;
    var sx = Math.sin(x);
    var cx = Math.cos(x);
    var sy = Math.sin(y);
    var cy = Math.cos(y);
    var sz = Math.sin(z);
    var cz = Math.cos(z);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function str(a) {
    return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  var clone = vec4.clone;
  exports.clone = clone;
  var fromValues = vec4.fromValues;
  exports.fromValues = fromValues;
  var copy = vec4.copy;
  exports.copy = copy;
  var set = vec4.set;
  exports.set = set;
  var add = vec4.add;
  exports.add = add;
  var mul = multiply;
  exports.mul = mul;
  var scale = vec4.scale;
  exports.scale = scale;
  var dot = vec4.dot;
  exports.dot = dot;
  var lerp = vec4.lerp;
  exports.lerp = lerp;
  var length = vec4.length;
  exports.length = length;
  var len = length;
  exports.len = len;
  var squaredLength = vec4.squaredLength;
  exports.squaredLength = squaredLength;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var normalize = vec4.normalize;
  exports.normalize = normalize;
  var exactEquals = vec4.exactEquals;
  exports.exactEquals = exactEquals;
  var equals = vec4.equals;
  exports.equals = equals;
  var rotationTo = function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1, 0, 0);
    var yUnitVec3 = vec3.fromValues(0, 1, 0);
    return function(out, a, b) {
      var dot2 = vec3.dot(a, b);
      if (dot2 < -0.999999) {
        vec3.cross(tmpvec3, xUnitVec3, a);
        if (vec3.len(tmpvec3) < 0.000001)
          vec3.cross(tmpvec3, yUnitVec3, a);
        vec3.normalize(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot2 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        vec3.cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot2;
        return normalize(out, out);
      }
    };
  }();
  exports.rotationTo = rotationTo;
  var sqlerp = function() {
    var temp1 = create();
    var temp2 = create();
    return function(out, a, b, c, d, t) {
      slerp(temp1, a, d, t);
      slerp(temp2, b, c, t);
      slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }();
  exports.sqlerp = sqlerp;
  var setAxes = function() {
    var matr = mat3.create();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize(out, fromMat3(out, matr));
    };
  }();
  exports.setAxes = setAxes;
});

// node_modules/gl-matrix/cjs/quat2.js
var require_quat2 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.fromValues = fromValues;
  exports.fromRotationTranslationValues = fromRotationTranslationValues;
  exports.fromRotationTranslation = fromRotationTranslation;
  exports.fromTranslation = fromTranslation;
  exports.fromRotation = fromRotation;
  exports.fromMat4 = fromMat4;
  exports.copy = copy;
  exports.identity = identity;
  exports.set = set;
  exports.getDual = getDual;
  exports.setDual = setDual;
  exports.getTranslation = getTranslation;
  exports.translate = translate;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.rotateByQuatAppend = rotateByQuatAppend;
  exports.rotateByQuatPrepend = rotateByQuatPrepend;
  exports.rotateAroundAxis = rotateAroundAxis;
  exports.add = add;
  exports.multiply = multiply;
  exports.scale = scale;
  exports.lerp = lerp;
  exports.invert = invert;
  exports.conjugate = conjugate;
  exports.normalize = normalize;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.dot = exports.mul = exports.setReal = exports.getReal = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  var quat = _interopRequireWildcard(require_quat());
  var mat4 = _interopRequireWildcard(require_mat4());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var dq = new glMatrix.ARRAY_TYPE(8);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      dq[0] = 0;
      dq[1] = 0;
      dq[2] = 0;
      dq[4] = 0;
      dq[5] = 0;
      dq[6] = 0;
      dq[7] = 0;
    }
    dq[3] = 1;
    return dq;
  }
  function clone(a) {
    var dq = new glMatrix.ARRAY_TYPE(8);
    dq[0] = a[0];
    dq[1] = a[1];
    dq[2] = a[2];
    dq[3] = a[3];
    dq[4] = a[4];
    dq[5] = a[5];
    dq[6] = a[6];
    dq[7] = a[7];
    return dq;
  }
  function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
    var dq = new glMatrix.ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    dq[4] = x2;
    dq[5] = y2;
    dq[6] = z2;
    dq[7] = w2;
    return dq;
  }
  function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
    var dq = new glMatrix.ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
    dq[4] = ax * w1 + ay * z1 - az * y1;
    dq[5] = ay * w1 + az * x1 - ax * z1;
    dq[6] = az * w1 + ax * y1 - ay * x1;
    dq[7] = -ax * x1 - ay * y1 - az * z1;
    return dq;
  }
  function fromRotationTranslation(out, q, t) {
    var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q[0], by = q[1], bz = q[2], bw = q[3];
    out[0] = bx;
    out[1] = by;
    out[2] = bz;
    out[3] = bw;
    out[4] = ax * bw + ay * bz - az * by;
    out[5] = ay * bw + az * bx - ax * bz;
    out[6] = az * bw + ax * by - ay * bx;
    out[7] = -ax * bx - ay * by - az * bz;
    return out;
  }
  function fromTranslation(out, t) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = t[0] * 0.5;
    out[5] = t[1] * 0.5;
    out[6] = t[2] * 0.5;
    out[7] = 0;
    return out;
  }
  function fromRotation(out, q) {
    out[0] = q[0];
    out[1] = q[1];
    out[2] = q[2];
    out[3] = q[3];
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function fromMat4(out, a) {
    var outer = quat.create();
    mat4.getRotation(outer, a);
    var t = new glMatrix.ARRAY_TYPE(3);
    mat4.getTranslation(t, a);
    fromRotationTranslation(out, outer, t);
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    return out;
  }
  function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
    out[0] = x1;
    out[1] = y1;
    out[2] = z1;
    out[3] = w1;
    out[4] = x2;
    out[5] = y2;
    out[6] = z2;
    out[7] = w2;
    return out;
  }
  var getReal = quat.copy;
  exports.getReal = getReal;
  function getDual(out, a) {
    out[0] = a[4];
    out[1] = a[5];
    out[2] = a[6];
    out[3] = a[7];
    return out;
  }
  var setReal = quat.copy;
  exports.setReal = setReal;
  function setDual(out, q) {
    out[4] = q[0];
    out[5] = q[1];
    out[6] = q[2];
    out[7] = q[3];
    return out;
  }
  function getTranslation(out, a) {
    var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    return out;
  }
  function translate(out, a, v) {
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
    out[0] = ax1;
    out[1] = ay1;
    out[2] = az1;
    out[3] = aw1;
    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
    return out;
  }
  function rotateX(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    quat.rotateX(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateY(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    quat.rotateY(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateZ(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    quat.rotateZ(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateByQuatAppend(out, a, q) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
    out[0] = ax * qw + aw * qx + ay * qz - az * qy;
    out[1] = ay * qw + aw * qy + az * qx - ax * qz;
    out[2] = az * qw + aw * qz + ax * qy - ay * qx;
    out[3] = aw * qw - ax * qx - ay * qy - az * qz;
    ax = a[4];
    ay = a[5];
    az = a[6];
    aw = a[7];
    out[4] = ax * qw + aw * qx + ay * qz - az * qy;
    out[5] = ay * qw + aw * qy + az * qx - ax * qz;
    out[6] = az * qw + aw * qz + ax * qy - ay * qx;
    out[7] = aw * qw - ax * qx - ay * qy - az * qz;
    return out;
  }
  function rotateByQuatPrepend(out, q, a) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
    out[0] = qx * bw + qw * bx + qy * bz - qz * by;
    out[1] = qy * bw + qw * by + qz * bx - qx * bz;
    out[2] = qz * bw + qw * bz + qx * by - qy * bx;
    out[3] = qw * bw - qx * bx - qy * by - qz * bz;
    bx = a[4];
    by = a[5];
    bz = a[6];
    bw = a[7];
    out[4] = qx * bw + qw * bx + qy * bz - qz * by;
    out[5] = qy * bw + qw * by + qz * bx - qx * bz;
    out[6] = qz * bw + qw * bz + qx * by - qy * bx;
    out[7] = qw * bw - qx * bx - qy * by - qz * bz;
    return out;
  }
  function rotateAroundAxis(out, a, axis, rad) {
    if (Math.abs(rad) < glMatrix.EPSILON) {
      return copy(out, a);
    }
    var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
    rad = rad * 0.5;
    var s = Math.sin(rad);
    var bx = s * axis[0] / axisLength;
    var by = s * axis[1] / axisLength;
    var bz = s * axis[2] / axisLength;
    var bw = Math.cos(rad);
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    var ax = a[4], ay = a[5], az = a[6], aw = a[7];
    out[4] = ax * bw + aw * bx + ay * bz - az * by;
    out[5] = ay * bw + aw * by + az * bx - ax * bz;
    out[6] = az * bw + aw * bz + ax * by - ay * bx;
    out[7] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    return out;
  }
  function multiply(out, a, b) {
    var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
    out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
    out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
    out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
    out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
    return out;
  }
  var mul = multiply;
  exports.mul = mul;
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    return out;
  }
  var dot = quat.dot;
  exports.dot = dot;
  function lerp(out, a, b, t) {
    var mt = 1 - t;
    if (dot(a, b) < 0)
      t = -t;
    out[0] = a[0] * mt + b[0] * t;
    out[1] = a[1] * mt + b[1] * t;
    out[2] = a[2] * mt + b[2] * t;
    out[3] = a[3] * mt + b[3] * t;
    out[4] = a[4] * mt + b[4] * t;
    out[5] = a[5] * mt + b[5] * t;
    out[6] = a[6] * mt + b[6] * t;
    out[7] = a[7] * mt + b[7] * t;
    return out;
  }
  function invert(out, a) {
    var sqlen = squaredLength(a);
    out[0] = -a[0] / sqlen;
    out[1] = -a[1] / sqlen;
    out[2] = -a[2] / sqlen;
    out[3] = a[3] / sqlen;
    out[4] = -a[4] / sqlen;
    out[5] = -a[5] / sqlen;
    out[6] = -a[6] / sqlen;
    out[7] = a[7] / sqlen;
    return out;
  }
  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    out[4] = -a[4];
    out[5] = -a[5];
    out[6] = -a[6];
    out[7] = a[7];
    return out;
  }
  var length = quat.length;
  exports.length = length;
  var len = length;
  exports.len = len;
  var squaredLength = quat.squaredLength;
  exports.squaredLength = squaredLength;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  function normalize(out, a) {
    var magnitude = squaredLength(a);
    if (magnitude > 0) {
      magnitude = Math.sqrt(magnitude);
      var a0 = a[0] / magnitude;
      var a1 = a[1] / magnitude;
      var a2 = a[2] / magnitude;
      var a3 = a[3] / magnitude;
      var b0 = a[4];
      var b1 = a[5];
      var b2 = a[6];
      var b3 = a[7];
      var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
      out[0] = a0;
      out[1] = a1;
      out[2] = a2;
      out[3] = a3;
      out[4] = (b0 - a0 * a_dot_b) / magnitude;
      out[5] = (b1 - a1 * a_dot_b) / magnitude;
      out[6] = (b2 - a2 * a_dot_b) / magnitude;
      out[7] = (b3 - a3 * a_dot_b) / magnitude;
    }
    return out;
  }
  function str(a) {
    return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7));
  }
});

// node_modules/gl-matrix/cjs/vec2.js
var require_vec2 = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.fromValues = fromValues;
  exports.copy = copy;
  exports.set = set;
  exports.add = add;
  exports.subtract = subtract;
  exports.multiply = multiply;
  exports.divide = divide;
  exports.ceil = ceil;
  exports.floor = floor;
  exports.min = min;
  exports.max = max;
  exports.round = round;
  exports.scale = scale;
  exports.scaleAndAdd = scaleAndAdd;
  exports.distance = distance;
  exports.squaredDistance = squaredDistance;
  exports.length = length;
  exports.squaredLength = squaredLength;
  exports.negate = negate;
  exports.inverse = inverse;
  exports.normalize = normalize;
  exports.dot = dot;
  exports.cross = cross;
  exports.lerp = lerp;
  exports.random = random;
  exports.transformMat2 = transformMat2;
  exports.transformMat2d = transformMat2d;
  exports.transformMat3 = transformMat3;
  exports.transformMat4 = transformMat4;
  exports.rotate = rotate;
  exports.angle = angle;
  exports.zero = zero;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(2);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
  }
  function fromValues(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
  }
  function set(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
  }
  function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
  }
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return Math.hypot(x, y);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return x * x + y * y;
  }
  function length(a) {
    var x = a[0], y = a[1];
    return Math.hypot(x, y);
  }
  function squaredLength(a) {
    var x = a[0], y = a[1];
    return x * x + y * y;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    return out;
  }
  function normalize(out, a) {
    var x = a[0], y = a[1];
    var len2 = x * x + y * y;
    if (len2 > 0) {
      len2 = 1 / Math.sqrt(len2);
    }
    out[0] = a[0] * len2;
    out[1] = a[1] * len2;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0], ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
  }
  function random(out, scale2) {
    scale2 = scale2 || 1;
    var r = glMatrix.RANDOM() * 2 * Math.PI;
    out[0] = Math.cos(r) * scale2;
    out[1] = Math.sin(r) * scale2;
    return out;
  }
  function transformMat2(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
  }
  function transformMat2d(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  }
  function transformMat3(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0];
    var y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
  }
  function rotate(out, a, b, rad) {
    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
    out[0] = p0 * cosC - p1 * sinC + b[0];
    out[1] = p0 * sinC + p1 * cosC + b[1];
    return out;
  }
  function angle(a, b) {
    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), cosine = mag && (x1 * x2 + y1 * y2) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero(out) {
    out[0] = 0;
    out[1] = 0;
    return out;
  }
  function str(a) {
    return "vec2(" + a[0] + ", " + a[1] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
  }
  var len = length;
  exports.len = len;
  var sub = subtract;
  exports.sub = sub;
  var mul = multiply;
  exports.mul = mul;
  var div = divide;
  exports.div = div;
  var dist = distance;
  exports.dist = dist;
  var sqrDist = squaredDistance;
  exports.sqrDist = sqrDist;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
      var i, l;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset;i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
      }
      return a;
    };
  }();
  exports.forEach = forEach;
});

// node_modules/gl-matrix/cjs/index.js
var require_cjs = __commonJS((exports) => {
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.vec4 = exports.vec3 = exports.vec2 = exports.quat2 = exports.quat = exports.mat4 = exports.mat3 = exports.mat2d = exports.mat2 = exports.glMatrix = undefined;
  var glMatrix = _interopRequireWildcard(require_common());
  exports.glMatrix = glMatrix;
  var mat2 = _interopRequireWildcard(require_mat2());
  exports.mat2 = mat2;
  var mat2d = _interopRequireWildcard(require_mat2d());
  exports.mat2d = mat2d;
  var mat3 = _interopRequireWildcard(require_mat3());
  exports.mat3 = mat3;
  var mat4 = _interopRequireWildcard(require_mat4());
  exports.mat4 = mat4;
  var quat = _interopRequireWildcard(require_quat());
  exports.quat = quat;
  var quat2 = _interopRequireWildcard(require_quat2());
  exports.quat2 = quat2;
  var vec2 = _interopRequireWildcard(require_vec2());
  exports.vec2 = vec2;
  var vec3 = _interopRequireWildcard(require_vec3());
  exports.vec3 = vec3;
  var vec4 = _interopRequireWildcard(require_vec4());
  exports.vec4 = vec4;
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// src/ts-framework/nodejs/NodeJsBulletWasmModule.ts
var import_bulletJs_0_0_1 = __toESM(require_bulletJs_0_0_1(), 1);
import * as path from "path";

class NodeJsBulletWasmModule {
  static _wasmModule;
  static async loadWasmPart(urlPrefix) {
    NodeJsBulletWasmModule._wasmModule = await import_bulletJs_0_0_1.default({
      locateFile: (url) => {
        return path.join(urlPrefix, url);
      }
    });
  }
  static get() {
    if (!this._wasmModule) {
      throw new Error("bulletJs wasm module not loaded");
    }
    return this._wasmModule;
  }
}
// src/ts-framework/bullet-js/index.ts
var exports_bullet_js = {};
__export(exports_bullet_js, {
  rayCast: () => rayCast,
  convexSweep: () => convexSweep,
  WasmModuleHolder: () => WasmModuleHolder,
  PhysicWorld: () => PhysicWorld,
  ContactEventHandler: () => ContactEventHandler,
  ConcretePhysicVehicle: () => ConcretePhysicVehicle,
  ConcretePhysicBody: () => ConcretePhysicBody
});

// src/ts-framework/bullet-js/ContactEventHandler.ts
class ContactEventHandler {
  _listenersMap = new Map;
  isEventListenedTo(type2) {
    const listeners = this._listenersMap.get(type2);
    return !!listeners && listeners.length > 0;
  }
  addEventListener(type2, listener) {
    let listeners = this._listenersMap.get(type2);
    if (!listeners) {
      listeners = [];
      this._listenersMap.set(type2, listeners);
    }
    if (listeners.indexOf(listener) !== -1) {
      throw new Error(`duplicated event listener, type=${type2}`);
    }
    listeners.push(listener);
  }
  on(type2, listener) {
    this.addEventListener(type2, listener);
  }
  hasEventListener(type2, listener) {
    const listeners = this._listenersMap.get(type2);
    return listeners !== undefined && listeners.indexOf(listener) !== -1;
  }
  removeEventListener(type2, listener) {
    const listeners = this._listenersMap.get(type2);
    if (listeners === undefined)
      return;
    const index = listeners.indexOf(listener);
    if (index === -1) {
      throw new Error(`unknown event listener, type=${type2}`);
    }
    listeners.splice(index, 1);
  }
  dispatchEvent(event) {
    const listeners = this._listenersMap.get(event.type);
    if (listeners === undefined) {
      return;
    }
    const listenersCopy = listeners.slice(0);
    for (let ii = 0;ii < listenersCopy.length; ++ii) {
      listenersCopy[ii].call(this, event);
    }
  }
}
// src/ts-framework/bullet-js/WasmModuleHolder.ts
class WasmModuleHolder {
  static _wasmModule;
  static async set(wasmModule) {
    WasmModuleHolder._wasmModule = wasmModule;
  }
  static get() {
    if (!this._wasmModule) {
      throw new Error("bulletJs wasm module not loaded");
    }
    return this._wasmModule;
  }
}

// src/ts-framework/bullet-js/convexSweep.ts
var glm = __toESM(require_cjs(), 1);
var convexSweep = (rawDynamicsWorld, def) => {
  const bullet = WasmModuleHolder.get();
  const fromVec3 = new bullet.btVector3(def.from[0], def.from[1], def.from[2]);
  const toVec3 = new bullet.btVector3(def.to[0], def.to[1], def.to[2]);
  const fromTrsf = new bullet.btTransform;
  fromTrsf.setIdentity();
  fromTrsf.setOrigin(fromVec3);
  const toTrsf = new bullet.btTransform;
  toTrsf.setIdentity();
  toTrsf.setOrigin(toVec3);
  const result = new bullet.ClosestConvexResultCallback(fromVec3, toVec3);
  result.set_m_collisionFilterGroup(def.collisionFilterGroup);
  result.set_m_collisionFilterMask(def.collisionFilterMask);
  const shape = new bullet.btSphereShape(def.radius);
  rawDynamicsWorld.convexSweepTest(shape, fromTrsf, toTrsf, result, 0);
  if (!result.hasHit()) {
    bullet.destroy(fromVec3);
    bullet.destroy(toVec3);
    bullet.destroy(result);
    bullet.destroy(shape);
    bullet.destroy(fromTrsf);
    bullet.destroy(toTrsf);
    return;
  }
  const rawPosition = result.get_m_hitPointWorld();
  const rawNormal = result.get_m_hitNormalWorld();
  const fraction = result.get_m_closestHitFraction();
  const impact = glm.vec3.fromValues(rawPosition.x(), rawPosition.y(), rawPosition.z());
  const normal = glm.vec3.fromValues(rawNormal.x(), rawNormal.y(), rawNormal.z());
  bullet.destroy(rawNormal);
  bullet.destroy(rawPosition);
  bullet.destroy(fromVec3);
  bullet.destroy(toVec3);
  bullet.destroy(result);
  bullet.destroy(shape);
  bullet.destroy(fromTrsf);
  bullet.destroy(toTrsf);
  return { fraction, impact, normal };
};
// src/ts-framework/bullet-js/PhysicBody.ts
var glm2 = __toESM(require_cjs(), 1);
var DISABLE_DEACTIVATION = 4;
class ConcretePhysicBody extends ContactEventHandler {
  _customShape;
  _rawRigidBody;
  _isAlive = true;
  constructor(def, rawShape) {
    super();
    const bullet = WasmModuleHolder.get();
    this._customShape = rawShape;
    const tmpVec3 = new bullet.btVector3;
    this._customShape.shape.calculateLocalInertia(def.mass, tmpVec3);
    const motionState = null;
    const rbInfo = new bullet.btRigidBodyConstructionInfo(def.mass, motionState, this._customShape.shape, tmpVec3);
    this._rawRigidBody = new bullet.btRigidBody(rbInfo);
    bullet.destroy(tmpVec3);
    bullet.destroy(rbInfo);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawRigidBody);
    this._customShape.cleanup();
    this._rawRigidBody = null;
    this._isAlive = false;
  }
  isAlive() {
    return this._isAlive;
  }
  setPosition(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const rotation = this.getRotation();
    const newPosition = new bullet.btVector3(x, y, z);
    const newRotation = new bullet.btQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);
    const newTransform = new bullet.btTransform(newRotation, newPosition);
    this._rawRigidBody.setWorldTransform(newTransform);
    bullet.destroy(newTransform);
    bullet.destroy(newPosition);
    bullet.destroy(newRotation);
  }
  setRotation(x, y, z, w) {
    const bullet = WasmModuleHolder.get();
    const origin = this.getPosition();
    const newPosition = new bullet.btVector3(origin[0], origin[1], origin[2]);
    const newRotation = new bullet.btQuaternion(x, y, z, w);
    const newTransform = new bullet.btTransform(newRotation, newPosition);
    this._rawRigidBody.setWorldTransform(newTransform);
    bullet.destroy(newTransform);
    bullet.destroy(newPosition);
    bullet.destroy(newRotation);
  }
  getPositionAndRotation(position, rotation) {
    const bullet = WasmModuleHolder.get();
    const rawTransform = this._rawRigidBody.getWorldTransform();
    const rawOrigin = rawTransform.getOrigin();
    const rawRotation = rawTransform.getRotation();
    position[0] = rawOrigin.x();
    position[1] = rawOrigin.y();
    position[2] = rawOrigin.z();
    rotation[0] = rawRotation.x();
    rotation[1] = rawRotation.y();
    rotation[2] = rawRotation.z();
    rotation[3] = rawRotation.w();
    bullet.destroy(rawRotation);
    bullet.destroy(rawOrigin);
    bullet.destroy(rawTransform);
  }
  getPosition() {
    const bullet = WasmModuleHolder.get();
    const rawTransform = this._rawRigidBody.getWorldTransform();
    const rawOrigin = rawTransform.getOrigin();
    const origin = glm2.vec3.fromValues(rawOrigin.x(), rawOrigin.y(), rawOrigin.z());
    bullet.destroy(rawOrigin);
    bullet.destroy(rawTransform);
    return origin;
  }
  getRotation() {
    const bullet = WasmModuleHolder.get();
    const rawTransform = this._rawRigidBody.getWorldTransform();
    const rawRotation = rawTransform.getRotation();
    const rotation = glm2.vec4.fromValues(rawRotation.x(), rawRotation.y(), rawRotation.z(), rawRotation.w());
    bullet.destroy(rawRotation);
    bullet.destroy(rawTransform);
    return rotation;
  }
  getLinearVelocity() {
    const bullet = WasmModuleHolder.get();
    const vel = this._rawRigidBody.getLinearVelocity();
    const value = glm2.vec3.fromValues(vel.x(), vel.y(), vel.z());
    bullet.destroy(vel);
    return value;
  }
  getAngularVelocity() {
    const bullet = WasmModuleHolder.get();
    const vel = this._rawRigidBody.getAngularVelocity();
    const value = glm2.vec3.fromValues(vel.x(), vel.y(), vel.z());
    bullet.destroy(vel);
    return value;
  }
  setLinearVelocity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setLinearVelocity(newVel);
    bullet.destroy(newVel);
  }
  setAngularVelocity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setAngularVelocity(newVel);
    bullet.destroy(newVel);
  }
  setLinearFactor(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setLinearFactor(newVel);
    bullet.destroy(newVel);
  }
  setAngularFactor(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setAngularFactor(newVel);
    bullet.destroy(newVel);
  }
  applyCentralForce(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.applyCentralForce(newVel);
    bullet.destroy(newVel);
  }
  applyCentralImpulse(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.applyCentralImpulse(newVel);
    bullet.destroy(newVel);
  }
  setDamping(linear, angular = 0) {
    this._rawRigidBody.setDamping(linear, angular);
  }
  setCcdMotionThreshold(ccdMotionThreshold) {
    this._rawRigidBody.setCcdMotionThreshold(ccdMotionThreshold);
  }
  setCcdSweptSphereRadius(radius) {
    this._rawRigidBody.setCcdSweptSphereRadius(radius);
  }
  setRestitution(restitution) {
    this._rawRigidBody.setRestitution(restitution);
  }
  setFriction(friction) {
    this._rawRigidBody.setFriction(friction);
  }
  setRollingFriction(friction) {
    this._rawRigidBody.setRollingFriction(friction);
  }
  setGravity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setGravity(newVel);
    bullet.destroy(newVel);
  }
  isStaticObject() {
    return this._rawRigidBody.isStaticObject();
  }
  isKinematicObject() {
    return this._rawRigidBody.isKinematicObject();
  }
  isStaticOrKinematicObject() {
    return this._rawRigidBody.isStaticOrKinematicObject();
  }
  isActive() {
    return this.isStaticOrKinematicObject() || this._rawRigidBody.isActive();
  }
  enableDeactivation() {
    this._rawRigidBody.activate(true);
  }
  disableDeactivation() {
    this._rawRigidBody.setActivationState(DISABLE_DEACTIVATION);
  }
  cannotDeactivate() {
    return this.isStaticOrKinematicObject() || this._rawRigidBody.getActivationState() == DISABLE_DEACTIVATION;
  }
  canDeactivate() {
    return !this.cannotDeactivate();
  }
}
// src/ts-framework/bullet-js/PhysicVehicle.ts
var glm3 = __toESM(require_cjs(), 1);

class ConcretePhysicVehicle {
  _chassisBody;
  _vehicleTuning;
  _defaultVehicleRaycaster;
  _rawVehicle;
  constructor(rawDynamicsWorld, chassisBody, def) {
    const bullet = WasmModuleHolder.get();
    this._chassisBody = chassisBody;
    this._vehicleTuning = new bullet.btVehicleTuning;
    this._defaultVehicleRaycaster = new bullet.btDefaultVehicleRaycaster(rawDynamicsWorld);
    this._rawVehicle = new bullet.btRaycastVehicle(this._vehicleTuning, chassisBody._rawRigidBody, this._defaultVehicleRaycaster);
    this._rawVehicle.setCoordinateSystem(def.coordinateSystem[0], def.coordinateSystem[1], def.coordinateSystem[2]);
    const groundDirection = new bullet.btVector3(def.groundDirection[0], def.groundDirection[1], def.groundDirection[2]);
    const rotationAxis = new bullet.btVector3(def.rotationAxis[0], def.rotationAxis[1], def.rotationAxis[2]);
    const connectionPoint = new bullet.btVector3;
    for (let ii = 0;ii < def.wheels.length; ++ii) {
      const current = def.wheels[ii];
      connectionPoint.setValue(current.connectionPoint[0], current.connectionPoint[1], current.connectionPoint[2]);
      const wheelInfo = this._rawVehicle.addWheel(connectionPoint, groundDirection, rotationAxis, def.suspensionRestLength, def.wheelRadius, this._vehicleTuning, current.isFrontWheel);
      wheelInfo.set_m_suspensionStiffness(def.suspensionStiffness);
      wheelInfo.set_m_wheelsDampingRelaxation(def.wheelsDampingRelaxation);
      wheelInfo.set_m_wheelsDampingCompression(def.wheelsDampingCompression);
      wheelInfo.set_m_frictionSlip(def.wheelFriction);
      wheelInfo.set_m_rollInfluence(def.rollInfluence);
    }
    bullet.destroy(connectionPoint);
    bullet.destroy(groundDirection);
    bullet.destroy(rotationAxis);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawVehicle);
    bullet.destroy(this._defaultVehicleRaycaster);
    bullet.destroy(this._vehicleTuning);
  }
  getChassisBody() {
    return this._chassisBody;
  }
  setSteeringValue(index, angle) {
    this._rawVehicle.setSteeringValue(angle, index);
  }
  applyEngineForce(index, force) {
    this._rawVehicle.applyEngineForce(force, index);
  }
  setBrake(index, force) {
    this._rawVehicle.setBrake(force, index);
  }
  getWheeTransforms() {
    const bullet = WasmModuleHolder.get();
    const allTransforms = [];
    const interpolatedTransform = true;
    const numWheels = this._rawVehicle.getNumWheels();
    for (let ii = 0;ii < numWheels; ++ii) {
      this._rawVehicle.updateWheelTransform(ii, interpolatedTransform);
      const rawTransform = this._rawVehicle.getWheelTransformWS(ii);
      const rawOrigin = rawTransform.getOrigin();
      const rawRotation = rawTransform.getRotation();
      allTransforms.push({
        position: glm3.vec3.fromValues(rawOrigin.x(), rawOrigin.y(), rawOrigin.z()),
        rotation: glm3.vec4.fromValues(rawRotation.x(), rawRotation.y(), rawRotation.z(), rawRotation.w())
      });
      bullet.destroy(rawRotation);
      bullet.destroy(rawOrigin);
      bullet.destroy(rawTransform);
    }
    return allTransforms;
  }
}
// src/ts-framework/bullet-js/Generic6DofConstraint.ts
class ConcreteGeneric6DofConstraint {
  _rawConstraint;
  _bodyA;
  _bodyB;
  constructor(def) {
    this._bodyA = def.bodyA;
    this._bodyB = def.bodyB;
    const bullet = WasmModuleHolder.get();
    const rawRigidBodyA = def.bodyA._rawRigidBody;
    const rawRigidBodyB = def.bodyB._rawRigidBody;
    const newRotation = new bullet.btQuaternion(0, 0, 1, 0);
    const newPositionA = new bullet.btVector3(def.frameA[0], def.frameA[1], def.frameA[2]);
    const newTransformA = new bullet.btTransform(newRotation, newPositionA);
    const newPositionB = new bullet.btVector3(def.frameB[0], def.frameB[1], def.frameB[2]);
    const newTransformB = new bullet.btTransform(newRotation, newPositionB);
    this._rawConstraint = new bullet.btGeneric6DofSpringConstraint(rawRigidBodyA, rawRigidBodyB, newTransformA, newTransformB, def.useReferenceFrameA);
    this._rawConstraint.enableSpring(0, false);
    this._rawConstraint.enableSpring(1, false);
    this._rawConstraint.enableSpring(2, false);
    this._rawConstraint.setStiffness(0, 1);
    this._rawConstraint.setStiffness(1, 1);
    this._rawConstraint.setStiffness(2, 1);
    this._rawConstraint.setDamping(0, 1);
    this._rawConstraint.setDamping(1, 1);
    this._rawConstraint.setDamping(2, 1);
    bullet.destroy(newTransformA);
    bullet.destroy(newTransformB);
    bullet.destroy(newPositionA);
    bullet.destroy(newPositionB);
    bullet.destroy(newRotation);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawConstraint);
  }
  setLinearLowerLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setLinearLowerLimit(newVal);
    bullet.destroy(newVal);
  }
  setLinearUpperLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setLinearUpperLimit(newVal);
    bullet.destroy(newVal);
  }
  setAngularLowerLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setAngularLowerLimit(newVal);
    bullet.destroy(newVal);
  }
  setAngularUpperLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setAngularUpperLimit(newVal);
    bullet.destroy(newVal);
  }
}

// src/ts-framework/bullet-js/HingeConstraint.ts
class ConcreteHingeConstraint {
  _rawConstraint;
  _bodyA;
  _bodyB;
  constructor(def) {
    this._bodyA = def.bodyA;
    this._bodyB = def.bodyB;
    const bullet = WasmModuleHolder.get();
    const rawRigidBodyA = def.bodyA._rawRigidBody;
    const rawRigidBodyB = def.bodyB._rawRigidBody;
    const pivotInA = new bullet.btVector3(def.pivotInA[0], def.pivotInA[1], def.pivotInA[2]);
    const pivotInB = new bullet.btVector3(def.pivotInB[0], def.pivotInB[1], def.pivotInB[2]);
    const axisInA = new bullet.btVector3(def.axisInA[0], def.axisInA[1], def.axisInA[2]);
    const axisInB = new bullet.btVector3(def.axisInB[0], def.axisInB[1], def.axisInB[2]);
    this._rawConstraint = new bullet.btHingeConstraint(rawRigidBodyA, rawRigidBodyB, pivotInA, pivotInB, axisInA, axisInB, def.useReferenceFrameA);
    bullet.destroy(pivotInA);
    bullet.destroy(pivotInB);
    bullet.destroy(axisInA);
    bullet.destroy(axisInB);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawConstraint);
  }
  setLimit(low, high, softness, biasFactor, relaxationFactor) {
    this._rawConstraint.setLimit(low, high, softness, biasFactor, relaxationFactor);
  }
  enableAngularMotor(enableMotor, targetVelocity, maxMotorImpulse) {
    this._rawConstraint.enableAngularMotor(enableMotor, targetVelocity, maxMotorImpulse);
  }
  enableMotor(enableMotor) {
    this._rawConstraint.enableMotor(enableMotor);
  }
  setMaxMotorImpulse(maxMotorImpulse) {
    this._rawConstraint.setMaxMotorImpulse(maxMotorImpulse);
  }
  setMotorTarget(targetAngle, dt) {
    this._rawConstraint.setMotorTarget(targetAngle, dt);
  }
}

// src/ts-framework/bullet-js/rayCast.ts
var glm4 = __toESM(require_cjs(), 1);
var rayCast = (rawDynamicsWorld, bodyMap, def) => {
  const bullet = WasmModuleHolder.get();
  const fromVec3 = new bullet.btVector3(def.from[0], def.from[1], def.from[2]);
  const toVec3 = new bullet.btVector3(def.to[0], def.to[1], def.to[2]);
  const result = new bullet.ClosestRayResultCallback(fromVec3, toVec3);
  result.set_m_collisionFilterGroup(def.collisionFilterGroup);
  result.set_m_collisionFilterMask(def.collisionFilterMask);
  rawDynamicsWorld.rayTest(fromVec3, toVec3, result);
  if (!result.hasHit()) {
    bullet.destroy(fromVec3);
    bullet.destroy(toVec3);
    bullet.destroy(result);
    return;
  }
  const object = bodyMap.get(result.get_m_collisionObject().ptr);
  if (!object) {
    bullet.destroy(fromVec3);
    bullet.destroy(toVec3);
    bullet.destroy(result);
    return;
  }
  const rawNormal = result.get_m_hitNormalWorld();
  const rawPosition = result.get_m_hitPointWorld();
  const impact = glm4.vec3.fromValues(rawPosition.x(), rawPosition.y(), rawPosition.z());
  const normal = glm4.vec3.fromValues(rawNormal.x(), rawNormal.y(), rawNormal.z());
  bullet.destroy(rawNormal);
  bullet.destroy(rawPosition);
  bullet.destroy(fromVec3);
  bullet.destroy(toVec3);
  bullet.destroy(result);
  return {
    object,
    fraction: result.get_m_closestHitFraction(),
    impact,
    normal
  };
};

// src/ts-framework/bullet-js/PhysicWorld.ts
var glm5 = __toESM(require_cjs(), 1);

class PhysicWorld extends ContactEventHandler {
  _collisionConf;
  _dispatcher;
  _broadPhase;
  _solver;
  _rawDynamicsWorld;
  _bodyMap = new Map;
  _vehicleMap = new Map;
  _constraintMap = new Map;
  _allConstraints = [];
  _constraintMap2 = new Map;
  _allConstraints2 = [];
  constructor() {
    super();
    const bullet = WasmModuleHolder.get();
    this._collisionConf = new bullet.btDefaultCollisionConfiguration;
    this._dispatcher = new bullet.btCollisionDispatcher(this._collisionConf);
    this._broadPhase = new bullet.btDbvtBroadphase;
    this._solver = new bullet.btSequentialImpulseConstraintSolver;
    this._rawDynamicsWorld = new bullet.btjsDynamicsWorld(this._dispatcher, this._broadPhase, this._solver, this._collisionConf);
    this._rawDynamicsWorld.setGravity(new bullet.btVector3(0, 0, -10));
    this._initCollisionEvents();
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    this._allConstraints.forEach((currConstraint) => currConstraint.dispose());
    this._allConstraints.length = 0;
    this._constraintMap.clear();
    this._allConstraints2.forEach((currConstraint) => currConstraint.dispose());
    this._allConstraints2.length = 0;
    this._constraintMap2.clear();
    [...this._vehicleMap.values()].forEach((currVehicle) => currVehicle.dispose());
    this._vehicleMap.clear();
    [...this._bodyMap.values()].forEach((currBody) => currBody.dispose());
    this._bodyMap.clear();
    bullet.destroy(this._rawDynamicsWorld);
    bullet.destroy(this._solver);
    bullet.destroy(this._broadPhase);
    bullet.destroy(this._dispatcher);
    bullet.destroy(this._collisionConf);
  }
  createRigidBody(def) {
    const newShape = this._getShape(def.shape, def.mass > 0);
    const newBody = new ConcretePhysicBody(def, newShape);
    this._rawDynamicsWorld.addRigidBody(newBody._rawRigidBody, -1, -1);
    this._bodyMap.set(newBody._rawRigidBody.ptr, newBody);
    return newBody;
  }
  _getShape(def, isDynamic) {
    const bullet = WasmModuleHolder.get();
    switch (def.type) {
      case "box": {
        const boxHalfExtent = new bullet.btVector3;
        boxHalfExtent.setValue(def.size[0] * 0.5, def.size[1] * 0.5, def.size[2] * 0.5);
        const rawShape = new bullet.btBoxShape(boxHalfExtent);
        bullet.destroy(boxHalfExtent);
        return {
          shape: rawShape,
          cleanup: () => bullet.destroy(rawShape)
        };
      }
      case "sphere": {
        const rawShape = new bullet.btSphereShape(def.radius);
        return {
          shape: rawShape,
          cleanup: () => bullet.destroy(rawShape)
        };
      }
      case "cylinder": {
        const bVec = new bullet.btVector3(def.radius, def.radius, def.length);
        const rawShape = new bullet.btCylinderShape(bVec);
        return {
          shape: rawShape,
          cleanup: () => {
            bullet.destroy(rawShape);
            bullet.destroy(bVec);
          }
        };
      }
      case "capsule": {
        const rawShape = new bullet.btCapsuleShape(def.radius, def.length);
        return {
          shape: rawShape,
          cleanup: () => bullet.destroy(rawShape)
        };
      }
      case "mesh": {
        const triangleMesh = new bullet.btTriangleMesh;
        const bVec1 = new bullet.btVector3;
        const bVec2 = new bullet.btVector3;
        const bVec3 = new bullet.btVector3;
        def.triangles.forEach(([vec1, vec2, vec36]) => {
          bVec1.setValue(vec1[0], vec1[1], vec1[2]);
          bVec2.setValue(vec2[0], vec2[1], vec2[2]);
          bVec3.setValue(vec36[0], vec36[1], vec36[2]);
          triangleMesh.addTriangle(bVec1, bVec2, bVec3);
        });
        bullet.destroy(bVec1);
        bullet.destroy(bVec2);
        bullet.destroy(bVec3);
        if (isDynamic) {
          const meshShape = new bullet.btGImpactMeshShape(triangleMesh);
          const rawShape2 = this._rawDynamicsWorld.createCompoundFromGimpactShape(meshShape, 0);
          return {
            shape: rawShape2,
            cleanup: () => {
              bullet.destroy(rawShape2);
              bullet.destroy(meshShape);
              bullet.destroy(triangleMesh);
            }
          };
        }
        const rawShape = new bullet.btBvhTriangleMeshShape(triangleMesh, true);
        return {
          shape: rawShape,
          cleanup: () => {
            bullet.destroy(rawShape);
            bullet.destroy(triangleMesh);
          }
        };
      }
      case "compound": {
        const rawCompound = new bullet.btCompoundShape;
        const allRawShapes = [];
        const localVec3 = new bullet.btVector3;
        const localQuat = new bullet.btQuaternion(0, 0, 1, 0);
        const localTransform = new bullet.btTransform;
        for (const { shape, position, orientation } of def.shapes) {
          const rawValues = this._getShape(shape, isDynamic);
          allRawShapes.push(rawValues);
          localVec3.setValue(position[0], position[1], position[2]);
          localQuat.setValue(orientation[0], orientation[1], orientation[2], orientation[3]);
          localTransform.setOrigin(localVec3);
          localTransform.setRotation(localQuat);
          rawCompound.addChildShape(localTransform, rawValues.shape);
        }
        bullet.destroy(localVec3);
        bullet.destroy(localQuat);
        bullet.destroy(localTransform);
        return {
          shape: rawCompound,
          cleanup: () => {
            bullet.destroy(rawCompound);
            for (const currRawShape of allRawShapes) {
              bullet.destroy(currRawShape);
            }
          }
        };
      }
    }
  }
  destroyRigidBody(rigidBody) {
    const rawRigidBody = rigidBody._rawRigidBody;
    const bodyPtr = rawRigidBody.ptr;
    this._rawDynamicsWorld.removeRigidBody(rawRigidBody);
    this._bodyMap.delete(bodyPtr);
    rigidBody.dispose();
    const bodyListOfConstraints = this._constraintMap.get(bodyPtr);
    if (bodyListOfConstraints) {
      for (const currConstraint of bodyListOfConstraints) {
        this.destroyGeneric6DofConstraint(currConstraint);
      }
    }
    const bodyListOfConstraints2 = this._constraintMap2.get(bodyPtr);
    if (bodyListOfConstraints2) {
      for (const currConstraint of bodyListOfConstraints2) {
        this.destroyHingeConstraint(currConstraint);
      }
    }
  }
  createVehicle(def) {
    const newBody = this.createRigidBody(def.chassisDef);
    const rawRigidBody = newBody;
    const vehicle = new ConcretePhysicVehicle(this._rawDynamicsWorld, rawRigidBody, def);
    this._rawDynamicsWorld.addAction(vehicle._rawVehicle);
    this._vehicleMap.set(vehicle.ptr, vehicle);
    return vehicle;
  }
  destroyVehicle(vehicle) {
    this.destroyRigidBody(vehicle._chassisBody);
    this._rawDynamicsWorld.removeAction(vehicle._rawVehicle);
    this._vehicleMap.delete(vehicle.ptr);
    vehicle.dispose();
  }
  createGeneric6DofConstraint(def) {
    const constraint = new ConcreteGeneric6DofConstraint(def);
    const ptrA = def.bodyA._rawRigidBody.ptr;
    let bodyListA = this._constraintMap.get(ptrA);
    if (!bodyListA) {
      bodyListA = [];
      this._constraintMap.set(ptrA, bodyListA);
    }
    bodyListA.push(constraint);
    const ptrB = def.bodyB._rawRigidBody.ptr;
    let bodyListB = this._constraintMap.get(ptrB);
    if (!bodyListB) {
      bodyListB = [];
      this._constraintMap.set(ptrA, bodyListB);
    }
    bodyListB.push(constraint);
    this._allConstraints.push(constraint);
    this._rawDynamicsWorld.addConstraint(constraint._rawConstraint, true);
    return constraint;
  }
  destroyGeneric6DofConstraint(constraint) {
    const concrete = constraint;
    this._rawDynamicsWorld.removeConstraint(concrete._rawConstraint);
    const bodyListA = this._constraintMap.get(concrete._bodyA._rawRigidBody.ptr);
    if (bodyListA) {
      const index2 = bodyListA.indexOf(concrete);
      if (index2 >= 0) {
        bodyListA.splice(index2, 0);
      }
    }
    const bodyListB = this._constraintMap.get(concrete._bodyB._rawRigidBody.ptr);
    if (bodyListB) {
      const index2 = bodyListB.indexOf(concrete);
      if (index2 >= 0) {
        bodyListB.splice(index2, 0);
      }
    }
    const index = this._allConstraints.indexOf(concrete);
    if (index >= 0) {
      this._allConstraints.splice(index, 0);
    }
    concrete.dispose();
  }
  createHingeConstraint(def) {
    const constraint = new ConcreteHingeConstraint(def);
    const ptrA = def.bodyA._rawRigidBody.ptr;
    let bodyListA = this._constraintMap2.get(ptrA);
    if (!bodyListA) {
      bodyListA = [];
      this._constraintMap2.set(ptrA, bodyListA);
    }
    bodyListA.push(constraint);
    const ptrB = def.bodyB._rawRigidBody.ptr;
    let bodyListB = this._constraintMap2.get(ptrB);
    if (!bodyListB) {
      bodyListB = [];
      this._constraintMap2.set(ptrA, bodyListB);
    }
    bodyListB.push(constraint);
    this._allConstraints2.push(constraint);
    this._rawDynamicsWorld.addConstraint(constraint._rawConstraint, true);
    return constraint;
  }
  destroyHingeConstraint(constraint) {
    const concrete = constraint;
    this._rawDynamicsWorld.removeConstraint(concrete._rawConstraint);
    const bodyListA = this._constraintMap2.get(concrete._bodyA._rawRigidBody.ptr);
    if (bodyListA) {
      const index2 = bodyListA.indexOf(concrete);
      if (index2 >= 0) {
        bodyListA.splice(index2, 0);
      }
    }
    const bodyListB = this._constraintMap2.get(concrete._bodyB._rawRigidBody.ptr);
    if (bodyListB) {
      const index2 = bodyListB.indexOf(concrete);
      if (index2 >= 0) {
        bodyListB.splice(index2, 0);
      }
    }
    const index = this._allConstraints2.indexOf(concrete);
    if (index >= 0) {
      this._allConstraints2.splice(index, 0);
    }
    concrete.dispose();
  }
  rayCast(from, to) {
    return rayCast(this._rawDynamicsWorld, this._bodyMap, {
      from,
      to,
      collisionFilterGroup: -1,
      collisionFilterMask: -1
    });
  }
  convexSweep(from, to, radius) {
    return convexSweep(this._rawDynamicsWorld, {
      from,
      to,
      collisionFilterGroup: -1,
      collisionFilterMask: -1,
      radius
    });
  }
  _initCollisionEvents() {
    const eventFlags = {
      world: 1 << 0,
      bodyA: 1 << 1,
      bodyB: 1 << 2
    };
    const _onContactChange = (event) => {
      const bodyA = event.data.getBodyA();
      const bodyB = event.data.getBodyB();
      const rigidBodyA = this._bodyMap.get(bodyA.ptr);
      const rigidBodyB = this._bodyMap.get(bodyB.ptr);
      if (!rigidBodyA || !rigidBodyB) {
        return;
      }
      const type2 = event.type;
      const collisionFlag = (this.isEventListenedTo(type2) ? eventFlags.world : 0) | (rigidBodyA.isEventListenedTo(type2) ? eventFlags.bodyA : 0) | (rigidBodyB.isEventListenedTo(type2) ? eventFlags.bodyB : 0);
      if (collisionFlag == 0) {
        return;
      }
      const contactId = event.data.getId();
      const bulletPos = event.data.getPosition();
      const bulletNormalB = event.data.getNormalB();
      const position = {
        x: bulletPos.x(),
        y: bulletPos.y(),
        z: bulletPos.z()
      };
      const normalB = {
        x: bulletNormalB.x(),
        y: bulletNormalB.y(),
        z: bulletNormalB.z()
      };
      if (collisionFlag & eventFlags.world) {
        this.dispatchEvent({
          type: type2,
          data: {
            contactId,
            rigidBodyA,
            rigidBodyB,
            position: glm5.vec3.fromValues(position.x, position.y, position.z),
            normalB: glm5.vec3.fromValues(normalB.x, normalB.y, normalB.z)
          }
        });
      }
      if (collisionFlag & eventFlags.bodyA) {
        rigidBodyA.dispatchEvent({
          type: type2,
          data: {
            contactId,
            other: rigidBodyB,
            position: glm5.vec3.fromValues(position.x, position.y, position.z),
            normalB: glm5.vec3.fromValues(-normalB.x, -normalB.y, -normalB.z)
          }
        });
      }
      if (collisionFlag & eventFlags.bodyB) {
        rigidBodyB.dispatchEvent({
          type: type2,
          data: {
            contactId,
            other: rigidBodyA,
            position: glm5.vec3.fromValues(position.x, position.y, position.z),
            normalB: glm5.vec3.fromValues(normalB.x, normalB.y, normalB.z)
          }
        });
      }
    };
    const bullet = WasmModuleHolder.get();
    bullet.on("beginContact", _onContactChange);
    bullet.on("updateContact", _onContactChange);
    bullet.on("endContact", _onContactChange);
    bullet.on("ccdContact", _onContactChange);
    bullet.listenToContactCallbacks();
  }
  stepSimulation(deltaTimeSec, maxSubSteps = 3, fixedStep = 1 / 60) {
    this._rawDynamicsWorld.stepSimulation(deltaTimeSec, maxSubSteps, fixedStep);
  }
  setGravity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawDynamicsWorld.setGravity(newVel);
    bullet.destroy(newVel);
  }
}
// samples/nodejs-server-app/src/main.ts
import * as path2 from "path";
var __dirname = "/home/barbie/Documents/_PROGRAMMING/github/perso/FrankenPhys/samples/nodejs-server-app/src";
var asyncRun = async () => {
  const urlPrefix = path2.join(__dirname, "..", "..", "..", "build");
  await NodeJsBulletWasmModule.loadWasmPart(urlPrefix);
  exports_bullet_js.WasmModuleHolder.set(NodeJsBulletWasmModule.get());
  const physicWorld = new exports_bullet_js.PhysicWorld;
  physicWorld.setGravity(0, 0, -10);
  const allContactEvents2 = new Set;
  physicWorld.addEventListener("beginContact", (event) => {
    allContactEvents2.add(event.data.contactId);
  });
  physicWorld.addEventListener("endContact", (event) => {
    allContactEvents2.delete(event.data.contactId);
  });
  const fallingSphereBody = physicWorld.createRigidBody({
    mass: 1,
    shape: { type: "sphere", radius: 1 }
  });
  fallingSphereBody.setPosition(0, 0, 10);
  fallingSphereBody.setFriction(1);
  fallingSphereBody.disableDeactivation();
  const groundBoxBody = physicWorld.createRigidBody({
    mass: 0,
    shape: { type: "box", size: [2, 2, 2] }
  });
  groundBoxBody.setPosition(0, 0, -1);
  groundBoxBody.setFriction(1);
  groundBoxBody.disableDeactivation();
  for (let ii = 0;ii < 100; ++ii) {
    const frameRate = 1 / 60;
    const subSteps = 0;
    physicWorld.stepSimulation(frameRate, subSteps, frameRate);
    const prettyPos = [...fallingSphereBody.getPosition()].map((val) => val.toFixed(2));
    console.log(prettyPos, "total collision:", allContactEvents2.size);
  }
  console.log("end");
};
asyncRun();

//# debugId=95B7C67069AFEF6464756E2164756E21
//# sourceMappingURL=data:application/json;base64,
